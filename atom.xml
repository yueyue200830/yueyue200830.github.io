<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Z Blog</title>
  
  <subtitle>Simply CS, Simply Coding</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yueyue200830.github.io/"/>
  <updated>2020-05-15T09:43:10.077Z</updated>
  <id>https://yueyue200830.github.io/</id>
  
  <author>
    <name>yueyue200830</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Liunx系统journal日志清理</title>
    <link href="https://yueyue200830.github.io/2020/05/15/Liunx%E7%B3%BB%E7%BB%9Fjournal%E6%97%A5%E5%BF%97%E6%B8%85%E7%90%86/"/>
    <id>https://yueyue200830.github.io/2020/05/15/Liunx%E7%B3%BB%E7%BB%9Fjournal%E6%97%A5%E5%BF%97%E6%B8%85%E7%90%86/</id>
    <published>2020-05-15T08:51:33.000Z</published>
    <updated>2020-05-15T09:43:10.077Z</updated>
    
    <content type="html"><![CDATA[<p>Linux系统下<code>var/log/journal</code>常常霸占着大量空间，但又一般情况毫无用处，因此需要进行一些设定来控制日志大小。</p><a id="more"></a><p><strong>题外话</strong></p><p>作为一个linux小白，也就电脑上装了个虚拟机，20G内存，如果不是写作业把电脑内存用爆了，大概也不会注意到它吧。</p><p>我的系统是<code>Ubuntu 18</code>，应该所有linux都适用。</p><h1 id="查看占用内存"><a href="#查看占用内存" class="headerlink" title="查看占用内存"></a>查看占用内存</h1><p>处理到<code>var/log/journal</code>下查看内存占用，还可以直接输入以下命令查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">journalctl --disk-usage</span><br></pre></td></tr></table></figure><h1 id="删除日志"><a href="#删除日志" class="headerlink" title="删除日志"></a>删除日志</h1><h2 id="方法一：通过日志可存在的时间"><a href="#方法一：通过日志可存在的时间" class="headerlink" title="方法一：通过日志可存在的时间"></a>方法一：通过日志可存在的时间</h2><p>通过设置日志可存在的时间长度来删除日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo journalctl --rotate</span><br><span class="line">sudo journalctl --vacuum-time=1s</span><br></pre></td></tr></table></figure><p><strong>第二行：</strong></p><p>这里可选的参数：s是秒，m是分，h是小时，d是日，w是星期，months是月。</p><p>因此一般不太可能出现前一秒生成的日志，因此设置时长为1秒可以删除所有日志。<br>但如果之后想保存一段时间的日志，需要重新设置一下，比如我设置为1个月。</p><p><strong>第一行：</strong></p><p>这里rotate的作用是将一个active的日志变为archived，也就是可能现在在录入日志，把在此之前的日志封装为一个，并换下一个文件进行日志记录。<br>这样可以把在此之前的日志全部清理，当然，不用这个命令也是可以的。</p><h2 id="方法二：通过日志可存在的最大内存"><a href="#方法二：通过日志可存在的最大内存" class="headerlink" title="方法二：通过日志可存在的最大内存"></a>方法二：通过日志可存在的最大内存</h2><p>除了用时间，当然也可以用空间来删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo journalctl --rotate --vacuum-size=50M</span><br></pre></td></tr></table></figure><p>这里是指删除到小于50M，rotate在一些新版本种可以写在一行种。</p><p>空间常见的就是KMGT四个单位</p><h2 id="方法三：直接删除文件"><a href="#方法三：直接删除文件" class="headerlink" title="方法三：直接删除文件"></a>方法三：直接删除文件</h2><p>把整个文件夹全部删除也是没有问题的，不过我个人觉得有上面的方法为什么还要硬核删除呢。</p><h1 id="设置日志参数"><a href="#设置日志参数" class="headerlink" title="设置日志参数"></a>设置日志参数</h1><p>日志文件过大无非是因为没有针对日期和内存大小的自动清理机制，可以通过一些设置来实现。</p><p>修改的文件是<code>/etc/systemd/journald.conf</code></p><h2 id="设置最大占用空间"><a href="#设置最大占用空间" class="headerlink" title="设置最大占用空间"></a>设置最大占用空间</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SystemMaxUse=100M</span><br></pre></td></tr></table></figure><h2 id="设置最长保存时间"><a href="#设置最长保存时间" class="headerlink" title="设置最长保存时间"></a>设置最长保存时间</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MaxFileSec=5day</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.linuxuprising.com/2019/10/how-to-clean-up-systemd-journal-logs.html" target="_blank" rel="noopener">How To Clear The systemd journal Logs</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux系统下&lt;code&gt;var/log/journal&lt;/code&gt;常常霸占着大量空间，但又一般情况毫无用处，因此需要进行一些设定来控制日志大小。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://yueyue200830.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://yueyue200830.github.io/tags/Linux/"/>
    
      <category term="Ubuntu" scheme="https://yueyue200830.github.io/tags/Ubuntu/"/>
    
      <category term="Journal" scheme="https://yueyue200830.github.io/tags/Journal/"/>
    
  </entry>
  
  <entry>
    <title>2020实习申请季</title>
    <link href="https://yueyue200830.github.io/2020/04/21/2020%E5%AE%9E%E4%B9%A0%E7%94%B3%E8%AF%B7%E5%AD%A3/"/>
    <id>https://yueyue200830.github.io/2020/04/21/2020%E5%AE%9E%E4%B9%A0%E7%94%B3%E8%AF%B7%E5%AD%A3/</id>
    <published>2020-04-21T10:12:44.000Z</published>
    <updated>2020-05-03T08:54:18.635Z</updated>
    
    <content type="html"><![CDATA[<p>实习季总算基本告一段落啦，零零碎碎的还有个别面试可能考虑面掉吧，但是已经决定去哪家了。</p><p>和其它人相比之下，我算是非大众类型的一类面试者，开始准备已经很晚，基础可以算是烂得一塌糊度，但是算法比较好（高于普通水平，低于acmer）</p><a id="more"></a><h1 id="个人情况"><a href="#个人情况" class="headerlink" title="个人情况"></a>个人情况</h1><p>本来去年有在Google实习，基本打算今年继续的，所以其实在三月前是觉得自己很稳的。没有任何复习，还在搞其它的东西。最后也是因为怕万一team match挂可以有个备选吧，结果万万没想到真的备选变成了正选。上周被正式通知取消实习。</p><p>正式开始准备（学习）是在三月之后，曾经在3月初还在和同学讨论我是不是该加入复习大军，现在庆幸的是即使线上学习，身边还有一群同学鞭策着自己学习吧。</p><p>所有公司除微众银行以外全部投的上海的岗位，投的岗位为SWE/后台开发/Java开发。</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>说实话算法我基本没刷过题，除了面微软前补了一周的一年前刷的leetcode，基本就剩下看面经里的算法题了。<br>不过算法不太需要刷也多亏了大一的时候学校自己的oj一共刷了400多道吧，leetcode在大二面试前大概刷了60题，剩下就零零碎碎各个网站了。</p><p>因为算是ACM的底子，所以算法题基本是c++，偶尔遇到情况会python，完全不写Java。</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>其实算是0基础开始准备的，计网、操作系统特别烂，Java学了几乎等于没学，数据库还在上课。</p><p>其实即使到今天，我的基础依旧特别烂，一旦深入就完蛋的那种。<br>如果有能力看源码的确很重要。</p><h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><p>所有可见的项目都在Github上了，总体就是：没有能被面试的项目。。。</p><h2 id="最后成果"><a href="#最后成果" class="headerlink" title="最后成果"></a>最后成果</h2><p>Offer: 微软、字节跳动、摩根士丹利<br>挂过：腾讯腾讯云、阿里CFO、美团、微众银行(没消息)<br>放弃：腾讯正式批、阿里蚂蚁、携程、美团、亚马逊<br>无消息：SAP、Paypal（明确招满了）</p><h1 id="微软"><a href="#微软" class="headerlink" title="微软"></a>微软</h1><p>微软是我需要面的公司里最合我的一家吧，算是除Google以外最看重算法最少基础的一家公司。</p><p>感觉也算是运气好，我全程算法题，所以还是比较快乐的面试经历。</p><h2 id="笔试"><a href="#笔试" class="headerlink" title="笔试"></a>笔试</h2><p>我没有参加内推（想到的时候过期的），所以做了笔试，最后的话是0+1+(1-2个测试点)。</p><p>第一题花费了很久没看清题意，并且熟悉编译器也花了很久，最后放弃了。<br>第二题虽然听说是去年原题，但我是没有见过啦，不过因为很熟DP，20分钟AC了。<br>第三题忘记是什么题了，最后有两个case没过。</p><h2 id="LC1"><a href="#LC1" class="headerlink" title="LC1"></a>LC1</h2><p>我的一面是个女面试官，其实自己表现不算满意，但也其实是觉得面试官没有深究每题？</p><p><strong>第一题</strong></p><blockquote><p>给定一群人，他们可能有些人相互认识，定义只要其中有认识的人就算是一个朋友圈，找到一共有多少个朋友圈。</p></blockquote><p>我给的解答是DFS，不过面试官问我会不会查并集，实话实说知道但不了解，于是写了DFS的解法。<br>由于写了C++，其实corner case和需要考虑的是比其它语言多的，比如本题我用了引用，但只有部分的引用，被面试官揪出来了。<br>之后写了一些测试用例，并且在面试官的提示下加入了NULL的判断。</p><p><strong>第二题</strong></p><blockquote><p>给定一个数组，两个人玩游戏，只能取左边或者右边，每次都是以最优的方式取的，求第一个取的人是否会赢。</p></blockquote><p>用的DP解法，面试官理解了很久（我不是很懂这个解法不是一个常见解法之一吗？）<br>继续测试用例，并且用测试用例给面试官解答</p><p><strong>一个小题目</strong></p><p>最后时间也不是很足了，面试官问了我HashMap的设计，我答了一个基本设计，再加上了一些Java的实现。</p><p><strong>提问</strong></p><p>问了一下面试官所在的组，写C++和C#多，瞬间觉得应该用python写算法题的。。</p><h2 id="LC2"><a href="#LC2" class="headerlink" title="LC2"></a>LC2</h2><p>这个面试官就问了一道题，个人觉得做得还行，但逻辑不够清晰</p><p><strong>题目</strong></p><blockquote><p>给定一个四则运算的字符串输入，求出结果</p></blockquote><p>记忆中曾经好像见过类似的，用的是栈？但没想出来，最后很复杂的用了很多变量做的，白板代码又是讲解了半天的逻辑。<br>面试官没让我写判断输入是否合法，但直接讲了不合法的情况，然后就被C++坑了呀，没考虑到输入长度超出int类型的情况（我爱python）</p><h2 id="Leader"><a href="#Leader" class="headerlink" title="Leader"></a>Leader</h2><p>唔，这是一场神奇的面试，主要奇怪在后半部分。</p><p>首先面试官让我讲一下之前的算法题，然后再二面的题目上加上了括号，说一下怎么做，我做了一个懒惰的修改版，直接递归。<br>然后分享屏幕，用IDE做了一题，可以编译（人好啊）。至于面试题，我想不起来了，本地代码被我删除了。。。不过很简单就是了，最多十几分钟写完的</p><p><strong>然后</strong>，30分钟面完了，面试官为了撑时间和我闲聊，甚至推荐我转行投行、PE和咨询赚钱。面完觉得要挂了。。。</p><h1 id="字节跳动"><a href="#字节跳动" class="headerlink" title="字节跳动"></a>字节跳动</h1><p>申请的是AI Lab的后端实习，当初纯粹是想挑个冷门的部门试试，但现在感觉正式员工还是可能其它部门比较好？<br>和大部分部门不太一样的是，AI Lab只有两面，超级快乐！</p><h2 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h2><p>基础基本不记得问了什么，但没什么难点是肯定的。</p><p>由于有前端经历，被面试官问了一个js的闭包，没复习不会，不过用var声明题目看起来有点历史悠久呀。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"The Window"</span>;</span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">　　name : <span class="string">"My Object"</span>,</span><br><span class="line">　　getNameFunc : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　　　<span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">　　　　&#125;;</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>算法题一</strong></p><blockquote><p>给一棵完全二叉树，计算它的节点个数</p></blockquote><p>一开始完全没看倒完全二叉树，所以用了全搜索的解法，后来提醒之下说了一个其实没问题但比较复杂然而面试官并没有懂的解法，时间复杂度和面试官的解法一样。</p><p><strong>算法题二</strong></p><blockquote><p>Leetcode原题：Partition Equal Subset Sum</p></blockquote><p>见过，不记得是否做过，题目看错，最后发现dp，五分钟秒的，但因为写了优化版的面试官没看懂，又两分钟极限写代码证明自己是对的。</p><p><strong>总结</strong>：面试官不是算法好的人，脑子一般般，优化dp这么基础的看不懂，建议多刷点题。</p><h2 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h2><p>周日面试面试官还因为开会迟到，好忙呀。</p><p>此面没问基础，问了项目，但也不深挖。</p><p><strong>算法题一</strong></p><blockquote><p>给n*m的矩阵，正整数，假设为小岛，如果某个点大于它相邻的点，那么就说河水可以流下去，这个矩阵外面是海水，最旁边的点河水可以流到海里，找出不能流到海里的点</p></blockquote><p>基础dfs，挺简单的</p><p><strong>算法题二</strong></p><blockquote><p>给1-n的，输出字典序</p></blockquote><p>据说leetcode原题，没见过，一开始没注意到是1-n，字典树都出来了，后来反应过来很简单，递归。结果写得太快被反问是不是做过？？没见我题目都没看清嘛。</p><h2 id="hr面"><a href="#hr面" class="headerlink" title="hr面"></a>hr面</h2><p>用的zoom，谈了20分钟，主要也就是读不读研，怎么选择offer。个人感觉表现一般，最后联系我给offer的也是这个hr了。</p><h1 id="美团"><a href="#美团" class="headerlink" title="美团"></a>美团</h1><p>美团hr真的是史上最垃圾hr，但是面试官人真的好好！</p><p>当初没了解过部门，投的是基础研发，感觉比较偏？面的部门是搞数据库的</p><h2 id="笔试-1"><a href="#笔试-1" class="headerlink" title="笔试"></a>笔试</h2><p>1+1+0.45+0+0.45<br>算是一个还行但也不太好的成绩吧，不过喜欢美团的题目，最算法的一个。</p><h2 id="一面（电面）"><a href="#一面（电面）" class="headerlink" title="一面（电面）"></a>一面（电面）</h2><p>这个面试官人超级好！不会的就说没关系，还是唯一一个挖我的blog的面试官。</p><ul><li>讲一下项目（挖坑j2ee自己跳下去了）</li><li>你是java比较熟吗（项目java，算法c++，python也还行）</li><li>前端使用js？（不太熟，用过）</li><li>问linux，$0,$1,$?,$$是什么（记忆中回答了$0和$1是第一个和第二个参数）</li><li>然后提到了我的blog，于是问怎么修改ssh端口（我的博文，但是不记得了）</li><li>Linux常用命令</li><li>服务器部署了什么（提到项目and我的乱七八糟的小东西）</li><li>假设项目部署在服务器，并且又访问日志，如果用linux命令获取最常访问的ip（说了map，用linux命令不会）</li><li>硬链接&amp;软链接（不记得）</li><li>数据库存储引擎（innodb，还有一个不记得）</li><li>数据库事务</li><li>隔离级别</li><li>数据库int(11)和int(10)有区别吗？范围一样吗（猜的有，不一样）</li><li>数据库表里的数据被清掉一半，但磁盘没释放，为什么？（不会）</li><li>七层模型and常用协议</li><li>http code</li><li>三次握手四次挥手</li><li>Js的apply和call区别（没听说过，懵逼）</li><li>跨域（没回答好，说一般在java配置）面试官表示jsonp可用解决</li><li>Vue监听属性的变化（不太知道，猜了个onChange，顺便我问投的后端啊）</li><li>Jsp和servlet有什么区别（表示一起用的呀，不知道）面试官说：同一个。。。</li><li>算法题：ip转成int再转回ip</li><li>设计lru（没答好，我说了一个方法，让再想一个，表示感觉没法优化了。。）</li><li>假设有人用脚本访问你的项目，如何限制访问（一开始说java，后来说nginx，然后才知道要数据库。。。主要说法就是map记录次数），升级版是分布式，再说如果访问量更大呢（猜了一个redis）</li><li>介绍团队</li><li>反问怎么了解前端</li><li>又问了我blog打cf，我就趁机表示了一下最近没怎么刷题，后来想拿cf练练手。</li></ul><h2 id="二面（电面）"><a href="#二面（电面）" class="headerlink" title="二面（电面）"></a>二面（电面）</h2><p>优秀的一面面试官，面完10分钟给我约了二面！<br>二面感觉自己面得很糟糕</p><p><em>有空补，可能是个坑</em></p><h2 id="hr面-1"><a href="#hr面-1" class="headerlink" title="hr面"></a>hr面</h2><p>天真以为oc原来这是面试呀，说考虑一下，反手被挂</p><h2 id="加面一"><a href="#加面一" class="headerlink" title="加面一"></a>加面一</h2><p>被同一个事业群不同部门捞起，加面一轮视频面试。结果因为自己的简历的锅来了一个c++面试官，知识交集约为0。。。</p><ul><li>首先讲了一下技术栈，然后表示用java，c++只会写题。</li><li>讲一下hashmap，被我又扯到java</li><li>跳表会吗（不会，讲道理不是学过数据结构会调表，而是学过redis会跳表啊）</li><li>网络和多线程哪块好一些？表示多线程会java，但没写过大的，网络以为是计网，结果是网络编程？不会，然后扯了一些计网和抓包</li></ul><p><strong>算法题</strong></p><blockquote><p>将单链表的每K个节点之间逆序</p></blockquote><p>题目见过没写过，问了面试官同意到自己的本地ide debug，最后不是那么好的做完了。</p><h2 id="加面二"><a href="#加面二" class="headerlink" title="加面二"></a>加面二</h2><p>加面完大概半小时多被打电话约加面，估计是换一个java面试官来吧。<br>由于那几天有点忙，往后约了两天，然后拿到其它offer就放弃面试了。</p><h1 id="摩根士丹利"><a href="#摩根士丹利" class="headerlink" title="摩根士丹利"></a>摩根士丹利</h1><p>摩根的笔试和微软冲突了，于是没在第一批笔试。<br>今年笔试相比往年简单了不少，2道算法题很简单，5道选择卡了一下。</p><h2 id="电面"><a href="#电面" class="headerlink" title="电面"></a>电面</h2><p>这是一个神奇的电面，面试内容都是我没见过的</p><ul><li>讲一下排序算法有哪些，介绍了快排和归并的思想</li><li>api全称叫什么</li><li>uml全称，了解uml吗，项目中有用过uml吗，对uml的感觉是什么（喜欢或不喜欢）</li><li>了解ddos吗</li><li>什么是事务</li><li>一开始说错了，提到ACID，讲一下acid</li><li>如果单线程单服务器，还要事务吗</li><li>你有用过junit，那么知道如果模拟数据库吗（不记得了，说用的mockito）</li></ul><h2 id="算法面"><a href="#算法面" class="headerlink" title="算法面"></a>算法面</h2><p>这一面被气到了，如果不是面试官找不到我的帐户，大概我不用写那个非算法题吧。<br>作为半个acmer，我很能分别算法题和代码题，显然，我运气不好得碰到代码题。</p><p>事情就是面试官找不到我的帐户，第一次面试，于是给我出了一个题目，分享屏幕，用本地ide写代码。</p><p>题目是约瑟夫环，但是条件限制还挺多的。<br>已经不记得算法版怎么做的了，于是做了链表版的，手写无法编译，肉眼debug，写了一堆问题，一般链表默认单链表啊，我写完告诉我可以双链表，行吧。。</p><p>面试体验-10</p><h2 id="技术面"><a href="#技术面" class="headerlink" title="技术面"></a>技术面</h2><p>没问语言相关，问了数据库（join，primary key &amp; foreign key）和网络（三次握手，还有提到对称加密非对称加密）其余不记得，不难。</p><h2 id="半hr面"><a href="#半hr面" class="headerlink" title="半hr面"></a>半hr面</h2><p>我开启了随意聊天模式，感觉没问太多有效信息，反而被我各种反问hhhh</p><h1 id="阿里"><a href="#阿里" class="headerlink" title="阿里"></a>阿里</h1><p>说真的，作为一个内部自信到要死认为别人都不如自己的大厂，为什么还要发那么多广告。好感度-100</p><h2 id="笔试-2"><a href="#笔试-2" class="headerlink" title="笔试"></a>笔试</h2><p>唔，运气好像还行，1+0.65，那个没全过的c++估计被卡精度了，python被卡超时了。。。</p><h2 id="一面-1"><a href="#一面-1" class="headerlink" title="一面"></a>一面</h2><p>投的是一个CFO部门，然而因为阿里一面是我第一个面试的公司，所以各种不会，各种紧张，面得超级烂。<br>基本就是问我什么都说不太清楚，java熟悉哪块我都不熟悉。</p><p>由于面得太糟糕不愿意去听录音。不过没想到还捞我二面。。。</p><h2 id="二面-1"><a href="#二面-1" class="headerlink" title="二面"></a>二面</h2><ul><li>常见网络协议有哪些</li><li>网络协议分几层，各有什么协议</li><li>为什么要分这么多层（最后被我扯到耦合性去了。。。）</li><li>一般防火墙在哪层（一开始猜了，后来说不知道）</li><li>负载均衡在哪一层（网络/应用都可以）</li><li>http和https区别</li><li>https的安全机制大概逻辑（我讲了非对称加密）</li><li>线程vs进程</li><li>Linux命令看进程/线程运行（ps，我说能看进程，线程不知道）</li><li>Top命令中load和cpu使用率的区别（不知道）</li><li>浏览器中网址过程</li><li>（问题有点绕）最后就是关于cookie和session</li><li>不同服务器如何判别同一个cookie/session（感觉这里一开始面试官说cookie，后来说了session，我回答了session）</li><li>二级域名的cookie，三级域名有吗，（猜有）其它网站有吗（没）</li><li>设计模式（讲工厂讲得特别混乱。。）</li><li>对称加密vs非对称加密</li><li>讲一下hashmap，线程安全吗，哪里会线程不安全</li><li>讲一下奖项。。。然后讲题（我说讲一下最近的cf一道题，但是讲得比较混乱。。因为牵涉到数学）</li><li>讲实习，学到了什么</li></ul><p>面完被打电话问是否愿意转测试（不愿意），之后发现没消息，后来牛客上看了一下这个部门应该招满了，而且自己也的确面得不好。</p><h2 id="一面-2"><a href="#一面-2" class="headerlink" title="一面"></a>一面</h2><p>又找了蚂蚁捞的我，大概是一面和简历面混合版吧，主问项目，面得不好。</p><ul><li>设计一个购物系统</li><li>cookie和session</li></ul><h2 id="二面-2"><a href="#二面-2" class="headerlink" title="二面"></a>二面</h2><p>还是被约了二面，拿到其它offer放弃了。</p><h1 id="腾讯"><a href="#腾讯" class="headerlink" title="腾讯"></a>腾讯</h1><p>说说腾讯的情况，因为主Java，不想去c++，所以先投web开发，再换了客户端。</p><h2 id="一面-3"><a href="#一面-3" class="headerlink" title="一面"></a>一面</h2><p>投完第二天早上被微信捞了，晚上面试，然而表示不愿去广东，就聊了一下。<br>前端基本不会，表示想去web后端。</p><h2 id="一面-4"><a href="#一面-4" class="headerlink" title="一面"></a>一面</h2><p>被腾讯云的IOS捞了，表示没基础。</p><p>其实一面的基础面得超级烂，主要是考os相关的了，没太复习。<br>被问了堆和栈的区别，我回答了java版的，和os的不太一样。。。面试官应该没get<br>算法题似乎是反转链表。</p><h2 id="二面-3"><a href="#二面-3" class="headerlink" title="二面"></a>二面</h2><p>就算是压力面也不用这样怼我吧，全程怼项目，后来想想应该怼回去的。<br>我就随口问了一句你们加班吗，被反问你为什么觉得不加班。难道不是传闻有些部门不怎么加班嘛，我问一句还不行吗。</p><p>代码题：写单例</p><p><strong>结果</strong>：当然挂了</p><h1 id="携程"><a href="#携程" class="headerlink" title="携程"></a>携程</h1><p>这家在我心中二线公司也是挺有趣的，估计因为今年国外很多offer被revoke了，很多人回来找实习也投了携程保底，他们竟然自信到把之前说好的不用笔试的同学们拉去笔试，还把一个拿到阿里offer的同学笔试给刷了。</p><h2 id="笔试-3"><a href="#笔试-3" class="headerlink" title="笔试"></a>笔试</h2><p>算法部分：83+75+100，选择部分随便选。<br>不算特别高，但感觉够分数线就交卷了，事实证明还是排在很前面的，基本和提前批的一个时间面试的。</p><h2 id="一面-5"><a href="#一面-5" class="headerlink" title="一面"></a>一面</h2><p>记忆中基础没怎么问，而且问的也很浅。</p><p><strong>代码题一</strong></p><blockquote><p>判断两个二叉树是否相等</p></blockquote><p><strong>代码题二</strong></p><blockquote><p>写个堆的push</p></blockquote><p>基本就没碰过堆，忘记了方法，还好被提醒了一下，就会写了</p><h2 id="二面-4"><a href="#二面-4" class="headerlink" title="二面"></a>二面</h2><p>这个面试官特别迷，各个概念块一个个问下来，包括队列和栈、排序算法、数据库等都挺简单而且非常浅的，最后写了一个工厂模式。</p><h1 id="Amazon"><a href="#Amazon" class="headerlink" title="Amazon"></a>Amazon</h1><p>神奇的亚马逊发邮件投递，一个月后应该是第二批被捞，发我邮件约时间，结果给的时间段过了还没给我面试时间，在过两天又一个面试邮件来，由于拿到offer回复邮件放弃了，然而hr没看到邮件还被面试官打电话了。。不太行。。</p><h1 id="微众银行"><a href="#微众银行" class="headerlink" title="微众银行"></a>微众银行</h1><p>这家算保底的保底了，就做了一个笔试题，30min秒完AK交卷，估计是我选择题太差了没收到面试通知（真的不看一下我编程做了多久吗？？？）<br>不过反正保底的保底不给我面试我也不稀罕</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实习季总算基本告一段落啦，零零碎碎的还有个别面试可能考虑面掉吧，但是已经决定去哪家了。&lt;/p&gt;
&lt;p&gt;和其它人相比之下，我算是非大众类型的一类面试者，开始准备已经很晚，基础可以算是烂得一塌糊度，但是算法比较好（高于普通水平，低于acmer）&lt;/p&gt;
    
    </summary>
    
    
      <category term="Others" scheme="https://yueyue200830.github.io/categories/Others/"/>
    
    
      <category term="Internship" scheme="https://yueyue200830.github.io/tags/Internship/"/>
    
      <category term="Interview" scheme="https://yueyue200830.github.io/tags/Interview/"/>
    
      <category term="面经" scheme="https://yueyue200830.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode——142. Linked List Cycle II</title>
    <link href="https://yueyue200830.github.io/2020/04/08/Leetcode%E2%80%94%E2%80%94142-Linked-List-Cycle-II/"/>
    <id>https://yueyue200830.github.io/2020/04/08/Leetcode%E2%80%94%E2%80%94142-Linked-List-Cycle-II/</id>
    <published>2020-04-08T13:53:50.000Z</published>
    <updated>2020-04-08T14:32:09.221Z</updated>
    
    <content type="html"><![CDATA[<p>刷题时看到这道题，看了解答觉得很数学&amp;有趣，就来写个数学证明题吧hhhh</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><blockquote><p>Given a linked list, return the node where the cycle begins. If there is no cycle, return <code>null</code>.</p></blockquote><p><a href="https://leetcode.com/problems/linked-list-cycle-ii/" target="_blank" rel="noopener">Leetcode链接</a></p><a id="more"></a><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>其实这是<code>Linked List Cycle</code>的升级版，和1一样，首先判断是否成环，采用快慢指针的方法，这里就不多加解释。</p><p>当我们确定是成环时，我们需要去寻找环的头部。</p><h2 id="解法一：map记录"><a href="#解法一：map记录" class="headerlink" title="解法一：map记录"></a>解法一：map记录</h2><p>这是一个最简单的方法就是用map记录环中的点，然后从头开始找第一个在map中的点，这里我也就不放代码了。</p><p>时间复杂度$O(n)$，但空间复杂度有点高。。</p><h2 id="解法二：双指针寻找-数学原理）"><a href="#解法二：双指针寻找-数学原理）" class="headerlink" title="解法二：双指针寻找(数学原理）"></a>解法二：双指针寻找(数学原理）</h2><p>这是我想记录的一个方法，个人认为没见过解答一般没法想出来，倒是可能猜到？</p><p><strong>做法</strong>：假设前面快慢指针分别为a和b，现在a和b应指向同一个节点，只需选择其中一个（如a）与一个新的指向头部head的节点的指针c一起往前走，它们第一次指向的同一个节点就是环的第一个节点。</p><p>简单来说写个伪代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a is a previous pointer</span></span><br><span class="line">c = head;</span><br><span class="line"><span class="keyword">while</span> (a != c) &#123;</span><br><span class="line">  a = a-&gt;next;</span><br><span class="line">  c = c-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是不是很神奇？完全想不到啊</p><p>时间复杂度$O(n)$，空间复杂度$O(1)$。</p><h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><p>首先，定义这里的长度为需要走的步数。</p><p>假设从head到环的头部的长度为$S_{head}$，环的长度为$S_{circle}$。<br>在前面的算法，慢指针a走了$S_a$，快指针b走了$S_b$。<br>则我们有<br>$$S_b = 2 * S_a$$</p><p>又因为现在a和b在同一个点，因此b比a多走$k$圈，即<br>$$S_b - S_a = k * S_{circle}$$<br>$$S_a = k * S_{circle}$$</p><p>那么若a又走了$S_1$的长度的话（即从头走到环头部的长度）<br>$$S_a’ = S_{head} + S_a$$<br>$$S_a’ = S_{head} + k * S_{circle}$$</p><p>这就正好是走了一个头部到环的距离+$k$圈环，也就是a正好在环的头部。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    ListNode *a = head;</span><br><span class="line">    ListNode *b = head;</span><br><span class="line">    <span class="keyword">while</span> (a != <span class="literal">NULL</span> &amp;&amp; b != <span class="literal">NULL</span> &amp;&amp; b-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        a = a-&gt;next;</span><br><span class="line">        b = b-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (a == b) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="literal">NULL</span> || b-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    b = head;</span><br><span class="line">    <span class="keyword">while</span> (a != b) &#123;</span><br><span class="line">        a = a-&gt;next;</span><br><span class="line">        b = b-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刷题时看到这道题，看了解答觉得很数学&amp;amp;有趣，就来写个数学证明题吧hhhh&lt;/p&gt;
&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Given a linked list, return the node where the cycle begins. If there is no cycle, return &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/linked-list-cycle-ii/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Leetcode链接&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://yueyue200830.github.io/categories/Algorithm/"/>
    
    
      <category term="C++" scheme="https://yueyue200830.github.io/tags/C/"/>
    
      <category term="Leetcode" scheme="https://yueyue200830.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Python实现Canny算子边缘检测</title>
    <link href="https://yueyue200830.github.io/2020/04/04/Python%E5%AE%9E%E7%8E%B0Canny%E7%AE%97%E5%AD%90%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B/"/>
    <id>https://yueyue200830.github.io/2020/04/04/Python%E5%AE%9E%E7%8E%B0Canny%E7%AE%97%E5%AD%90%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B/</id>
    <published>2020-04-04T13:11:59.000Z</published>
    <updated>2020-05-16T14:03:44.011Z</updated>
    
    <content type="html"><![CDATA[<p>Canny边缘检测算子是John F.Canny于1986年开发出来的一个多级边缘检测算法。Canny的目标是找到一个最优的边缘检测算法。</p><p>这里附上我手写的代码，不保证有bug。这里图像偷懒直接裁剪而没有做padding。以及代码大多没用numpy写，所以运行速度较慢（实际就是不会）</p><a id="more"></a><p>其三个主要评价标准：</p><ol><li>低错误率: 标识出尽可能多的实际边缘，同时尽可能的减少噪声产生的误报。</li><li>高定位性: 标识出的边缘要与图像中的实际边缘尽可能接近。</li><li>最小响应: 图像中的边缘只能标识一次，并且可能存在的图像噪声不应标识为边缘。</li></ol><p>Canny算子求边缘点具体算法步骤如下：</p><h1 id="1-用高斯滤波器平滑图像"><a href="#1-用高斯滤波器平滑图像" class="headerlink" title="1. 用高斯滤波器平滑图像"></a>1. 用高斯滤波器平滑图像</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>高斯滤波器（kernel）是将高斯函数离散化，将滤波器中对应的横纵坐标索引代入高斯函数，即可得到对应的值。</p><p>(2k+1)x(2k+1) 滤波器的计算公式如下：</p><p>$$ H[i, j] = \frac{1}{2 \pi \sigma ^ 2} e ^ {- \frac{(i-k-1)^2 + (j-k-1)^2}{2 \sigma ^ 2}} $$</p><p>常见的高斯滤波器为size=5，其近似值为：</p><p>$$<br>K = \frac{1}{159}<br>\left[<br> \begin{matrix}<br>   2 &amp; 4 &amp; 5 &amp; 4 &amp; 2 \\<br>   4 &amp; 9 &amp; 12 &amp; 9 &amp; 4 \\<br>   5 &amp; 12 &amp; 15 &amp; 12 &amp; 5 \\<br>   4 &amp; 9 &amp; 12 &amp; 9 &amp; 4 \\<br>   2 &amp; 4 &amp; 5 &amp; 4 &amp; 2<br>  \end{matrix}<br>\right]<br>$$</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>代码首先根据length和σ计算出高斯滤波器，然后对图片进行平滑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">smooth</span><span class="params">(image, sigma = <span class="number">1.4</span>, length = <span class="number">5</span>)</span>:</span></span><br><span class="line">    <span class="comment"># Compute gaussian filter</span></span><br><span class="line">    k = length // <span class="number">2</span></span><br><span class="line">    gaussian = np.zeros([length, length])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(length):</span><br><span class="line">            gaussian[i, j] = np.exp(-((i-k) ** <span class="number">2</span> + (j-k) ** <span class="number">2</span>) / (<span class="number">2</span> * sigma ** <span class="number">2</span>))</span><br><span class="line">    gaussian /= <span class="number">2</span> * np.pi * sigma ** <span class="number">2</span></span><br><span class="line">    <span class="comment"># Batch Normalization</span></span><br><span class="line">    gaussian = gaussian / np.sum(gaussian)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Use Gaussian Filter</span></span><br><span class="line">    W, H = image.shape</span><br><span class="line">    new_image = np.zeros([W - k * <span class="number">2</span>, H - k * <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(W - <span class="number">2</span> * k):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(H - <span class="number">2</span> * k):</span><br><span class="line">            new_image[i, j] = np.sum(image[i:i+length, j:j+length] * gaussian)</span><br><span class="line"></span><br><span class="line">    new_image = np.uint8(new_image)</span><br></pre></td></tr></table></figure><h1 id="2-计算梯度幅值和方向"><a href="#2-计算梯度幅值和方向" class="headerlink" title="2. 计算梯度幅值和方向"></a>2. 计算梯度幅值和方向</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p>常见方法采用Sobel滤波器在计算梯度和方向。</p><p>采用以下卷积阵列计算x和y的差分：</p><p>$$<br>G_x =<br>\left[<br> \begin{matrix}<br>   -1 &amp; 0 &amp; +1  \\<br>   -2 &amp; 0 &amp; +2  \\<br>   -1 &amp; 0 &amp; +1  \\<br>  \end{matrix}<br>\right]<br>$$</p><p>$$<br>G_y =<br>\left[<br> \begin{matrix}<br>   -1 &amp; -2 &amp; -1  \\<br>    0 &amp;  0 &amp;  0  \\<br>   +1 &amp; +2 &amp; +1  \\<br>  \end{matrix}<br>\right]<br>$$</p><p>采用下列公式计算梯度幅值和方向：</p><p>$$<br>G = \sqrt{(G_x^2 + G_y^2)}<br>$$</p><p>$$<br>\theta = \arctan{\frac{G_y}{G_x}}<br>$$</p><p>梯度角度θ范围从弧度-π到π，然后把它近似到四个方向，分别代表水平，垂直和两个对角线方向（0°,45°,90°,135°）。可以以 $±\frac{iπ}{8}$（i=1,3,5,7）分割，落在每个区域的梯度角给一个特定值，代表四个方向之一。</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gradient_and_direction</span><span class="params">(image)</span>:</span></span><br><span class="line">    Gx = np.array([[<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">-2</span>, <span class="number">0</span>, <span class="number">2</span>], [<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>]])</span><br><span class="line">    Gy = np.array([[<span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-1</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line">    W, H = image.shape</span><br><span class="line">    gradients = np.zeros([W - <span class="number">2</span>, H - <span class="number">2</span>])</span><br><span class="line">    direction = np.zeros([W - <span class="number">2</span>, H - <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(W - <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(H - <span class="number">2</span>):</span><br><span class="line">            dx = np.sum(image[i:i+<span class="number">3</span>, j:j+<span class="number">3</span>] * Gx)</span><br><span class="line">            dy = np.sum(image[i:i+<span class="number">3</span>, j:j+<span class="number">3</span>] * Gy)</span><br><span class="line">            gradients[i, j] = np.sqrt(dx ** <span class="number">2</span> + dy ** <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">if</span> dx == <span class="number">0</span>:</span><br><span class="line">                direction[i, j] = np.pi / <span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                direction[i, j] = np.arctan(dy / dx)</span><br><span class="line"></span><br><span class="line">    gradients = np.uint8(gradients)</span><br></pre></td></tr></table></figure><h1 id="3-对梯度幅值进行非极大值抑制"><a href="#3-对梯度幅值进行非极大值抑制" class="headerlink" title="3. 对梯度幅值进行非极大值抑制"></a>3. 对梯度幅值进行非极大值抑制</h1><h2 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h2><p>非极大值抑制是进行边缘检测的一个重要步骤，通俗意义上是指寻找像素点局部最大值。沿着梯度方向，比较它前面和后面的梯度值，如果它不是局部最大值，则去除。</p><p>这里借用知乎@戴馨乐的图片，由于图片是之前记录下的，原文地址没有保存</p><img src="/2020/04/04/Python%E5%AE%9E%E7%8E%B0Canny%E7%AE%97%E5%AD%90%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B/1.jpg" class="" title="非极大值抑制"><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">NMS</span><span class="params">(gradients, direction)</span>:</span></span><br><span class="line">    W, H = gradients.shape</span><br><span class="line">    nms = np.copy(gradients[<span class="number">1</span>:<span class="number">-1</span>, <span class="number">1</span>:<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, W - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, H - <span class="number">1</span>):</span><br><span class="line">            theta = direction[i, j]</span><br><span class="line">            weight = np.tan(theta)</span><br><span class="line">            <span class="keyword">if</span> theta &gt; np.pi / <span class="number">4</span>:</span><br><span class="line">                d1 = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">                d2 = [<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">                weight = <span class="number">1</span> / weight</span><br><span class="line">            <span class="keyword">elif</span> theta &gt;= <span class="number">0</span>:</span><br><span class="line">                d1 = [<span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">                d2 = [<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">elif</span> theta &gt;= - np.pi / <span class="number">4</span>:</span><br><span class="line">                d1 = [<span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">                d2 = [<span class="number">1</span>, <span class="number">-1</span>]</span><br><span class="line">                weight *= <span class="number">-1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                d1 = [<span class="number">0</span>, <span class="number">-1</span>]</span><br><span class="line">                d2 = [<span class="number">1</span>, <span class="number">-1</span>]</span><br><span class="line">                weight = <span class="number">-1</span> / weight</span><br><span class="line"></span><br><span class="line">            g1 = gradients[i + d1[<span class="number">0</span>], j + d1[<span class="number">1</span>]]</span><br><span class="line">            g2 = gradients[i + d2[<span class="number">0</span>], j + d2[<span class="number">1</span>]]</span><br><span class="line">            g3 = gradients[i - d1[<span class="number">0</span>], j - d1[<span class="number">1</span>]]</span><br><span class="line">            g4 = gradients[i - d2[<span class="number">0</span>], j - d2[<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">            grade_count1 = g1 * weight + g2 * (<span class="number">1</span> - weight)</span><br><span class="line">            grade_count2 = g3 * weight + g4 * (<span class="number">1</span> - weight)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> grade_count1 &gt; gradients[i, j] <span class="keyword">or</span> grade_count2 &gt; gradients[i, j]:</span><br><span class="line">                nms[i - <span class="number">1</span>, j - <span class="number">1</span>] = <span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="4-用双阈值算法检测"><a href="#4-用双阈值算法检测" class="headerlink" title="4. 用双阈值算法检测"></a>4. 用双阈值算法检测</h1><h2 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h2><p>设置两个阈值，minVal和maxVal。梯度大于maxVal的任何边缘是真边缘，而minVal以下的边缘是非边缘。位于这两个阈值之间的边缘会基于其连通性而分类为边缘或非边缘，如果它们连接到“可靠边缘”像素，则它们被视为边缘的一部分；否则，不是边缘。</p><p>这里采用dfs搜索的方法，对于所有真边缘开始dfs搜索，直至搜索完成。</p><h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double_threshold</span><span class="params">(nms, threshold1, threshold2)</span>:</span></span><br><span class="line">    visited = np.zeros_like(nms)</span><br><span class="line">    output_image = nms.copy()</span><br><span class="line">    W, H = output_image.shape</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(i, j)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> i &gt;= W <span class="keyword">or</span> i &lt; <span class="number">0</span> <span class="keyword">or</span> j &gt;= H <span class="keyword">or</span> j &lt; <span class="number">0</span> <span class="keyword">or</span> visited[i, j] == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        visited[i, j] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> output_image[i, j] &gt; threshold1:</span><br><span class="line">            output_image[i, j] = <span class="number">255</span></span><br><span class="line">            dfs(i<span class="number">-1</span>, j<span class="number">-1</span>)</span><br><span class="line">            dfs(i<span class="number">-1</span>, j)</span><br><span class="line">            dfs(i<span class="number">-1</span>, j+<span class="number">1</span>)</span><br><span class="line">            dfs(i, j<span class="number">-1</span>)</span><br><span class="line">            dfs(i, j+<span class="number">1</span>)</span><br><span class="line">            dfs(i+<span class="number">1</span>, j<span class="number">-1</span>)</span><br><span class="line">            dfs(i+<span class="number">1</span>, j)</span><br><span class="line">            dfs(i+<span class="number">1</span>, j+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            output_image[i, j] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> range(W):</span><br><span class="line">        <span class="keyword">for</span> h <span class="keyword">in</span> range(H):</span><br><span class="line">            <span class="keyword">if</span> visited[w, h] == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> output_image[w, h] &gt;= threshold2:</span><br><span class="line">                dfs(w, h)</span><br><span class="line">            <span class="keyword">elif</span> output_image[w, h] &lt;= threshold1:</span><br><span class="line">                output_image[w, h] = <span class="number">0</span></span><br><span class="line">                visited[w, h] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> range(W):</span><br><span class="line">        <span class="keyword">for</span> h <span class="keyword">in</span> range(H):</span><br><span class="line">            <span class="keyword">if</span> visited[w, h] == <span class="number">0</span>:</span><br><span class="line">                output_image[w, h] = <span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="OpenCV自带函数"><a href="#OpenCV自带函数" class="headerlink" title="OpenCV自带函数"></a>OpenCV自带函数</h1><p>OpenCV有自带函数可以进行高斯平滑和canny算子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">image = cv2.GaussianBlur(image, (<span class="number">5</span>,<span class="number">5</span>), <span class="number">0</span>)</span><br><span class="line">canny = cv2.Canny(image, <span class="number">50</span>, <span class="number">160</span>)</span><br></pre></td></tr></table></figure><h1 id="全部手写代码"><a href="#全部手写代码" class="headerlink" title="全部手写代码"></a>全部手写代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">smooth</span><span class="params">(image, sigma = <span class="number">1.4</span>, length = <span class="number">5</span>)</span>:</span></span><br><span class="line">    <span class="string">""" Smooth the image</span></span><br><span class="line"><span class="string">    Compute a gaussian filter with sigma = sigma and kernal_length = length.</span></span><br><span class="line"><span class="string">    Each element in the kernal can be computed as below:</span></span><br><span class="line"><span class="string">        G[i, j] = (1/(2*pi*sigma**2))*exp(-((i-k-1)**2 + (j-k-1)**2)/2*sigma**2)</span></span><br><span class="line"><span class="string">    Then, use the gaussian filter to smooth the input image.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        image: array of grey image</span></span><br><span class="line"><span class="string">        sigma: the sigma of gaussian filter, default to be 1.4</span></span><br><span class="line"><span class="string">        length: the kernal length, default to be 5</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        the smoothed image</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># Compute gaussian filter</span></span><br><span class="line">    k = length // <span class="number">2</span></span><br><span class="line">    gaussian = np.zeros([length, length])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(length):</span><br><span class="line">            gaussian[i, j] = np.exp(-((i-k) ** <span class="number">2</span> + (j-k) ** <span class="number">2</span>) / (<span class="number">2</span> * sigma ** <span class="number">2</span>))</span><br><span class="line">    gaussian /= <span class="number">2</span> * np.pi * sigma ** <span class="number">2</span></span><br><span class="line">    <span class="comment"># Batch Normalization</span></span><br><span class="line">    gaussian = gaussian / np.sum(gaussian)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Use Gaussian Filter</span></span><br><span class="line">    W, H = image.shape</span><br><span class="line">    new_image = np.zeros([W - k * <span class="number">2</span>, H - k * <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(W - <span class="number">2</span> * k):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(H - <span class="number">2</span> * k):</span><br><span class="line">            new_image[i, j] = np.sum(image[i:i+length, j:j+length] * gaussian)</span><br><span class="line"></span><br><span class="line">    new_image = np.uint8(new_image)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> new_image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_gradient_and_direction</span><span class="params">(image)</span>:</span></span><br><span class="line">    <span class="string">""" Compute gradients and its direction</span></span><br><span class="line"><span class="string">    Use Sobel filter to compute gradients and direction.</span></span><br><span class="line"><span class="string">         -1 0 1        -1 -2 -1</span></span><br><span class="line"><span class="string">    Gx = -2 0 2   Gy =  0  0  0</span></span><br><span class="line"><span class="string">         -1 0 1         1  2  1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        image: array of grey image</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        gradients: the gradients of each pixel</span></span><br><span class="line"><span class="string">        direction: the direction of the gradients of each pixel</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    Gx = np.array([[<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>], [<span class="number">-2</span>, <span class="number">0</span>, <span class="number">2</span>], [<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>]])</span><br><span class="line">    Gy = np.array([[<span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-1</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line">    W, H = image.shape</span><br><span class="line">    gradients = np.zeros([W - <span class="number">2</span>, H - <span class="number">2</span>])</span><br><span class="line">    direction = np.zeros([W - <span class="number">2</span>, H - <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(W - <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(H - <span class="number">2</span>):</span><br><span class="line">            dx = np.sum(image[i:i+<span class="number">3</span>, j:j+<span class="number">3</span>] * Gx)</span><br><span class="line">            dy = np.sum(image[i:i+<span class="number">3</span>, j:j+<span class="number">3</span>] * Gy)</span><br><span class="line">            gradients[i, j] = np.sqrt(dx ** <span class="number">2</span> + dy ** <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">if</span> dx == <span class="number">0</span>:</span><br><span class="line">                direction[i, j] = np.pi / <span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                direction[i, j] = np.arctan(dy / dx)</span><br><span class="line"></span><br><span class="line">    gradients = np.uint8(gradients)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> gradients, direction</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">NMS</span><span class="params">(gradients, direction)</span>:</span></span><br><span class="line">    <span class="string">""" Non-maxima suppression</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        gradients: the gradients of each pixel</span></span><br><span class="line"><span class="string">        direction: the direction of the gradients of each pixel</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        the output image</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    W, H = gradients.shape</span><br><span class="line">    nms = np.copy(gradients[<span class="number">1</span>:<span class="number">-1</span>, <span class="number">1</span>:<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, W - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, H - <span class="number">1</span>):</span><br><span class="line">            theta = direction[i, j]</span><br><span class="line">            weight = np.tan(theta)</span><br><span class="line">            <span class="keyword">if</span> theta &gt; np.pi / <span class="number">4</span>:</span><br><span class="line">                d1 = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">                d2 = [<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">                weight = <span class="number">1</span> / weight</span><br><span class="line">            <span class="keyword">elif</span> theta &gt;= <span class="number">0</span>:</span><br><span class="line">                d1 = [<span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">                d2 = [<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">elif</span> theta &gt;= - np.pi / <span class="number">4</span>:</span><br><span class="line">                d1 = [<span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">                d2 = [<span class="number">1</span>, <span class="number">-1</span>]</span><br><span class="line">                weight *= <span class="number">-1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                d1 = [<span class="number">0</span>, <span class="number">-1</span>]</span><br><span class="line">                d2 = [<span class="number">1</span>, <span class="number">-1</span>]</span><br><span class="line">                weight = <span class="number">-1</span> / weight</span><br><span class="line"></span><br><span class="line">            g1 = gradients[i + d1[<span class="number">0</span>], j + d1[<span class="number">1</span>]]</span><br><span class="line">            g2 = gradients[i + d2[<span class="number">0</span>], j + d2[<span class="number">1</span>]]</span><br><span class="line">            g3 = gradients[i - d1[<span class="number">0</span>], j - d1[<span class="number">1</span>]]</span><br><span class="line">            g4 = gradients[i - d2[<span class="number">0</span>], j - d2[<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">            grade_count1 = g1 * weight + g2 * (<span class="number">1</span> - weight)</span><br><span class="line">            grade_count2 = g3 * weight + g4 * (<span class="number">1</span> - weight)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> grade_count1 &gt; gradients[i, j] <span class="keyword">or</span> grade_count2 &gt; gradients[i, j]:</span><br><span class="line">                nms[i - <span class="number">1</span>, j - <span class="number">1</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">double_threshold</span><span class="params">(nms, threshold1, threshold2)</span>:</span></span><br><span class="line">    <span class="string">""" Double Threshold</span></span><br><span class="line"><span class="string">    Use two thresholds to compute the edge.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        nms: the input image</span></span><br><span class="line"><span class="string">        threshold1: the low threshold</span></span><br><span class="line"><span class="string">        threshold2: the high threshold</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        The binary image.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    visited = np.zeros_like(nms)</span><br><span class="line">    output_image = nms.copy()</span><br><span class="line">    W, H = output_image.shape</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(i, j)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> i &gt;= W <span class="keyword">or</span> i &lt; <span class="number">0</span> <span class="keyword">or</span> j &gt;= H <span class="keyword">or</span> j &lt; <span class="number">0</span> <span class="keyword">or</span> visited[i, j] == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        visited[i, j] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> output_image[i, j] &gt; threshold1:</span><br><span class="line">            output_image[i, j] = <span class="number">255</span></span><br><span class="line">            dfs(i<span class="number">-1</span>, j<span class="number">-1</span>)</span><br><span class="line">            dfs(i<span class="number">-1</span>, j)</span><br><span class="line">            dfs(i<span class="number">-1</span>, j+<span class="number">1</span>)</span><br><span class="line">            dfs(i, j<span class="number">-1</span>)</span><br><span class="line">            dfs(i, j+<span class="number">1</span>)</span><br><span class="line">            dfs(i+<span class="number">1</span>, j<span class="number">-1</span>)</span><br><span class="line">            dfs(i+<span class="number">1</span>, j)</span><br><span class="line">            dfs(i+<span class="number">1</span>, j+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            output_image[i, j] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> range(W):</span><br><span class="line">        <span class="keyword">for</span> h <span class="keyword">in</span> range(H):</span><br><span class="line">            <span class="keyword">if</span> visited[w, h] == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> output_image[w, h] &gt;= threshold2:</span><br><span class="line">                dfs(w, h)</span><br><span class="line">            <span class="keyword">elif</span> output_image[w, h] &lt;= threshold1:</span><br><span class="line">                output_image[w, h] = <span class="number">0</span></span><br><span class="line">                visited[w, h] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> range(W):</span><br><span class="line">        <span class="keyword">for</span> h <span class="keyword">in</span> range(H):</span><br><span class="line">            <span class="keyword">if</span> visited[w, h] == <span class="number">0</span>:</span><br><span class="line">                output_image[w, h] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> output_image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment"># code to read image</span></span><br><span class="line">    smoothed_image = smooth(image)</span><br><span class="line">    gradients, direction = get_gradient_and_direction(smoothed_image)</span><br><span class="line">    nms = NMS(gradients, direction)</span><br><span class="line">    output_image = double_threshold(nms, <span class="number">40</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><img src="/2020/04/04/Python%E5%AE%9E%E7%8E%B0Canny%E7%AE%97%E5%AD%90%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B/2.png" class="" title="输出">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Canny边缘检测算子是John F.Canny于1986年开发出来的一个多级边缘检测算法。Canny的目标是找到一个最优的边缘检测算法。&lt;/p&gt;
&lt;p&gt;这里附上我手写的代码，不保证有bug。这里图像偷懒直接裁剪而没有做padding。以及代码大多没用numpy写，所以运行速度较慢（实际就是不会）&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://yueyue200830.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://yueyue200830.github.io/tags/Python/"/>
    
      <category term="OpenCV" scheme="https://yueyue200830.github.io/tags/OpenCV/"/>
    
      <category term="Computer Vision" scheme="https://yueyue200830.github.io/tags/Computer-Vision/"/>
    
  </entry>
  
  <entry>
    <title>Windows修改右键新建菜单</title>
    <link href="https://yueyue200830.github.io/2020/03/15/Windows%E4%BF%AE%E6%94%B9%E5%8F%B3%E9%94%AE%E6%96%B0%E5%BB%BA%E8%8F%9C%E5%8D%95/"/>
    <id>https://yueyue200830.github.io/2020/03/15/Windows%E4%BF%AE%E6%94%B9%E5%8F%B3%E9%94%AE%E6%96%B0%E5%BB%BA%E8%8F%9C%E5%8D%95/</id>
    <published>2020-03-15T07:53:36.000Z</published>
    <updated>2020-04-07T09:32:44.666Z</updated>
    
    <content type="html"><![CDATA[<p>由于课程需求被强制安装了国际知名建模软件EA然而本人真的一点都不喜欢，并且被此软件搞得太不爽了，课程结束删除软件发现竟然没有把右键新建里一起删除，太令人崩溃了吧。。。</p><p>在网上搜索解决方案不知道为何失败后，决定试一下自己修改，没想到成功了！！</p><p>方法依旧是修改<code>注册表</code>，只是修改不同的部分。</p><a id="more"></a><h1 id="打开注册表"><a href="#打开注册表" class="headerlink" title="打开注册表"></a>打开注册表</h1><p>Windows 10下直接搜索<code>注册表</code>可以跳出来<code>注册表编辑器</code>直接打开即可（搜索多优秀呀，何必学习网上教程注册表编辑器的英文打开方式呢）</p><img src="/2020/03/15/Windows%E4%BF%AE%E6%94%B9%E5%8F%B3%E9%94%AE%E6%96%B0%E5%BB%BA%E8%8F%9C%E5%8D%95/1.png" class="" width="700" title="搜索注册表"><h1 id="新建文件的存储位置（常规方法）"><a href="#新建文件的存储位置（常规方法）" class="headerlink" title="新建文件的存储位置（常规方法）"></a>新建文件的存储位置（常规方法）</h1><p>右键新建文件的位置是在：<code>计算机\HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Discardable\PostSetup\ShellNew</code><br>双击打开后有一个<code>Classes</code>，可以看到数据那栏是一堆文件的后缀名</p><img src="/2020/03/15/Windows%E4%BF%AE%E6%94%B9%E5%8F%B3%E9%94%AE%E6%96%B0%E5%BB%BA%E8%8F%9C%E5%8D%95/2.png" class="" width="700" title="“新建”位置"><p>双击<code>Classes</code>，可以对数据进行编辑，添加或删除不要的后缀名</p><img src="/2020/03/15/Windows%E4%BF%AE%E6%94%B9%E5%8F%B3%E9%94%AE%E6%96%B0%E5%BB%BA%E8%8F%9C%E5%8D%95/3.png" class="" width="700" title="修改新建数据"><p><strong>然而</strong>，我并没有成功修改。。。每次删除后又被加回来了。。。<br>一开始以为中病毒了呢。。。<br>而事实上是因为只删除了部分导致注册表错误。。。</p><h1 id="删除文件后缀关联"><a href="#删除文件后缀关联" class="headerlink" title="删除文件后缀关联"></a>删除文件后缀关联</h1><p>打开<code>计算机\HKEY_CURRENT_USER</code>，可以看到里面有各式各样的后缀（以<code>.</code>开头的）</p><img src="/2020/03/15/Windows%E4%BF%AE%E6%94%B9%E5%8F%B3%E9%94%AE%E6%96%B0%E5%BB%BA%E8%8F%9C%E5%8D%95/4.png" class="" title="后缀"><p>那既然上个方法删不掉我们想要的，不如看看这个后缀文件的注册表里有些什么东西。</p><p>找到需要删除的文件后缀对应的文件夹，比如我要删除<code>.eap</code></p><img src="/2020/03/15/Windows%E4%BF%AE%E6%94%B9%E5%8F%B3%E9%94%AE%E6%96%B0%E5%BB%BA%E8%8F%9C%E5%8D%95/5.png" class="" width="700" title="后缀文件夹"><p>我们可以看到怎么里面有一个<code>ShellNew</code>？？？这不是和前面那个新建文件的名字一样吗？？？<br>再打开其它的后缀文件夹看一下，果然没有<code>ShellNew</code><br>那大概可以猜到是<code>ShellNew</code>的锅，这边定义了有新增但我们上面那个方法只是删除了一个地方，导致出错了。</p><p>因此<strong>解决方法</strong>就是把<code>ShellNew</code>删除掉，由于我本来把软件也卸载了，就直接整个后缀的文件夹全删光了（个人猜测是那个公司写的垃圾）<br>删除后关闭就可以发现新建菜单里没有啦！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于课程需求被强制安装了国际知名建模软件EA然而本人真的一点都不喜欢，并且被此软件搞得太不爽了，课程结束删除软件发现竟然没有把右键新建里一起删除，太令人崩溃了吧。。。&lt;/p&gt;
&lt;p&gt;在网上搜索解决方案不知道为何失败后，决定试一下自己修改，没想到成功了！！&lt;/p&gt;
&lt;p&gt;方法依旧是修改&lt;code&gt;注册表&lt;/code&gt;，只是修改不同的部分。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Others" scheme="https://yueyue200830.github.io/categories/Others/"/>
    
    
      <category term="Windows" scheme="https://yueyue200830.github.io/tags/Windows/"/>
    
      <category term="注册表" scheme="https://yueyue200830.github.io/tags/%E6%B3%A8%E5%86%8C%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>Python读取图片并保存的几种方式</title>
    <link href="https://yueyue200830.github.io/2020/03/11/Python%E8%AF%BB%E5%8F%96%E5%9B%BE%E7%89%87%E5%B9%B6%E4%BF%9D%E5%AD%98%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>https://yueyue200830.github.io/2020/03/11/Python%E8%AF%BB%E5%8F%96%E5%9B%BE%E7%89%87%E5%B9%B6%E4%BF%9D%E5%AD%98%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2020-03-11T13:24:46.000Z</published>
    <updated>2020-04-07T10:11:51.819Z</updated>
    
    <content type="html"><![CDATA[<p>本文为课程作业复制版，如有相似请助教注意并非抄袭。</p><p>这里尝试过<code>png</code>和<code>jpg</code>，为方便保存路径在函数内自动转换，因此需要路径后缀恰为三位。</p><a id="more"></a><h1 id="方法一：Pillow"><a href="#方法一：Pillow" class="headerlink" title="方法一：Pillow"></a>方法一：Pillow</h1><p>这里采用<code>pillow</code>读取图片，它默认显示图片采用系统的默认图片显示器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_image_1</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="string">""" Pillow</span></span><br><span class="line"><span class="string">    This will show picture with default image showing program.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        path: path of the image.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    image = Image.open(path)</span><br><span class="line">    image.show()</span><br><span class="line">    new_path = path[:<span class="number">-4</span>] + <span class="string">'-fc1.jpg'</span></span><br><span class="line">    image.save(new_path)</span><br></pre></td></tr></table></figure><h1 id="方法二：Matplot"><a href="#方法二：Matplot" class="headerlink" title="方法二：Matplot"></a>方法二：Matplot</h1><p>这里用<code>matplot</code>的<code>pyplot</code>去读取和显示图片，注意保存图片需要在显示之前执行，否则无法保存。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_image_2</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="string">""" matplot</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        path: path of the image.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    image = mpimg.imread(path)</span><br><span class="line">    plt.imshow(image)</span><br><span class="line">    plt.axis(<span class="string">'off'</span>)</span><br><span class="line">    new_path = path[:<span class="number">-4</span>] + <span class="string">'-fc2.jpg'</span></span><br><span class="line">    mpimg.imsave(new_path, image)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><h1 id="方法三：OpenCV"><a href="#方法三：OpenCV" class="headerlink" title="方法三：OpenCV"></a>方法三：OpenCV</h1><p>这里显示图片需要条用<code>cv2.waitKey()</code>，否则图片会显示后立刻消失。</p><p><strong>注意</strong>：OpenCV读取的图片的排列方式为bgr而非常见的rgb</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_image_3</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="string">""" OpenCV</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        path: path of the image.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    image = cv2.imread(path)</span><br><span class="line">    cv2.imshow(path, image)</span><br><span class="line">    cv2.waitKey()</span><br><span class="line">    new_path = path[:<span class="number">-4</span>] + <span class="string">'-fc3.jpg'</span></span><br><span class="line">    cv2.imwrite(new_path, image)</span><br></pre></td></tr></table></figure><h1 id="方法四：Imageio"><a href="#方法四：Imageio" class="headerlink" title="方法四：Imageio"></a>方法四：Imageio</h1><p>这里<code>imageio</code>只是用于读取和保存，用<code>matplot</code>显示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_image_4</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="string">""" imageio</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        path: path of the image.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    image = imageio.imread(path)</span><br><span class="line">    plt.imshow(image)</span><br><span class="line">    plt.show()</span><br><span class="line">    new_path = path[:<span class="number">-4</span>] + <span class="string">'-fc4.jpg'</span></span><br><span class="line">    imageio.imsave(new_path, image)</span><br></pre></td></tr></table></figure><h1 id="方法五：skimage"><a href="#方法五：skimage" class="headerlink" title="方法五：skimage"></a>方法五：skimage</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_image_5</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="string">""" skimage</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        path: path of the image.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    image = io.imread(path)</span><br><span class="line">    io.imshow(image)</span><br><span class="line">    new_path = path[:<span class="number">-4</span>] + <span class="string">'-fc5.jpg'</span></span><br><span class="line">    io.imsave(new_path, image)</span><br><span class="line">    io.show()</span><br></pre></td></tr></table></figure><h1 id="相关加载库"><a href="#相关加载库" class="headerlink" title="相关加载库"></a>相关加载库</h1><p>以防万一不知道import什么，这里列一下需要import的库。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> skimage <span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib.image <span class="keyword">as</span> mpimg</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> imageio</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文为课程作业复制版，如有相似请助教注意并非抄袭。&lt;/p&gt;
&lt;p&gt;这里尝试过&lt;code&gt;png&lt;/code&gt;和&lt;code&gt;jpg&lt;/code&gt;，为方便保存路径在函数内自动转换，因此需要路径后缀恰为三位。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://yueyue200830.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://yueyue200830.github.io/tags/Python/"/>
    
      <category term="OpenCV" scheme="https://yueyue200830.github.io/tags/OpenCV/"/>
    
      <category term="Computer Vision" scheme="https://yueyue200830.github.io/tags/Computer-Vision/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu安装MySQL8.0</title>
    <link href="https://yueyue200830.github.io/2020/03/09/Ubuntu%E5%AE%89%E8%A3%85MySQL8-0/"/>
    <id>https://yueyue200830.github.io/2020/03/09/Ubuntu%E5%AE%89%E8%A3%85MySQL8-0/</id>
    <published>2020-03-09T12:57:15.000Z</published>
    <updated>2020-04-07T09:33:14.058Z</updated>
    
    <content type="html"><![CDATA[<p>本文为课程作业复制版，如有相似请助教注意并非抄袭。</p><p>安装环境为<code>Ubuntu 18.04.4 LTS</code>。<br>由于在<code>apt</code>下默认的版本是<code>mysql5.7</code>，需要先配置仓库，再进行安装。</p><a id="more"></a><h1 id="添加MySQL8-0仓库"><a href="#添加MySQL8-0仓库" class="headerlink" title="添加MySQL8.0仓库"></a>添加MySQL8.0仓库</h1><p>首先在<a href="https://dev.mysql.com/downloads/file/?id=494003" target="_blank" rel="noopener">https://dev.mysql.com/downloads/file/?id=494003</a>下载<code>apt repository</code></p><img src="/2020/03/09/Ubuntu%E5%AE%89%E8%A3%85MySQL8-0/3.png" class="" width="800"><p>然后配置仓库，输入：（其中PATH和deb的名称应根据自己的需求更改，可参照下面截图的头部）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i /PATH/version-specific-package-name.deb</span><br></pre></td></tr></table></figure><p>然后会跳出来仓库配置界面，直接选择ok</p><img src="/2020/03/09/Ubuntu%E5%AE%89%E8%A3%85MySQL8-0/5.png" class="" width="700"><p>接着更新仓库，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>可以看到在更新的仓库中已有<code>MySQL</code></p><img src="/2020/03/09/Ubuntu%E5%AE%89%E8%A3%85MySQL8-0/7.jpg" class="" width="700"><h1 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h1><p>在命令行输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure><h2 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h2><p>在输入安装命令并下载完成后，即进入配置模式。<br>在弹出的框内输入root用户的密码或先设为空，然后再次确认密码</p><img src="/2020/03/09/Ubuntu%E5%AE%89%E8%A3%85MySQL8-0/9.png" class="" width="700"><p>在选择验证方式时，选择第一个推荐的（网上有说这个对Ubuntu18.04不支持，但是经实验应该已修复此问题）</p><img src="/2020/03/09/Ubuntu%E5%AE%89%E8%A3%85MySQL8-0/10.png" class="" width="700"><h1 id="登录MySQL"><a href="#登录MySQL" class="headerlink" title="登录MySQL"></a>登录MySQL</h1><p>采用之前配置的密码进入mysql：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>可以看到版本号和其它一些信息，证明安装正确</p><img src="/2020/03/09/Ubuntu%E5%AE%89%E8%A3%85MySQL8-0/12.png" class="" width="700"><h1 id="查看MySQL启动信息"><a href="#查看MySQL启动信息" class="headerlink" title="查看MySQL启动信息"></a>查看MySQL启动信息</h1><p>输入命令查看MySQL的状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql status</span><br></pre></td></tr></table></figure><p>可以看到之前安装完成并且首次启动MySQL时已开启MySQL</p><img src="/2020/03/09/Ubuntu%E5%AE%89%E8%A3%85MySQL8-0/13.png" class="" width="800"><p>尝试停止MySQL服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql stop</span><br></pre></td></tr></table></figure><h1 id="设置默认mysql命令参数"><a href="#设置默认mysql命令参数" class="headerlink" title="设置默认mysql命令参数"></a>设置默认mysql命令参数</h1><p>在当前用户的用户目录下新建<code>.my.cnf</code>，可配置如用户名/密码等，来简便mysql的操作</p><img src="/2020/03/09/Ubuntu%E5%AE%89%E8%A3%85MySQL8-0/17.png" class=""><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">host&#x3D;localhost</span><br><span class="line">user&#x3D;root</span><br><span class="line">password&#x3D;&lt;password&gt;</span><br></pre></td></tr></table></figure><p>这样只需输入<code>mysql</code>即可以root用户进入数据库</p><img src="/2020/03/09/Ubuntu%E5%AE%89%E8%A3%85MySQL8-0/16.png" class="" width="700">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文为课程作业复制版，如有相似请助教注意并非抄袭。&lt;/p&gt;
&lt;p&gt;安装环境为&lt;code&gt;Ubuntu 18.04.4 LTS&lt;/code&gt;。&lt;br&gt;由于在&lt;code&gt;apt&lt;/code&gt;下默认的版本是&lt;code&gt;mysql5.7&lt;/code&gt;，需要先配置仓库，再进行安装。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Database" scheme="https://yueyue200830.github.io/categories/Database/"/>
    
    
      <category term="MySQL" scheme="https://yueyue200830.github.io/tags/MySQL/"/>
    
      <category term="Ubuntu" scheme="https://yueyue200830.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces——1322B.Present</title>
    <link href="https://yueyue200830.github.io/2020/03/08/Codeforces%E2%80%94%E2%80%941322B-Present/"/>
    <id>https://yueyue200830.github.io/2020/03/08/Codeforces%E2%80%94%E2%80%941322B-Present/</id>
    <published>2020-03-07T16:40:12.000Z</published>
    <updated>2020-03-07T17:58:18.204Z</updated>
    
    <content type="html"><![CDATA[<p>下定决心开始打CF的第一个比赛就被虐得好惨，还需要继续努力啊（虽然感觉CF和面试算法题关系不大。。）</p><p>题目网址： <a href="https://codeforces.com/contest/1322/problem/B" target="_blank" rel="noopener">https://codeforces.com/contest/1322/problem/B</a></p><p>好吧，事实上写这篇博文是因为第一次遇到这个解法，对于我这个算法小白来说还是很新颖的。<br>PS.做题的时候天真的以为是O(n)的解法，并且可以用数学做。。。</p><a id="more"></a><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给定$n$个数 $a_1$, $a_2$, … , $a_n$，<br>计算其两两之和的异或值。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>首先输入大小以看就不可以直接求（废话）<br>复杂度也就是压在O(nlogn)左右</p><p><strong>关键点</strong><br>我们可以把答案回到二进制，然后对二进制的每一位分开求。</p><p><strong>原理</strong></p><p>首先我们定义 $x_i = a_k + a_j$， 即 $x_i$ 是两数之和。<br>令 $s$ 是答案，$s_i$ 是指从右往左答案的第 $i$ 个二进制位（从0开始）</p><p>我们现在假设计算 $s_i$，我们已知所有 $x$ 的第 $i$ 位的01情况，那么求 $s_i$ 就是对它们做异或，也就等于计算 $x$ 中第 $i$ 位是1的个数的奇偶情况。<br>即如果1有偶数个，那么答案对应的位数是0，反之则是1。（简单的异或运算原理）</p><h2 id="Subproblem"><a href="#Subproblem" class="headerlink" title="Subproblem"></a>Subproblem</h2><blockquote><p>对于结果$s$，计算第 $i$ 位的值，即 $s_i$。</p><p>（等价问题）计算两数之和$x$的第 $i$ 位是 $1$ 的数量。</p></blockquote><p>对于这个等价问题，我们先思考一个简单的情况：</p><p>假设现在有一个数 $y &lt; 2^{i+1}$，它的第$i$位的是否位$1$取决于它是否在 $[2^{i}, 2^{i+1})$ 内。<br>现在把 $y$ 扩大为正数，我们可以得到其第$i$位的情况与 $y’ = y \% 2^{i+1} $。</p><p>因此，对于每个 $x$，我们可以只考虑 $x \% 2^{i+1} $。</p><p>但我们希望能通过 $a$ 直接计算出个数，而非计算 $x$ 后求出解。<br>既然我们可以对 $x$ 取模，自然也可以对 $a$ 取模，这对加法并不会有影响。</p><p>因此，我们首先将 $a$ 对 $2^{i+1}$ 取模，令取模后的数为 $b$。<br>我们可以得到 $b \in [0, 2^{i+1} )$，<br>即有 $x \in [0, 2^{i+2}-1 )$。</p><p>我们发现 $x$ 的范围缩小了很多，这次我们不对 $x$ 取模，<br>相反，我们可以直接对 $x$ 划出两个范围：$[2^i, 2^{i+1})$ 和 $[2^i + 2^{i+1}, 2^{i+2}-1 )$</p><p>因此，我们希望寻找 $x$ 在这两个范围内的个数</p><h2 id="Subsubproblem"><a href="#Subsubproblem" class="headerlink" title="Subsubproblem"></a>Subsubproblem</h2><blockquote><p>对于结果 $s$ 的第 $i$ 位，现有 $b$ 是对 $a$ 对于 $2^{i+1}$ 取模，求 $b$ 两两之和在 $[2^i, 2^{i+1})$ 和 $[2^i + 2^{i+1}, 2^{i+2}-1 )$ 的个数。</p><p>（简化版）给定数组 $b$，求其两两和在某一区间的个数。</p></blockquote><p>这里为简化，假设求的区间是 $[k, t)$</p><p><em>暂时只有 $O(nlogn)$ 的解法，未知是否有更迅速的</em></p><p>首先将 $b$ 从小到大排序，<br>然后对 $b_i$ ，它可以相加的数为 $b_{i+1}$, …, $b_n$ 。<br>用二分查找寻找下界值为 $k-b_i$ 的下标 $p$，<br>用二分查找寻找上界值为 $t-b_i$ 的下标 $q$。<br>满足的个数就是 $q-p$。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[<span class="number">400005</span>], b[<span class="number">400005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> n, i, j, k, t, m, p, q, s;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    m = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        m = <span class="built_in">max</span>(a[i], m);</span><br><span class="line">    &#125;</span><br><span class="line">    m = log2(m) + <span class="number">2</span>;</span><br><span class="line">    s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        k = <span class="built_in">pow</span>(<span class="number">2</span>, i+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            b[j] = a[j] % k;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(b, b+n);</span><br><span class="line"></span><br><span class="line">        t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="comment">// 2^i, 2^(i+1)</span></span><br><span class="line">            p = lower_bound(b+j+<span class="number">1</span>, b+n, k/<span class="number">2</span> - b[j]) - b;</span><br><span class="line">            q = lower_bound(b+j+<span class="number">1</span>, b+n, k - b[j]) - b;</span><br><span class="line">            t += q - p;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2^i + 2^(i+1), 2^(i+2)-1</span></span><br><span class="line">            p = lower_bound(b+j+<span class="number">1</span>, b+n, k/<span class="number">2</span>*<span class="number">3</span> - b[j]) - b;</span><br><span class="line">            q = lower_bound(b+j+<span class="number">1</span>, b+n, <span class="number">2</span>*k - <span class="number">1</span>) - b;</span><br><span class="line">            t += q - p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (t % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            s += k / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;下定决心开始打CF的第一个比赛就被虐得好惨，还需要继续努力啊（虽然感觉CF和面试算法题关系不大。。）&lt;/p&gt;
&lt;p&gt;题目网址： &lt;a href=&quot;https://codeforces.com/contest/1322/problem/B&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://codeforces.com/contest/1322/problem/B&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;好吧，事实上写这篇博文是因为第一次遇到这个解法，对于我这个算法小白来说还是很新颖的。&lt;br&gt;PS.做题的时候天真的以为是O(n)的解法，并且可以用数学做。。。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://yueyue200830.github.io/categories/Algorithm/"/>
    
    
      <category term="C++" scheme="https://yueyue200830.github.io/tags/C/"/>
    
      <category term="Codeforces" scheme="https://yueyue200830.github.io/tags/Codeforces/"/>
    
      <category term="Binary Search" scheme="https://yueyue200830.github.io/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title>Termux - Android terminal</title>
    <link href="https://yueyue200830.github.io/2020/03/07/Termux-Android-terminal/"/>
    <id>https://yueyue200830.github.io/2020/03/07/Termux-Android-terminal/</id>
    <published>2020-03-07T14:05:22.000Z</published>
    <updated>2020-03-07T14:11:04.864Z</updated>
    
    <content type="html"><![CDATA[<p>此处留个坑，纪念一下终于安装了<code>Termux</code>，并且可以使用啦。<br>不过怕自己<code>rm -rf</code>一键把手机给挂了，没怎么配权限 &amp; 在备用机上安装的。<br>希望有空更新并且学习一下。</p><a id="more"></a><p>记录几个不错的学习网址：</p><p><a href="http://www.huangpan.net/posts/ji-ke/2019-08-19-termux.html#" target="_blank" rel="noopener">Termux 学习笔记</a><br><a href="https://www.sqlsec.com/2018/05/termux.html#" target="_blank" rel="noopener">Termux 高级终端安装使用配置教程</a><br><a href="https://wiki.termux.com/wiki/Main_Page" target="_blank" rel="noopener">官方Wiki</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此处留个坑，纪念一下终于安装了&lt;code&gt;Termux&lt;/code&gt;，并且可以使用啦。&lt;br&gt;不过怕自己&lt;code&gt;rm -rf&lt;/code&gt;一键把手机给挂了，没怎么配权限 &amp;amp; 在备用机上安装的。&lt;br&gt;希望有空更新并且学习一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Others" scheme="https://yueyue200830.github.io/categories/Others/"/>
    
    
      <category term="Termux" scheme="https://yueyue200830.github.io/tags/Termux/"/>
    
      <category term="Terminal" scheme="https://yueyue200830.github.io/tags/Terminal/"/>
    
      <category term="Android" scheme="https://yueyue200830.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Windows系统下对文件进行MD5校验</title>
    <link href="https://yueyue200830.github.io/2020/03/04/Windows%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AF%B9%E6%96%87%E4%BB%B6%E8%BF%9B%E8%A1%8CMD5%E6%A0%A1%E9%AA%8C/"/>
    <id>https://yueyue200830.github.io/2020/03/04/Windows%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%AF%B9%E6%96%87%E4%BB%B6%E8%BF%9B%E8%A1%8CMD5%E6%A0%A1%E9%AA%8C/</id>
    <published>2020-03-04T15:00:14.000Z</published>
    <updated>2020-03-04T15:15:25.784Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>MD5全称MD5信息摘要算法（MD5 Message-Digest Algorithm），是一种被广泛使用的密码散列函数，用于确保信息传输完整一致。</p></blockquote><p>如今，MD5虽然被证明安全性不足，但被广泛运用于文件的校验上。<br>当下载较大文件时，为避免数据缺损，可以进行MD5校验。当然也可以运用于第三方下载官方文件的校验（尤其国内下外网速度不够的情况）</p><a id="more"></a><p>本来以为Windows下属性里面会有的，作为一个小白发现想多了，并没有。<br>于是以为要下载软件，没先到其实Windows是有内嵌命令行工具<code>CertUtil</code>的。</p><p><strong>命令</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certutil -hashfile filePath [HashAlgorithm]</span><br></pre></td></tr></table></figure><p>这里<code>filePath</code>就是文件路径，可用绝对路径或相对路径</p><p><code>HashAlgorithm</code>可以是<code>MD2</code>、<code>MD4</code>、<code>MD5</code>、<code>SHA1</code>、<code>SHA256</code>、<code>SHA384</code>、<code>SHA512</code></p><p><strong>样例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">certutil -hashfile C:\file.exe MD5</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;MD5全称MD5信息摘要算法（MD5 Message-Digest Algorithm），是一种被广泛使用的密码散列函数，用于确保信息传输完整一致。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如今，MD5虽然被证明安全性不足，但被广泛运用于文件的校验上。&lt;br&gt;当下载较大文件时，为避免数据缺损，可以进行MD5校验。当然也可以运用于第三方下载官方文件的校验（尤其国内下外网速度不够的情况）&lt;/p&gt;
    
    </summary>
    
    
      <category term="Others" scheme="https://yueyue200830.github.io/categories/Others/"/>
    
    
      <category term="Windows" scheme="https://yueyue200830.github.io/tags/Windows/"/>
    
      <category term="Safety" scheme="https://yueyue200830.github.io/tags/Safety/"/>
    
  </entry>
  
  <entry>
    <title>新版Windows Terminal</title>
    <link href="https://yueyue200830.github.io/2020/02/29/%E6%96%B0%E7%89%88Windows-Terminal/"/>
    <id>https://yueyue200830.github.io/2020/02/29/%E6%96%B0%E7%89%88Windows-Terminal/</id>
    <published>2020-02-29T14:11:49.000Z</published>
    <updated>2020-02-29T15:21:05.529Z</updated>
    
    <content type="html"><![CDATA[<p>微软在19年的时候宣布开发新的Windows Terminal，虽然这仅仅是一个终端，并非开发一个新的shell，但是新版整合了各种shell并且超级好看！！<br>这个终端的优点是可以打开各种不同的shell，比如<code>cmd</code>、<code>PowerShell</code>、<code>Azure</code>、<code>GitBash</code>等。</p><a id="more"></a><p>截图：</p><img src="/2020/02/29/%E6%96%B0%E7%89%88Windows-Terminal/terminal.png" class="" width="700" title="Terminal"><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>微软在<a href="https://github.com/microsoft/terminal" target="_blank" rel="noopener">Github</a>上公开了代码，可以有两种方法安装，一个是用VS，还有就是直接应用商店下载</p><p>只是想玩一下的我当然应用商店下载啦，又方便又不容易又bug，就是更新慢点而已</p><h1 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h1><p>在微软应用商店搜索<code>Windows Terminal</code>，可以找到以下内容，安装即可</p><img src="/2020/02/29/%E6%96%B0%E7%89%88Windows-Terminal/store.png" class="" width="700" title="Store"><h1 id="使用与配置"><a href="#使用与配置" class="headerlink" title="使用与配置"></a>使用与配置</h1><p>安装好后可以直接打开，会发现emmm没有什么好看的，当然主要的大招是自己配置哈哈哈</p><p>找到下拉菜单，可以发现应该有cmd、PowserShell和Azure，选择<code>setting</code>，用文本编辑器打开，这是一个<code>json</code>的配置文件</p><h2 id="增加亚力克（Acrylic）效果"><a href="#增加亚力克（Acrylic）效果" class="headerlink" title="增加亚力克（Acrylic）效果"></a>增加亚力克（Acrylic）效果</h2><p>在每个shell的配置文件中添加：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"useAcrylic": true</span><br></pre></td></tr></table></figure><p>保存重新打开就可以看到之前本文的截图效果了（也就是毛玻璃），瞬间爱了呀！<br>然而鸡肋的cmd并没有因此有改进。。。只是界面影响心情所以喜欢了哈哈哈</p><h2 id="切换默认shell"><a href="#切换默认shell" class="headerlink" title="切换默认shell"></a>切换默认shell</h2><p>安装打开后默认应该是PowerShell，由于不用PowerShell，所以把它改成了cmd</p><p>找到<code>defaultProfile</code>，把它的内容改成你想到修改的shell对应的<code>guid</code></p><p>比如我的cmd配置如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Make changes here to the cmd.exe profile</span></span><br><span class="line">    <span class="attr">"guid"</span>: <span class="string">"&#123;0caa0dad-35be-5f56-a8ff-afceeeaa6101&#125;"</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"cmd"</span>,</span><br><span class="line">    <span class="attr">"commandline"</span>: <span class="string">"cmd.exe"</span>,</span><br><span class="line">    <span class="attr">"hidden"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"useAcrylic"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么defaultProfile就改为：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"defaultProfile": "&#123;0caa0dad-35be-5f56-a8ff-afceeeaa6101&#125;"</span><br></pre></td></tr></table></figure><h2 id="添加gitbash"><a href="#添加gitbash" class="headerlink" title="添加gitbash"></a>添加gitbash</h2><p>配置如下，复制进去基本就可以</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// Git Bash</span></span><br><span class="line">    <span class="attr">"guid"</span>: <span class="string">"&#123;00000000-0000-0000-ba54-000000000002&#125;"</span>,</span><br><span class="line">    <span class="attr">"closeOnExit"</span> : <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"colorScheme"</span> : <span class="string">"Campbell"</span>,</span><br><span class="line">    <span class="attr">"commandline"</span> : <span class="string">"\"%PROGRAMFILES%\\git\\usr\\bin\\bash.exe\" -i -l"</span>,</span><br><span class="line">    <span class="attr">"cursorColor"</span> : <span class="string">"#FFFFFF"</span>,</span><br><span class="line">    <span class="attr">"cursorShape"</span> : <span class="string">"bar"</span>,</span><br><span class="line">    <span class="attr">"historySize"</span> : <span class="number">9001</span>,</span><br><span class="line">    <span class="attr">"icon"</span> : <span class="string">"%PROGRAMFILES%\\Git\\mingw64\\share\\git\\git-for-windows.ico"</span>,</span><br><span class="line">    <span class="attr">"name"</span> : <span class="string">"Git Bash"</span>,</span><br><span class="line">    <span class="attr">"snapOnInput"</span> : <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"startingDirectory"</span> : <span class="string">"%USERPROFILE%"</span>,</span><br><span class="line">    <span class="attr">"useAcrylic"</span> : <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"hidden"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于icon，我自己的是mitty的gitbash，所以有以上位置，但如果用的cmd的，icon应该位置不太一样，这里没有去搜过，如果跳不出来可以去搜索或者直接自己硬找一下</p><h1 id="评价"><a href="#评价" class="headerlink" title="评价"></a>评价</h1><p>其实写这篇博文主要还是脑子一抽觉得new Windows Terminal真的好好看呀，但是其实并不怎么使用它。。。<br>毕竟习惯性打开cmd或者右键gitbash了</p><p>但是组合在一起其实使用起来还是比较方便的，并且比较好看的界面+好看的字体+支持windows表情还是很不错的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;微软在19年的时候宣布开发新的Windows Terminal，虽然这仅仅是一个终端，并非开发一个新的shell，但是新版整合了各种shell并且超级好看！！&lt;br&gt;这个终端的优点是可以打开各种不同的shell，比如&lt;code&gt;cmd&lt;/code&gt;、&lt;code&gt;PowerShell&lt;/code&gt;、&lt;code&gt;Azure&lt;/code&gt;、&lt;code&gt;GitBash&lt;/code&gt;等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Others" scheme="https://yueyue200830.github.io/categories/Others/"/>
    
    
      <category term="Windows" scheme="https://yueyue200830.github.io/tags/Windows/"/>
    
      <category term="Shell" scheme="https://yueyue200830.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>解决Google Play Store一直「正在等待下载」的问题</title>
    <link href="https://yueyue200830.github.io/2020/02/29/%E8%A7%A3%E5%86%B3Google-Play-Store%E4%B8%80%E7%9B%B4%E3%80%8C%E6%AD%A3%E5%9C%A8%E7%AD%89%E5%BE%85%E4%B8%8B%E8%BD%BD%E3%80%8D%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://yueyue200830.github.io/2020/02/29/%E8%A7%A3%E5%86%B3Google-Play-Store%E4%B8%80%E7%9B%B4%E3%80%8C%E6%AD%A3%E5%9C%A8%E7%AD%89%E5%BE%85%E4%B8%8B%E8%BD%BD%E3%80%8D%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2020-02-29T13:40:43.000Z</published>
    <updated>2020-02-29T15:02:51.290Z</updated>
    
    <content type="html"><![CDATA[<p>大概月初开始，我的小米的Play Store就开始卡在<code>正在等待下载</code>，play store其它内容加载一切正常，其它网页加载也都正常，但是就是无法更新。。<br>卡了近一个月后终于想到网络搜索解决问题了。</p><a id="more"></a><ol><li>确保是软件问题，play store可加载其它内容，且没有程序卡在<code>正在下载</code></li><li>打开play store的应用信息，选择<code>清楚全部数据</code>，可能会出现提示，按确定清除数据<img src="/2020/02/29/%E8%A7%A3%E5%86%B3Google-Play-Store%E4%B8%80%E7%9B%B4%E3%80%8C%E6%AD%A3%E5%9C%A8%E7%AD%89%E5%BE%85%E4%B8%8B%E8%BD%BD%E3%80%8D%E7%9A%84%E9%97%AE%E9%A2%98/play-store.jpg" class="" width="300" title="Play-store"></li><li>【小米手机/部分国内手机】打开<code>下载管理</code>（或类似名称），禁用迅雷加速下载<img src="/2020/02/29/%E8%A7%A3%E5%86%B3Google-Play-Store%E4%B8%80%E7%9B%B4%E3%80%8C%E6%AD%A3%E5%9C%A8%E7%AD%89%E5%BE%85%E4%B8%8B%E8%BD%BD%E3%80%8D%E7%9A%84%E9%97%AE%E9%A2%98/xunlei.jpg" class="" width="300" title="Xunlei"></li><li>打开下载管理的应用信息，选择<code>清楚全部数据</code></li><li>重新打开play store，查看是否恢复正常</li></ol><p>完全不懂什么原理，个人猜测线程卡死死锁了？<br>据说play store的下载机制是通过手机自己的下载来下载的，所以可能出奇奇怪怪的问题。。</p><p>ps. play store绝对是一个神奇的软件，在我的三星出现了一个更迷的bug，无法自动更新play store，永远显示已经最新版，且确定过版本应该不是盗版。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大概月初开始，我的小米的Play Store就开始卡在&lt;code&gt;正在等待下载&lt;/code&gt;，play store其它内容加载一切正常，其它网页加载也都正常，但是就是无法更新。。&lt;br&gt;卡了近一个月后终于想到网络搜索解决问题了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Others" scheme="https://yueyue200830.github.io/categories/Others/"/>
    
    
      <category term="Android" scheme="https://yueyue200830.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Hexo多终端同步及发布至Github</title>
    <link href="https://yueyue200830.github.io/2020/02/24/Hexo%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%90%8C%E6%AD%A5%E5%8F%8A%E5%8F%91%E5%B8%83%E8%87%B3Github/"/>
    <id>https://yueyue200830.github.io/2020/02/24/Hexo%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%90%8C%E6%AD%A5%E5%8F%8A%E5%8F%91%E5%B8%83%E8%87%B3Github/</id>
    <published>2020-02-24T15:11:47.000Z</published>
    <updated>2020-02-24T15:57:15.967Z</updated>
    
    <content type="html"><![CDATA[<p>因为有两台电脑的关系，很多东西都需要同步，一般文件比较小的会用<code>Onedrive</code>，文件比较大的比如Hexo会选择用<code>GitHub</code>（主要贫穷的我只有5G的免费空间）。<br>相比于其它普通文件夹直接push就可以同步，这个就稍微麻烦一点，因为整个文件夹里有多个含有git的文件夹。<br>而在第一次直接把跟目录push上去以后，甚至遇到了这个网站<code>yueyue200830.github.io</code>的github全部被覆盖。<br>当时整个人内心都十分崩溃。。。</p><a id="more"></a><h1 id="解决方法之概念"><a href="#解决方法之概念" class="headerlink" title="解决方法之概念"></a>解决方法之概念</h1><p>首先，我们需要了解一下hexo是如何push到github上的</p><p>在根目录寻找一圈后，会发现有一个<code>.deploy_git</code>的文件夹，打开发现和github上面的文件完全一样。<br>没错了，hexo就是直接编译在这个文件夹生成文件，然后push到github上面。</p><p>然而，不要高兴太早，如果单纯的push为什么换电脑是覆盖而不是有任何的conflict信息呢？</p><p>在<code>.deploy_git</code>文件夹在打开<code>git bash</code>，输入<code>git remote -v</code>，发现竟然什么也没有？？？</p><p>介于自己完全不熟练<code>git</code>命令，打开了外部有同步的文件夹同样输入<code>git remote -v</code>，是会得到以下显示的</p><img src="/2020/02/24/Hexo%E5%A4%9A%E7%BB%88%E7%AB%AF%E5%90%8C%E6%AD%A5%E5%8F%8A%E5%8F%91%E5%B8%83%E8%87%B3Github/gitbash1.png" class="" title="Screenshot1"><p>虽然不清楚发生了什么（对不起，我就是一个git小白）。。但是可以知道我们git仓库没有github上面的信息<br>也就是每次hexo在deploy的时候，是直接把整个仓库替换上去的（好粗暴呀。。）</p><p>而再去看一下整个项目的github，发面默认的gitignore里把<code>.deploy_git</code>添加上了。<br>也就是说同步的时候根本没有任何之前发布的信息，所以当换了一台电脑的时候就会遇到如此崩溃的事情了。</p><h1 id="解决方法之实际操作"><a href="#解决方法之实际操作" class="headerlink" title="解决方法之实际操作"></a>解决方法之实际操作</h1><p>既然<code>.deploy_git</code>和项目各会同步在我的github上，那么与其取消ignore，不如在<code>.deploy_git</code>上添加远程仓库，每次更新前做一个同步。</p><p>在<code>.deploy_git</code>文件夹的终端下输入以下内容，让其连接到github仓库（注意在最后加上<code>.git</code>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin https://github.com/yueyue200830/yueyue200830.github.io.git</span><br></pre></td></tr></table></figure><p>这个时候，我们再输入<code>git remote -v</code>，可以看到有信息了</p><p>再把remote和本地的进行一次同步：（应该用pull也可以）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure><p>这样，我们就在本地同步与github同步成功了，只需要再另一台电脑上也进行以下同步配置，之后每次换电脑的时候只需要两个文件夹各同步一下就可以啦。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为有两台电脑的关系，很多东西都需要同步，一般文件比较小的会用&lt;code&gt;Onedrive&lt;/code&gt;，文件比较大的比如Hexo会选择用&lt;code&gt;GitHub&lt;/code&gt;（主要贫穷的我只有5G的免费空间）。&lt;br&gt;相比于其它普通文件夹直接push就可以同步，这个就稍微麻烦一点，因为整个文件夹里有多个含有git的文件夹。&lt;br&gt;而在第一次直接把跟目录push上去以后，甚至遇到了这个网站&lt;code&gt;yueyue200830.github.io&lt;/code&gt;的github全部被覆盖。&lt;br&gt;当时整个人内心都十分崩溃。。。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="https://yueyue200830.github.io/categories/Hexo/"/>
    
    
      <category term="Github" scheme="https://yueyue200830.github.io/tags/Github/"/>
    
      <category term="Hexo" scheme="https://yueyue200830.github.io/tags/Hexo/"/>
    
      <category term="多终端" scheme="https://yueyue200830.github.io/tags/%E5%A4%9A%E7%BB%88%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Github加速访问/防DNS污染</title>
    <link href="https://yueyue200830.github.io/2020/02/24/Github%E5%8A%A0%E9%80%9F%E8%AE%BF%E9%97%AE-%E9%98%B2DNS%E6%B1%A1%E6%9F%93/"/>
    <id>https://yueyue200830.github.io/2020/02/24/Github%E5%8A%A0%E9%80%9F%E8%AE%BF%E9%97%AE-%E9%98%B2DNS%E6%B1%A1%E6%9F%93/</id>
    <published>2020-02-24T07:58:56.000Z</published>
    <updated>2020-02-24T12:26:55.031Z</updated>
    
    <content type="html"><![CDATA[<p>在访问DNS有的时候会比较慢甚至无法打开，而我最近遇到的一个问题是DNS被污染，并且由于同时加载了境内和境外DNS，根本无法找到究竟是哪里受到了DNS污染。为此我搜了不少资料，最终得到了以下的解决方案，不过其实这个方法个人认为也是治标不治本。</p><p>解决方法就是本地设置<code>hosts</code>/<code>DNS</code>，强制直接让网站访问某个ip从而跳过寻找ip地址。</p><a id="more"></a><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>简单讲一下原理（应该其实会一点CS的都懂啦），可以跳过。</p><p>在访问网站时，由于我们输入的是域名（如<code>www.google.com</code>)，需要寻找它真实的ip地址再去访问。<br>那如何获取它的ip地址呢，这就是DNS和hosts的用处了。</p><p>电脑首先在本地的<code>hosts</code>中寻找域名对应的ip，比如<code>localhost</code>是直接对应<code>127.0.0.0</code>。<br>如果能在hosts中寻找到，那么就直接进行下一步去加载网页了<br>但往往hosts中没有太多的对应，于是就下一步采用<code>DNS</code>寻找ip。</p><p>相对于hosts在本地，DNS在无其他配置情况下是通过网络查找的，而在这个时候，可能会有人在查找的结果中动一些手脚，明明是<code>11.11.11.11</code>的ip，却让它返回<code>22.22.22.22</code>。<br>那这样，这个网址就无法加载了。</p><p>此外，当Github访问速度过慢也可能是在DNS查找时比较慢，又或者因为这种大的网站一般有多个ip，我们访问了最远的ip，那么就会很慢了。</p><p>因此，通过修改hosts直接强制域名对应ip，使得DNS查找这个步骤可以省略，且访问速度较快的一个ip。</p><h1 id="一、获取需要解析的地址"><a href="#一、获取需要解析的地址" class="headerlink" title="一、获取需要解析的地址"></a>一、获取需要解析的地址</h1><p>为了确保加载，我解析的地址比较多，其中分为必须和可选（自己加上后发现效果比较好）</p><h2 id="必须"><a href="#必须" class="headerlink" title="必须"></a>必须</h2><ul><li>gist.github.com</li><li>github.com</li><li>assets-cdn.github.com</li><li>github.global.ssl.fastly.net</li></ul><h2 id="可选"><a href="#可选" class="headerlink" title="可选"></a>可选</h2><ul><li><a href="http://www.github.com" target="_blank" rel="noopener">www.github.com</a></li><li>api.github.com</li><li>github.githubassets.com</li><li>github.map.fastly.net</li><li>raw.githubusercontent.com</li><li>avatars0.githubusercontent.com</li><li>avatars1.githubusercontent.com</li><li>avatars2.githubusercontent.com</li><li>avatars3.githubusercontent.com</li></ul><h2 id="如何有针对性的选择添加解析的域名"><a href="#如何有针对性的选择添加解析的域名" class="headerlink" title="如何有针对性的选择添加解析的域名"></a>如何有针对性的选择添加解析的域名</h2><p>在加载github的时候打开开发者模式（F12），选择网络（Network），观察加载比较慢的或者直接加载失败的。</p><img src="/2020/02/24/Github%E5%8A%A0%E9%80%9F%E8%AE%BF%E9%97%AE-%E9%98%B2DNS%E6%B1%A1%E6%9F%93/p1.png" class="" width="300" title="Network-Screenshot"><p>如图，可以看到头像是加载失败的，找到网址是：avatars0.githubusercontent.com，把它加入需要解析的地址</p><h1 id="二、获取Github的DNS解析地址"><a href="#二、获取Github的DNS解析地址" class="headerlink" title="二、获取Github的DNS解析地址"></a>二、获取Github的DNS解析地址</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>采用<a href="https://www.ipaddress.com/ip-lookup" target="_blank" rel="noopener">IPAddress.com</a>查询ip地址。</p><p>输入需要查找的网址，如：assets-cdn.github.com，就可以看到结果。</p><img src="/2020/02/24/Github%E5%8A%A0%E9%80%9F%E8%AE%BF%E9%97%AE-%E9%98%B2DNS%E6%B1%A1%E6%9F%93/ip1.png" class="" width="400" title="Find-ip"><p>可以看到assets-cdn.github.com有四个对应ip</p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>在用方法一的时候，发现电脑本来自动加载的ip和搜索出来的ip相差很大，因此可以直接采用电脑本来自己加载的时候采用的ip。</p><img src="/2020/02/24/Github%E5%8A%A0%E9%80%9F%E8%AE%BF%E9%97%AE-%E9%98%B2DNS%E6%B1%A1%E6%9F%93/ip2.png" class="" title="Auto-ip"><p>又或者如果有自己的服务器可以尝试用服务器ping一下查看服务器所找到的ip。</p><p>又又或者直接试试网上别人提供的ip。</p><h1 id="三、修改Hosts文件"><a href="#三、修改Hosts文件" class="headerlink" title="三、修改Hosts文件"></a>三、修改Hosts文件</h1><p>打开系统的hosts文件，Windows是在<code>C:\Windows\System32\drivers\etc</code>，Mac和Linux是在<code>/etc</code><br>均需要采用管理员（root）打开</p><p>在文件最后加上需要的ip和域名对应的地址，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.30.255.112 gist.github.com</span><br><span class="line">192.30.253.113 github.com</span><br><span class="line">185.199.111.153 assets-cdn.github.com</span><br></pre></td></tr></table></figure><h1 id="四、刷新DNS缓存"><a href="#四、刷新DNS缓存" class="headerlink" title="四、刷新DNS缓存"></a>四、刷新DNS缓存</h1><p>对于Windwos用户，需要刷新一下DNS缓存</p><p>打开<code>cmd</code>或<code>powershell</code><br>输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig /flushdns</span><br></pre></td></tr></table></figure><p>这样就可以使用我们自定义的hosts了</p><h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><p>这其实是一个硬方法，由于ip可能会变且存在很多不同的ip，采用自定义ip其实并没有那么方便，一是不一定能找到最快的ip，二是一旦ip修改还得自行修改hosts文件，并没有那么方便。<br>但网上搜索了那么多，也没有找到一些好的方法，就先选择采用这个方法吧。</p><p>ps.几年前的采用修改hosts的方法是可以当半个梯子用的，不过现在好像并不太好用了。。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在访问DNS有的时候会比较慢甚至无法打开，而我最近遇到的一个问题是DNS被污染，并且由于同时加载了境内和境外DNS，根本无法找到究竟是哪里受到了DNS污染。为此我搜了不少资料，最终得到了以下的解决方案，不过其实这个方法个人认为也是治标不治本。&lt;/p&gt;
&lt;p&gt;解决方法就是本地设置&lt;code&gt;hosts&lt;/code&gt;/&lt;code&gt;DNS&lt;/code&gt;，强制直接让网站访问某个ip从而跳过寻找ip地址。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Others" scheme="https://yueyue200830.github.io/categories/Others/"/>
    
    
      <category term="DNS" scheme="https://yueyue200830.github.io/tags/DNS/"/>
    
      <category term="Github" scheme="https://yueyue200830.github.io/tags/Github/"/>
    
      <category term="Hosts" scheme="https://yueyue200830.github.io/tags/Hosts/"/>
    
  </entry>
  
  <entry>
    <title>设置hexo首页只显示部分摘要（不显示全文）</title>
    <link href="https://yueyue200830.github.io/2020/02/23/%E8%AE%BE%E7%BD%AEhexo%E9%A6%96%E9%A1%B5%E5%8F%AA%E6%98%BE%E7%A4%BA%E9%83%A8%E5%88%86%E6%91%98%E8%A6%81%EF%BC%88%E4%B8%8D%E6%98%BE%E7%A4%BA%E5%85%A8%E6%96%87%EF%BC%89/"/>
    <id>https://yueyue200830.github.io/2020/02/23/%E8%AE%BE%E7%BD%AEhexo%E9%A6%96%E9%A1%B5%E5%8F%AA%E6%98%BE%E7%A4%BA%E9%83%A8%E5%88%86%E6%91%98%E8%A6%81%EF%BC%88%E4%B8%8D%E6%98%BE%E7%A4%BA%E5%85%A8%E6%96%87%EF%BC%89/</id>
    <published>2020-02-23T14:55:10.000Z</published>
    <updated>2020-02-23T15:11:57.134Z</updated>
    
    <content type="html"><![CDATA[<p>本文针对Next主题，不确保对于其它主题有效（但从修改模式来看，是有效的）</p><p>Next默认是会显示全文的，这样显然很不方便，因此需要一些方法去只显示前面一部分。</p><a id="more"></a><h1 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h1><p>首先需要在Next主题的_config.yml中把设置打开：(默认安装时就打开了)</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Automatically excerpt description in homepage as preamble text.</span></span><br><span class="line"><span class="attr">excerpt_description:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>之后有两种方法</p><h2 id="方法一：写概述"><a href="#方法一：写概述" class="headerlink" title="方法一：写概述"></a>方法一：写概述</h2><p>在文章的<code>front-matter</code>中添加<code>description</code>，其中description中的内容就会被显示在首页上，其余一律不显示。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 让首页显示部分内容</span><br><span class="line">date: 2020-02-23 22:55:10</span><br><span class="line">description: 这是显示在首页的概述，正文内容均会被隐藏。</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>比较不方便的是还得写一下概述，很多时候会懒得写概述，于是就需要第二种方法了。</p><h2 id="方法二：文章截断"><a href="#方法二：文章截断" class="headerlink" title="方法二：文章截断"></a>方法二：文章截断</h2><p>在需要截断的地方加入：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!--more--&gt;</span></span></span><br></pre></td></tr></table></figure><p>首页就会显示这条以上的所有内容，隐藏接下来的所有内容。<br>例如本文会显示到<code>修改配置</code>上面。</p><p>这个明显就方便很多，但当然有利有弊，比如开头都是废话首页看着就不是很好看，因此我一般会先选择方法二，如果感觉文章前面的写的不太好再用方法一。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文针对Next主题，不确保对于其它主题有效（但从修改模式来看，是有效的）&lt;/p&gt;
&lt;p&gt;Next默认是会显示全文的，这样显然很不方便，因此需要一些方法去只显示前面一部分。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="https://yueyue200830.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://yueyue200830.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Python触发win10通知栏通知提醒</title>
    <link href="https://yueyue200830.github.io/2020/02/11/Python%E8%A7%A6%E5%8F%91win10%E9%80%9A%E7%9F%A5%E6%A0%8F%E9%80%9A%E7%9F%A5%E6%8F%90%E9%86%92/"/>
    <id>https://yueyue200830.github.io/2020/02/11/Python%E8%A7%A6%E5%8F%91win10%E9%80%9A%E7%9F%A5%E6%A0%8F%E9%80%9A%E7%9F%A5%E6%8F%90%E9%86%92/</id>
    <published>2020-02-11T14:18:22.000Z</published>
    <updated>2020-02-23T14:11:59.221Z</updated>
    
    <content type="html"><![CDATA[<p>在写代码的时候想在某些特定情况触发提示（后台自动运行的情况下），可以搜到的大部分是右下角提示之类比较丑的自定义提示，而其实现在win10已经有自己的通知栏，如果能用自带的通知栏绝对是一个很优秀的选择。搜了很久后发现了一个库叫做<strong>win10toast</strong>。</p><p>这个库最后是18年更新的，感觉是不会有更新了，但只要不会出问题就好，开发者github：<a href="https://github.com/jithurjacob/Windows-10-Toast-Notifications" target="_blank" rel="noopener">jithurjacob/Windows-10-Toast-Notifications</a></p><a id="more"></a><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>用pip安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install win10toast</span><br></pre></td></tr></table></figure><p>这个需要同时安装<strong>pywin32</strong>，没有安装的话pip会自动一起安装的。</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> win10toast <span class="keyword">import</span> ToastNotifier</span><br><span class="line"></span><br><span class="line">toaster = ToastNotifier()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有icon的版本</span></span><br><span class="line">toaster.show_toast(<span class="string">"Hello World!!!"</span>,</span><br><span class="line">                   <span class="string">"Python is 10 seconds awsm!"</span>,</span><br><span class="line">                   icon_path=<span class="string">"custom.ico"</span>,</span><br><span class="line">                   duration=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 无icon，采用python的icon，且采用自己的线程</span></span><br><span class="line">toaster.show_toast(<span class="string">"Example two"</span>,</span><br><span class="line">                   <span class="string">"This notification is in it's own thread!"</span>,</span><br><span class="line">                   icon_path=<span class="literal">None</span>,</span><br><span class="line">                   duration=<span class="number">5</span>,</span><br><span class="line">                   threaded=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待提示框关闭</span></span><br><span class="line"><span class="keyword">while</span> toaster.notification_active(): time.sleep(<span class="number">0.1</span>)</span><br></pre></td></tr></table></figure><p>提示框截图：</p><img src="/2020/02/11/Python%E8%A7%A6%E5%8F%91win10%E9%80%9A%E7%9F%A5%E6%A0%8F%E9%80%9A%E7%9F%A5%E6%8F%90%E9%86%92/screenshot.png" class="" title="Screenshot"><p>本来想要一个可以永久长时间需要手动关闭的提示框，可惜似乎开发者并没有支持，经过尝试采用-1是有效的，但是会报错。</p><p>搬运自CSDN：<a href="https://blog.csdn.net/yueyue200830/article/details/104270913" target="_blank" rel="noopener">https://blog.csdn.net/yueyue200830/article/details/104270913</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在写代码的时候想在某些特定情况触发提示（后台自动运行的情况下），可以搜到的大部分是右下角提示之类比较丑的自定义提示，而其实现在win10已经有自己的通知栏，如果能用自带的通知栏绝对是一个很优秀的选择。搜了很久后发现了一个库叫做&lt;strong&gt;win10toast&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;这个库最后是18年更新的，感觉是不会有更新了，但只要不会出问题就好，开发者github：&lt;a href=&quot;https://github.com/jithurjacob/Windows-10-Toast-Notifications&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jithurjacob/Windows-10-Toast-Notifications&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://yueyue200830.github.io/categories/Python/"/>
    
    
      <category term="Windows" scheme="https://yueyue200830.github.io/tags/Windows/"/>
    
      <category term="Python" scheme="https://yueyue200830.github.io/tags/Python/"/>
    
      <category term="Notification" scheme="https://yueyue200830.github.io/tags/Notification/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu安装MPICH3.3.2</title>
    <link href="https://yueyue200830.github.io/2019/11/23/Ubuntu%E5%AE%89%E8%A3%85MPICH3-3-2/"/>
    <id>https://yueyue200830.github.io/2019/11/23/Ubuntu%E5%AE%89%E8%A3%85MPICH3-3-2/</id>
    <published>2019-11-23T04:13:48.000Z</published>
    <updated>2020-02-23T14:03:17.260Z</updated>
    
    <content type="html"><![CDATA[<p>Linux上安装MPICH还算是方便的，虽然是indows系统，但搜索了一下windows安装的方法，最后选择放弃windows选择linux，不过虚拟机上的性能可能稍微差一点，但是作为并行的入门使用还是没有问题的。</p><p>主要步骤一开始是跟着网上搜索的，后来发现其实自带的readme写得很详细，推荐如果英文ok看readme就好。</p><a id="more"></a><p>此安装步骤成功安装于Ubuntu 16和Ubuntu 18。</p><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>官网：<a href="https://www.mpich.org/" target="_blank" rel="noopener">https://www.mpich.org/</a><br>点击download以后选择<strong>mpich-3.3.2 (stable release)</strong>，下面自带的ubuntu平台的没太看懂于是就放弃了。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>下载好以后解压并打开目录：（其实更喜欢右键解压哈哈哈）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar xzf mpich-3.3.2.tar.gz</span><br><span class="line"><span class="built_in">cd</span> mpich-3.3.2</span><br></pre></td></tr></table></figure><p>如果看一下Readme的话可以发现必须要的是gcc，可选g++和Fortran。没有安装c的编译器的自行搜索</p><p>然后配置文件（这里没有用readme的重定向因为感觉看起来方便）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure -prefix=/usr/<span class="built_in">local</span>/mpich</span><br></pre></td></tr></table></figure><p>这里prefix是安装路径<br>如果有Fortran报错，又不需要支持Fortran的话：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure -prefix=/usr/<span class="built_in">local</span>/mpich --<span class="built_in">disable</span>-fortran</span><br></pre></td></tr></table></figure><p>然后make file（此处等待5分钟）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p>然后安装（此处继续等待五分钟）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>如果出错的话可以尝试make clean然后再来一遍</p><h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h1><p>为了能全局使用，我们需要配置一下环境变量。这里被坑了很久，因为网上都是bash的配置，但我的默认shell是zsh，然后就一直配不出。。。</p><p>如果配置的是bash，打开bash的环境变量配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim ~/.bashrc</span><br></pre></td></tr></table></figure><p>如果是zsh，则：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim ~/.zshrc</span><br></pre></td></tr></table></figure><h1 id="编辑环境变量"><a href="#编辑环境变量" class="headerlink" title="编辑环境变量"></a>编辑环境变量</h1><p>输入<strong>G</strong>移到最后一行，<br>按下<strong>i</strong>进行编辑<br>加入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/mpich/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>然后按下<strong>ESC</strong>，以及 <strong>:wq</strong>保存退出。</p><p>然后刷新一下环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><p>然后输入以下命令测试，应该会有反应</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> mpicc</span><br><span class="line"><span class="built_in">which</span> mpiexec</span><br></pre></td></tr></table></figure><p>搬运自CSDN：<a href="https://blog.csdn.net/yueyue200830/article/details/103212344" target="_blank" rel="noopener">https://blog.csdn.net/yueyue200830/article/details/103212344</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux上安装MPICH还算是方便的，虽然是indows系统，但搜索了一下windows安装的方法，最后选择放弃windows选择linux，不过虚拟机上的性能可能稍微差一点，但是作为并行的入门使用还是没有问题的。&lt;/p&gt;
&lt;p&gt;主要步骤一开始是跟着网上搜索的，后来发现其实自带的readme写得很详细，推荐如果英文ok看readme就好。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://yueyue200830.github.io/categories/Linux/"/>
    
    
      <category term="Ubuntu" scheme="https://yueyue200830.github.io/tags/Ubuntu/"/>
    
      <category term="MPICH" scheme="https://yueyue200830.github.io/tags/MPICH/"/>
    
      <category term="parallelism" scheme="https://yueyue200830.github.io/tags/parallelism/"/>
    
  </entry>
  
  <entry>
    <title>修改服务器端口</title>
    <link href="https://yueyue200830.github.io/2019/10/01/%E4%BF%AE%E6%94%B9%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E5%8F%A3/"/>
    <id>https://yueyue200830.github.io/2019/10/01/%E4%BF%AE%E6%94%B9%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E5%8F%A3/</id>
    <published>2019-10-01T07:06:25.000Z</published>
    <updated>2020-02-23T13:56:58.649Z</updated>
    
    <content type="html"><![CDATA[<p>自己建一个服务器，最基础会遇到的问题就是被人随机攻击服务器，把默认端口修改掉就会减少很多啦</p><a id="more"></a><p>登录服务器以后，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>然后会看到一行被注释的 #port 22</p><p>把”#”删掉然后把22换成其它端口号就好。</p><p>关于vim使用，要修改之前按一下i，修改结束按esc，然后输入”:wq”。</p><p>最后重新刷新一下配置（Debian 9）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service ssh restart</span><br></pre></td></tr></table></figure><p>如不成功，可尝试以下命令：（Centos 7）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service sshd restart</span><br></pre></td></tr></table></figure><p>然后可以先试一下用默认端口登录，发现不可以登录</p><p>之后输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@xxx.xxx.xx.xx -p abcd(端口号)</span><br></pre></td></tr></table></figure><p>会发现让输入密码，那就成功修改端口啦</p><p>搬运自CSDN：<a href="https://blog.csdn.net/yueyue200830/article/details/101845927" target="_blank" rel="noopener">https://blog.csdn.net/yueyue200830/article/details/101845927</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自己建一个服务器，最基础会遇到的问题就是被人随机攻击服务器，把默认端口修改掉就会减少很多啦&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://yueyue200830.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://yueyue200830.github.io/tags/Linux/"/>
    
      <category term="port" scheme="https://yueyue200830.github.io/tags/port/"/>
    
  </entry>
  
  <entry>
    <title>JAVA学习-Calendar类</title>
    <link href="https://yueyue200830.github.io/2019/09/25/JAVA%E5%AD%A6%E4%B9%A0-Calendar%E7%B1%BB/"/>
    <id>https://yueyue200830.github.io/2019/09/25/JAVA%E5%AD%A6%E4%B9%A0-Calendar%E7%B1%BB/</id>
    <published>2019-09-25T10:11:45.000Z</published>
    <updated>2020-02-23T13:54:37.170Z</updated>
    
    <content type="html"><![CDATA[<p>Calendar类实个挺神奇的类，具体原因也没有细究，记一下它的用法。</p><p>Calendar类是一个基于Date类的类，它其中用到了Date，并且有相应的方法。而Calendar比Date增加了一些更通用的甚至，比如可以单独甚至年月日。</p><a id="more"></a><h1 id="新建一个（假）实例"><a href="#新建一个（假）实例" class="headerlink" title="新建一个（假）实例"></a>新建一个（假）实例</h1><p>和其他很多函数用法不一样，Calendar不用new来新建一个实例，而是用Calendar.getInstance()，因为某些原因所以我叫它（假）实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Calendar c = Calendar.getInstance();</span><br></pre></td></tr></table></figure><p>这样我们就拥有了一个时间为现在时间的Calendar类c了。</p><h1 id="设置时间"><a href="#设置时间" class="headerlink" title="设置时间"></a>设置时间</h1><p>Calendar有两种设置方法。</p><h2 id="调用set"><a href="#调用set" class="headerlink" title="调用set"></a>调用set</h2><p>第一种调用set，用法是set(变量，值)<br>变量可以是Calendar.HOUR, Calendar.YEAR 等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Calendar c = Calendar.getInstance();</span><br><span class="line">c.set(Calendar.YEAR, <span class="number">2019</span>);</span><br></pre></td></tr></table></figure><p>这样年份就变成了2019</p><h2 id="调用setTime"><a href="#调用setTime" class="headerlink" title="调用setTime"></a>调用setTime</h2><p>setTime就是一个和Date有关的方法了，它的传参是一个Date类，为什么要用Date呢，因为Date的日期计算方式是距离一个年份的毫秒数，个人猜测比较方便。<br>用法就是setTime(date)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Calendar c = Calendar.getInstance();</span><br><span class="line">Date d = <span class="keyword">new</span> Date();</span><br><span class="line">c.setTime(d);</span><br></pre></td></tr></table></figure><h2 id="复制另一个Calendar时间"><a href="#复制另一个Calendar时间" class="headerlink" title="复制另一个Calendar时间"></a>复制另一个Calendar时间</h2><p>Calendar有一个方法是getTime()返回的是一个Date类，和setTime很像，因此我的解决方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Calendar c1 = Calendar.getInstance();</span><br><span class="line">Calendar c2 = Calendar.getInstance();</span><br><span class="line">c1.setTime(c2.getTime());</span><br></pre></td></tr></table></figure><h1 id="Assert的使用"><a href="#Assert的使用" class="headerlink" title="Assert的使用"></a>Assert的使用</h1><p>这里就是为什么我认为我们构建的是一个（假）实例了。<br>阅读下述代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Calendar c1 = Calendar.getInstance();</span><br><span class="line">Calendar c2 = Calendar.getInstance();</span><br><span class="line">assertEquals(c1, c2);</span><br></pre></td></tr></table></figure><p>它是不会报错的，十分神奇。。</p><p>再看另一端代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Calendar c1 = Calendar.getInstance();</span><br><span class="line">Calendar c2 = Calendar.getInstance();</span><br><span class="line">c1.set(Calendar.YEAR, <span class="number">1999</span>);</span><br><span class="line">assertEquals(c1, c2);</span><br></pre></td></tr></table></figure><p>当我们修改了年份以后，它是会报错的。</p><p>因此，我们得出的结论对于Calendar的assert，它只是对比了日期是否相同，并不对比指针是否一致</p><p>搬运自CSDN：<a href="https://blog.csdn.net/yueyue200830/article/details/101376719" target="_blank" rel="noopener">https://blog.csdn.net/yueyue200830/article/details/101376719</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Calendar类实个挺神奇的类，具体原因也没有细究，记一下它的用法。&lt;/p&gt;
&lt;p&gt;Calendar类是一个基于Date类的类，它其中用到了Date，并且有相应的方法。而Calendar比Date增加了一些更通用的甚至，比如可以单独甚至年月日。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="https://yueyue200830.github.io/categories/JAVA/"/>
    
    
      <category term="JAVA" scheme="https://yueyue200830.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7安装MariaDB数据库及基础配置</title>
    <link href="https://yueyue200830.github.io/2019/07/18/CentOS-7%E5%AE%89%E8%A3%85MariaDB%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%8A%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/"/>
    <id>https://yueyue200830.github.io/2019/07/18/CentOS-7%E5%AE%89%E8%A3%85MariaDB%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%8A%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/</id>
    <published>2019-07-17T16:04:27.000Z</published>
    <updated>2020-02-23T13:51:23.508Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因为开发需求，在自己的CentOS 7服务器上远程链接数据库，搜索得知CentOS 7默认是MariaDB数据库而非MySQL。虽然安装MySQL也不是不可以，但是既然MariaDB和MySQL很像，那就直接上MariaDB吧。<br>安装教程是搜到的英文教程，主要是用来记录和帮助一些人翻译一下的。</p><a id="more"></a><h1 id="安装MariaDB"><a href="#安装MariaDB" class="headerlink" title="安装MariaDB"></a>安装MariaDB</h1><h2 id="一、增加MariaDB-Yum"><a href="#一、增加MariaDB-Yum" class="headerlink" title="一、增加MariaDB Yum"></a>一、增加MariaDB Yum</h2><p>首先需要新增一个文件，这边用vim写。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/yum.repos.d/MariaDB.repo</span><br></pre></td></tr></table></figure><p>在这个文件中加入这些内容，如果不会用vim的首先按<strong>i</strong>，然后粘贴上去，在按<strong>ESC</strong>，最后输入 <strong>:wq</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[mariadb]</span><br><span class="line">name &#x3D; MariaDB</span><br><span class="line">baseurl &#x3D; http:&#x2F;&#x2F;yum.mariadb.org&#x2F;10.1&#x2F;centos7-amd64</span><br><span class="line">gpgkey &#x3D; https:&#x2F;&#x2F;yum.mariadb.org&#x2F;RPM-GPG-KEY-MariaDB</span><br><span class="line">gpgcheck &#x3D; 1</span><br></pre></td></tr></table></figure><h2 id="二、安装MariaDB"><a href="#二、安装MariaDB" class="headerlink" title="二、安装MariaDB"></a>二、安装MariaDB</h2><p>最好在root用户下安装（非root用户我后面几个命令报错了）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mariadb mariadb-server</span><br></pre></td></tr></table></figure><h2 id="三、配置MariaDB"><a href="#三、配置MariaDB" class="headerlink" title="三、配置MariaDB"></a>三、配置MariaDB</h2><p>启动mariadb</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mariadb</span><br></pre></td></tr></table></figure><p>设置开机自启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> mariadb</span><br></pre></td></tr></table></figure><p>设置root密码等相关，这其中包括密码等一些基本设置，一开始是没有密码的，所以按回车就可以了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure><h2 id="四、登录"><a href="#四、登录" class="headerlink" title="四、登录"></a>四、登录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><h2 id="五、查看版本"><a href="#五、查看版本" class="headerlink" title="五、查看版本"></a>五、查看版本</h2><p>MariaDB还真是MySQL的亲家，查看版本命令竟然使用mysql的。。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -V</span><br></pre></td></tr></table></figure><h2 id="六、新增用户"><a href="#六、新增用户" class="headerlink" title="六、新增用户"></a>六、新增用户</h2><p>登录到root用户到数据库下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> mysql.user(Host,<span class="keyword">User</span>,<span class="keyword">Password</span>) <span class="keyword">values</span>(<span class="string">"localhost"</span>,<span class="string">"admin"</span>,<span class="keyword">password</span>(<span class="string">"admin"</span>));</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><h2 id="七、开启远程访问"><a href="#七、开启远程访问" class="headerlink" title="七、开启远程访问"></a>七、开启远程访问</h2><p>首先登录到root用户下数据库，然后输入以下句子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> <span class="keyword">PRIVILEGES</span> <span class="keyword">ON</span> *.* <span class="keyword">TO</span> <span class="string">'root'</span>@<span class="string">'%'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'123456'</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> <span class="keyword">OPTION</span>;</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><p>其中‘root’可以替换成任何已创建的用户，‘123456’处是密码。<br>这样就可以远程访问了。</p><p>搬运自CSDN：<a href="https://blog.csdn.net/yueyue200830/article/details/96387164" target="_blank" rel="noopener">https://blog.csdn.net/yueyue200830/article/details/96387164</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;因为开发需求，在自己的CentOS 7服务器上远程链接数据库，搜索得知CentOS 7默认是MariaDB数据库而非MySQL。虽然安装MySQL也不是不可以，但是既然MariaDB和MySQL很像，那就直接上MariaDB吧。&lt;br&gt;安装教程是搜到的英文教程，主要是用来记录和帮助一些人翻译一下的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Database" scheme="https://yueyue200830.github.io/categories/Database/"/>
    
    
      <category term="Linux" scheme="https://yueyue200830.github.io/tags/Linux/"/>
    
      <category term="MariaDB" scheme="https://yueyue200830.github.io/tags/MariaDB/"/>
    
      <category term="Centos" scheme="https://yueyue200830.github.io/tags/Centos/"/>
    
  </entry>
  
</feed>
