<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Z Blog</title>
  
  <subtitle>Coding for Life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yueyue200830.github.io/"/>
  <updated>2025-04-19T15:52:28.000Z</updated>
  <id>https://yueyue200830.github.io/</id>
  
  <author>
    <name>yueyue200830</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Charles https抓包</title>
    <link href="https://yueyue200830.github.io/2025/04/19/Charles-https%E6%8A%93%E5%8C%85/"/>
    <id>https://yueyue200830.github.io/2025/04/19/Charles-https%E6%8A%93%E5%8C%85/</id>
    <published>2025-04-19T15:52:28.000Z</published>
    <updated>2025-04-19T15:52:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>好久没有用Charles总是不记得怎么做https的抓包，网上文档也比较杂，自己写一篇来记录一下。</p><p>Charles主要用途是用来抓取https请求，除了浏览器中一目了然的请求，软件/手机的请求就比较复杂无法被看见了，因此需要用抓包软件来看。</p><p>Charles进行https抓包的原理实际上是劫持，证书信任设计留了一个后门，支持通过客户端主动信任根证书，方便各种测试，不过企业内网证书设计看起来真的什么都看得到呢。</p><span id="more"></span><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>版本：Charles 5.0 + Win10 (Win11同理)</p><h2 id="Charles证书安装"><a href="#Charles证书安装" class="headerlink" title="Charles证书安装"></a>Charles证书安装</h2><p>Windows比较复杂的是安装证书，相比之下macOS简单很多</p><p>打开Charles，选择<strong>Help</strong> - <strong>SSL proxying</strong>，正常如果是macOS，<strong>Install Charles Root Certificate</strong>是可以使用的，但是Windows系统下会报错，显示“无效的公钥安全对象文件”，实际上需要手动下保存证书并且安装至系统中。<br>在<strong>Help</strong>选项中，选择<strong>Save Charles Root Certificate</strong>存储证书，建议不修改保存的位置，这个保存我的版本似乎有些问题，存储的文件夹永远是默认的目录。</p><img src="/2025/04/19/Charles-https%E6%8A%93%E5%8C%85/cert.png" class="" title="Cert1"><p>接着安装证书至系统，打开<strong>Microsoft管理控制台</strong>，可以通过<code>win + R</code>，输入<code>mmc</code>打开<br>选择<strong>文件</strong> - <strong>添加/删除管理单元</strong></p><img src="/2025/04/19/Charles-https%E6%8A%93%E5%8C%85/cert2.png" class="" title="Cert2"><p>打开弹窗后，选择<strong>证书</strong> - <strong>添加</strong></p><img src="/2025/04/19/Charles-https%E6%8A%93%E5%8C%85/cert3.png" class="" title="Cert3"><p>这时会弹出证书管理单元选择，一般选择<strong>我的用户账户</strong>就够用了</p><img src="/2025/04/19/Charles-https%E6%8A%93%E5%8C%85/cert4.png" class="" title="Cert4"><p>确认保存后，界面左侧会出现一个证书，选择<strong>受信任的根证书颁发机构</strong>，右键<strong>所有任务</strong> - <strong>导入</strong>，选择刚才保存的证书，就可以啦</p><img src="/2025/04/19/Charles-https%E6%8A%93%E5%8C%85/cert5.png" class="" title="Cert5"><p>这时，点击证书查看，可以看到Charles颁发的证书已经安装了</p><img src="/2025/04/19/Charles-https%E6%8A%93%E5%8C%85/cert6.png" class="" title="Cert6"><h2 id="Charles配置"><a href="#Charles配置" class="headerlink" title="Charles配置"></a>Charles配置</h2><p>证书的配置主要是让客户端请求信任Charles进行证书劫持，下一步是需要配置Charles进行实际的劫持操作。</p><h3 id="Proxy-settings"><a href="#Proxy-settings" class="headerlink" title="Proxy settings"></a>Proxy settings</h3><p>Proxy settings是Charles抓包的基础原理，它实际上是让电脑内的网络请求都转发到Charles的服务器内进行代理<br>目录打开<strong>Proxy</strong> - <strong>Proxy settings</strong>，确保开启了http proxy, socket proxy非必须</p><img src="/2025/04/19/Charles-https%E6%8A%93%E5%8C%85/proxy1.png" class="" title="Proxy1"><h3 id="SSL-proxying-setting"><a href="#SSL-proxying-setting" class="headerlink" title="SSL proxying setting"></a>SSL proxying setting</h3><p>抓包https必须开启这个，<strong>Proxy</strong> -  <strong>SSL proxying setting</strong>中配置对应的域名，我这里就偷懒用*匹配了所有网站。</p><img src="/2025/04/19/Charles-https%E6%8A%93%E5%8C%85/proxy2.png" class="" title="Proxy2"><p>配置完成后应该就可以看到https抓包了</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://zhuanlan.zhihu.com/p/32072269418">Charles抓包入门</a><br><a href="https://www.cnblogs.com/superhin/p/16244739.html">Charles抓包HTTPS设置</a><br><a href="https://www.cnblogs.com/Durant0420/p/14973354.html">charles抓包原理</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久没有用Charles总是不记得怎么做https的抓包，网上文档也比较杂，自己写一篇来记录一下。&lt;/p&gt;
&lt;p&gt;Charles主要用途是用来抓取https请求，除了浏览器中一目了然的请求，软件/手机的请求就比较复杂无法被看见了，因此需要用抓包软件来看。&lt;/p&gt;
&lt;p&gt;Charles进行https抓包的原理实际上是劫持，证书信任设计留了一个后门，支持通过客户端主动信任根证书，方便各种测试，不过企业内网证书设计看起来真的什么都看得到呢。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Others" scheme="https://yueyue200830.github.io/categories/Others/"/>
    
    
      <category term="Windows" scheme="https://yueyue200830.github.io/tags/Windows/"/>
    
      <category term="Charles" scheme="https://yueyue200830.github.io/tags/Charles/"/>
    
  </entry>
  
  <entry>
    <title>社招记录</title>
    <link href="https://yueyue200830.github.io/2024/11/24/%E7%A4%BE%E6%8B%9B%E8%AE%B0%E5%BD%95/"/>
    <id>https://yueyue200830.github.io/2024/11/24/%E7%A4%BE%E6%8B%9B%E8%AE%B0%E5%BD%95/</id>
    <published>2024-11-24T14:06:38.000Z</published>
    <updated>2024-11-24T14:06:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>从前司离职了，记录一下忙碌的半年。</p><p>今年的整体经济都不太好，肉眼可见hc都不多，而且经历的前司的工作量身心疲惫只想找一个稍微轻松一点的公司，目标就定在了上海外企，其实可选基本就不多了，陆陆续续投了面了挂了终于收到了一个不错的offer。</p><span id="more"></span><p>感受：社招真的贵在坚持，几乎每周或每两周都刷一下各个网站，有新hc就投，最后幸运的拿到了这个机会。</p><h1 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h1><p>今年三月碰巧看到狗家出了一波新的hc，奈何当时在外没时间准备，四月开始刷题，发现自己脑子已经转不过来了，拖到五一开始申请，但因为狗家开的大部分是安卓岗，陆陆续续投了好几个岗位，找了不同的人帮忙内推都被据了。8月的时候直接投了一个岗位倒是意外被hr联系进入了面试流程。狗家如果想要中文面试现在基本只有台湾的面试官了，难度应该比内地的好一些（内地都是ACM大佬），但比北美的难一些，思考了一下我的蹩脚英文还是选择了中文面。然而当时没好好准备，面了一道非常简单的recursive tree的题目，但面试官给了hint也不是特别对，导致没做出来（其实最后2分钟是想出来的，面试官没听懂）。于是费劲心思拿到的面试就这么被结束了，冷冻期半年。题外话最近狗家中国一个hc都没有，不知道是不是又有什么动作。</p><h1 id="Flexport"><a href="#Flexport" class="headerlink" title="Flexport"></a>Flexport</h1><p>五月碰巧flexport新阔扩了一个组，有不少hc，本着练手的想法投的简历（不过题外话一年多前投过一次hr一个月后给我发的消息），结果第二天还第三天就接到了hr电话聊了预期的package确认下一步。</p><p>这家公司面试流程还挺长的，hr没有网上说的ghost，加了微信可以协调时间。<br>前三面都是算法面，传统外企风格teams + hacker rank写题，记忆中好像是easy-medium；当时因为身体原因还delay了一次面试hr人也很好说话。面试体验面试官挺尊重面试者的，不过国内office还是深圳比较多一些，面试官都是深圳那边的，没有见到上海的面试官。聊下来感觉公司氛围还行，tech算是外企风格不会很新，但垂类 + 不是常用的coding语言还是有些担心的。<br>第四面和第五面是放在一轮的，一个是project deep dive一个是hiring manager（culture），hiring manager因为在北美被安排到了周六早七的面试，面试官是个在美国呆了很久的中国人，大概一半英文一半中文面完的。project deep dive对我来说是个大坑，因为之前工作偏数据，大概一半开发做数仓，项目深度在BE确实不算很深，大数据部分没有不太会包装导致面试官觉得项目经历太简单了。甚至在后期又重新加了一轮项目面还是被挂在这轮，最终只能给到swe1的职位，最后就拒了这个公司。</p><p>这家正好面的比较早，也是一个很好的机会让我反思前司的工作，已经很长时间没有成长且后端部分略简单了，于是更加坚定需要换个方向做一下。</p><h1 id="内部活水"><a href="#内部活水" class="headerlink" title="内部活水"></a>内部活水</h1><p>其实并没有非常不满意前司，也尝试看了前司一些内部的机会，上海+非中其实可选的也不是很多，当时也有聊过一个部门，和之前的问题一样做的事情太简单太数仓了，内部招人的要求也希望经历匹配度比较高。之后也就没怎么关注内部的机会了。</p><h1 id="Ebay"><a href="#Ebay" class="headerlink" title="Ebay"></a>Ebay</h1><p>Ebay junior的岗位不算多，且对经历匹配要求都比较高，给面试是一个意外，当时简历写了一句动词的spark，被对方理解为tech spark了，加上本身也不是做java开发的，面试官面完后非常失望，于是就被挂了。题外话当时为了这个面试背了好久的八股一句也没考，面试官说因为我的背景没有java所以就没考八股，也算是比较nice的。</p><h1 id="Paypal"><a href="#Paypal" class="headerlink" title="Paypal"></a>Paypal</h1><p>Paypal当时投的时候有那么几个hc吧但不多，因为不是java开发所以不在他们的优先考虑对象。大概投了一个多月hr突然联系，聊了一下薪资但因为pp能给的钱实在太少了，一不小心聊崩了，没有给到后续面试机会，自此不敢提任何“过分”的薪资要求了。</p><h1 id="Amazon"><a href="#Amazon" class="headerlink" title="Amazon"></a>Amazon</h1><p>Amazon中国真的是一个高贵的公司，如果从经历匹配角度来说亚麻的hc应该我经历最匹配的了，然而投了很多次都被秒拒，一点机会都不给我。难道就因为当年我拒绝了他的实习面试吗。。</p><h1 id="SAP"><a href="#SAP" class="headerlink" title="SAP"></a>SAP</h1><p>高贵的公司+1，投的第二天简历拒，原因不明，猜测内部坑。</p><h1 id="Apple"><a href="#Apple" class="headerlink" title="Apple"></a>Apple</h1><p>提一嘴apple是因为看了半年没一个能投的hc，上海整体还是偏硬件的一些团队，swe非常少且做ios实在不匹配。</p><h1 id="Booking"><a href="#Booking" class="headerlink" title="Booking"></a>Booking</h1><p>Booking碰巧在七月份的时候新开了一个组，有不少hc，投完后首先有个在线的coding，题目挺简单的，很快早就做完了。hr联系比较快，不过和pp一样先上来有个hr面，会需要讲英文，但估计因为他们写的是java并且是旅游垂类，我的背景应该不是匹配的那一类候选人，hr在七月底联系我后，9月初才二次联系我，还是因为又新开了一个组才被联系上的。<br>Booking面试比较特别，是两个面试官一起面同一个面试者，只要有一个面试官通过就可以进入后一轮，不过两个面试官的feedback最终都会看，并且会有横向对比。hr每一轮面试前都会讲解需要注意的事项和面试的侧重点，非常nice。<br>Booking一共有三轮面试，第一轮是算法（不过个人觉得是coding，谈不上algorithm），第二轮是系统设计，第三轮是culture fit，全英文面试。如果没有记错的话，前两轮在网上有类似的面经，可以参考。第一轮算法是基于booking业务的题目，但是非常坑的是这个没有什么复杂的算法逻辑，并且需要考虑corner case（比如input是负数这种真算法题不会出现的场景），所以我觉得更多的是coding考察，于是算法脑的我跳入了面试官挖的坑。第二轮系统设计也是booking的一个业务场景，确实要求从前端交互到后算数据存储的一个大的系统设计框架，之前做准备找gpt被坑了一笔，于是又回答出了出错了，还好后来有一些改正，但也免得不好（c端的交互设计确实需要好好学习一下）。第三轮culture fit就是普通的culture面，没有什么特别的问题。</p><h1 id="Microsoft"><a href="#Microsoft" class="headerlink" title="Microsoft"></a>Microsoft</h1><p>巨硬上海相比于苏州北京hc可以说少的可怜，基本上同一时间最多只有1-2个比较合适的岗位，查了一下记录从5月一共投了7个岗（挂一个开一个投一个状态），一开始找朋友内推也没有消息，后来因为内推太麻烦就放弃了，当中应该有3个岗是由联系的，有的是面试官联系有的是hr协调的时间。</p><h2 id="hc1"><a href="#hc1" class="headerlink" title="hc1"></a>hc1</h2><p>这次电面直接是manager面，巨硬每一面几乎都会考算法，且面试风格比较随机，这一次是给了一个比较古早的网站写的代码，高亮和格式都不太行，代码也不能直接run。由于团队偏coding开发一些，考了一个输入是代码的算法题，有点梦回编译原理，corner case没做好，挂了。</p><h2 id="hc2"><a href="#hc2" class="headerlink" title="hc2"></a>hc2</h2><p>这个面试官是swe2，考了反转链表和最长上升子序，大概两周后hr约的后续面试，我还没回复时间结果说招到合适的人了，把hc关了。。</p><h2 id="hc3"><a href="#hc3" class="headerlink" title="hc3"></a>hc3</h2><p>说实话这个hc有点开挂的感觉。电面又是manager，而且在我开免打扰的早上坚持不懈给我打了多个电话让我接到了面试电话，非常感谢manager的坚持。电面题目挺有趣的，一个动脑子的不复杂的coding题，还因为团队考了一个python语法。二面是算法题dp变形，特点是反着计算，结果我卡脑壳，全程面试官提醒才写完的代码，面试官还给我通过了太太太感谢他了。三面和四面因为团队合作关系是北美的面试官，一轮印度人英文面考了非常基础的限流器设计；中文面是北美的manager面，算法题不难，但感觉面试官不是特别满意我的背景，不过最后还是给过了。终面本来安排是大老板面，结果面试的时候大老板临时有事换成了隔壁老板面，还直接中文面换成英文面，当时没准备英文慌得不行，全程考culture还好还能瞎扯一些。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从前司离职了，记录一下忙碌的半年。&lt;/p&gt;
&lt;p&gt;今年的整体经济都不太好，肉眼可见hc都不多，而且经历的前司的工作量身心疲惫只想找一个稍微轻松一点的公司，目标就定在了上海外企，其实可选基本就不多了，陆陆续续投了面了挂了终于收到了一个不错的offer。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Others" scheme="https://yueyue200830.github.io/categories/Others/"/>
    
    
      <category term="面经" scheme="https://yueyue200830.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>威联通NAS使用docker-mailserver搭建邮件服务</title>
    <link href="https://yueyue200830.github.io/2023/11/27/%E5%A8%81%E8%81%94%E9%80%9ANAS%E6%90%AD%E5%BB%BA%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1/"/>
    <id>https://yueyue200830.github.io/2023/11/27/%E5%A8%81%E8%81%94%E9%80%9ANAS%E6%90%AD%E5%BB%BA%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1/</id>
    <published>2023-11-26T16:04:34.000Z</published>
    <updated>2023-11-26T16:04:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近入手了第一台NAS，考虑配置拓展入手了威联通，于是开始了捣腾QTS系统。威联通的通知中心会发送事件和警报通知给注册的设备，其中一种发送方式是邮件，需要通过SMTP服务连接一个邮件服务器，使用这个服务器的账户发送通知给指定的邮箱。其实简单点直接配置自己的邮箱服务就行，但我突然想尝试一下在NAS上搭一个邮件系统。威联通系统不像群晖有自带的邮件服务，需要自己去搭建，在搜索几个服务后选择了<a href="https://docker-mailserver.github.io/docker-mailserver/latest/">docker-mailserver</a>来搭建，这个镜像比较轻量级，可以简单的只搭建一个SMTP服务，对系统的要求比较低一些。</p><span id="more"></span><p>由于我没有自己的域名，而当前的需求只是发送邮件，所以这里的配置不涉及任何SSL配置，简单来说这个文章就是把最基本的容器跑起来的一个过程。</p><p>参考了多个文章之后（列在最后的参考文档，非常感谢几位作者的分享，第一次搭邮件系统好多都不懂），发现官方tutorial中<a href="https://docker-mailserver.github.io/docker-mailserver/edge/examples/tutorials/basic-installation/#using-dms-as-a-local-mail-relay-for-containers">Using DMS as a local mail relay for containers</a>是比较符合我的需求的，只搭建SMTP服务，不搭POP3 / IMAP。</p><h2 id="威联通Container-Station认识"><a href="#威联通Container-Station认识" class="headerlink" title="威联通Container Station认识"></a>威联通Container Station认识</h2><p>正好是到手第一次配置docker，也算是对这个定制化docker认识的一个过程，记录一些小发现：</p><ul><li>支持Docker Compose，但竟然是在Application中创建，第一次找了半天没找到</li><li>使用Container时，输入镜像后选择版本依赖hub.docker.com的访问，这个域名DNS污染了，需要手动解决下（顺便解决上这个网站的问题）</li><li>ssh进入后，可以完美使用docker命令，嫌页面麻烦的可以直接ssh操作，不过bash比较难用（还没成功使用zsh）</li><li>bash的vim版本低的可怜，relativenumber和color都不支持，实在是太难用了</li></ul><h2 id="服务搭建过程"><a href="#服务搭建过程" class="headerlink" title="服务搭建过程"></a>服务搭建过程</h2><h3 id="编写compose文件"><a href="#编写compose文件" class="headerlink" title="编写compose文件"></a>编写compose文件</h3><p>文件基本时照搬官方文档的，其实也没几行配置：<br>首先需要配置一个hostname，这里按喜好填写，但建议不要用常见的域名，不知道会不会被其他邮箱拦截；<br>ports只配置SMTP的端口，其实感觉甚至后两个不配都可能没事；<br>volume配置照抄官方配置，其实不是特别好因为是映射到了container的本地文件中，在QNAP中重新编译会删掉原本的本地文件，比较好的做法是用docker的volume，不过我也只是搭个账号就简单处理了。至于为什么要映射本地文件是为了保证容器重启后数据不会丢失；<br>环境变量中需要注意把SSL_TYPE删掉，这样默认SSL就是空，如果根据原本的配置会需要一个SSL证书，否则容器跑不起来。当然如果想要接收邮件证书是必须的；</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;1.0&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mailserver:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">ghcr.io/docker-mailserver/docker-mailserver:latest</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mailserver</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">mail.example.com</span> <span class="comment"># 千万记得换个域名，发送邮件给网易被拒绝了就是因为这个域名。。。</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;25:25&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;587:587&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;465:465&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./docker-data/dms/mail-data/:/var/mail/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./docker-data/dms/mail-state/:/var/mail-state/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./docker-data/dms/mail-logs/:/var/log/mail/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./docker-data/dms/config/:/tmp/docker-mailserver/</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime:ro</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ENABLE_FAIL2BAN=1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PERMIT_DOCKER=network</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SPOOF_PROTECTION=0</span></span><br><span class="line">    <span class="attr">cap_add:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">NET_ADMIN</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><p>然后把这个配置丢到Application中创建就行，它会自动创建并启动一个对应的容器。</p><h3 id="配置一个用户"><a href="#配置一个用户" class="headerlink" title="配置一个用户"></a>配置一个用户</h3><p>容器启动后，就会提示没有用户，需要创建一个用户（这里一个坑点是120s没有用户就会重启，不是很懂）<br>这时就需要ssh进入系统，跑下命令创建一个用户，这个操作很多文档都说要下载脚本跑，但实际上直接用docker里的脚本操作就行，以下命令是创建一个邮箱是admin@example.com密码是passwd123的一个账户。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -ti mailserver setup email add admin@example.com passwd123</span><br></pre></td></tr></table></figure><p>这个脚本运行后，就会发现docker中显示正常启动了。</p><h3 id="通知中心连接服务"><a href="#通知中心连接服务" class="headerlink" title="通知中心连接服务"></a>通知中心连接服务</h3><p>其实到这一步，邮件服务算是跑起来了，但是还有其他的坑我们晚点处理，现在可以尝试连接邮件服务了。在通知中心中添加SMTP服务，选择custom account，服务ip配置127.0.0.1，安全连接配置为None，输入用户名密码，就可以了。<br>创建后点击发送测试邮件，自己给自己发一封邮件，会发现有些日志，不过好像有点错误（也可能成功，我用example.com的域名能发送成功，用新的域名就是失败找不到域名）不过至少我们服务器能连接上了。<br>当然也可以尝试发送一封邮件给自己真实的邮箱，如果能发送成功，那恭喜你就配置完成了。不过我这边会有个postfix的报错<code>Host or domain name not found. Name service error for name=example.com</code></p><h3 id="处理域名问题"><a href="#处理域名问题" class="headerlink" title="处理域名问题"></a>处理域名问题</h3><p>上面这个postfix的服务解析问题，其实是因为dns配置错误导致的，通过互联网搜索找到了解法，可以修改<code>resolv.conf</code>配置postfix的dns解析。</p><p>首先进入容器，我这里ui界面的terminal不知道为什么没法用（还需要研究下），直接ssh到服务后运行docker命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mailserver /bin/bash</span><br></pre></td></tr></table></figure><p>可以找到配置文件路径在<code>/etc/resolv.conf</code>，使用cat看下默认的配置：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nameserver 127.0.0.11</span><br><span class="line">options ndots:0</span><br></pre></td></tr></table></figure></p><p>域名解析的服务器不知道为什么还在本地，需要修改成真实解析的dns地址。在docker文档上找了一圈没找到配置项，只能手动改这个配置了。结果尝试vim / vi竟然都不支持，可能作者为了精简吧，把编辑功能都删了，尝试apt install直接连不上。。还好这配置只有两行，最终用最傻的方法<code>&gt;</code>直接覆盖写入文件（不过好像在源文件后面append一行配置也可以）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先复制一份，虽然没什么用</span></span><br><span class="line"><span class="built_in">cp</span> resolv.conf resolv.conf.backup</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;nameserver 1.1.1.1&#x27;</span> &gt; resolv.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;options ndots:0&#x27;</span> &gt;&gt; resolv.conf</span><br></pre></td></tr></table></figure></p><p>然后用通知中心给自己的邮箱发送一份邮件，就能很愉快的接收到了，也可以从docker的日志看到一些信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Nov 27 02:07:05 xxx postfix/trivial-rewrite[16634]: warning: do not list domain my-mail.com in BOTH mydestination and virtual_mailbox_domains</span><br><span class="line">Nov 27 02:07:05 xxx postfix/smtpd[16548]: send-id-A: client=unknown[172.29.8.1]</span><br><span class="line">Nov 27 02:07:05 xxx postfix/cleanup[16635]: send-id-A: message-id=&lt;&gt;</span><br><span class="line">Nov 27 02:07:05 xxx opendkim[489]: send-id-A: no signing table match for &#x27;user@my-mail.com&#x27;</span><br><span class="line">Nov 27 02:07:05 xxx opendkim[489]: send-id-A: no signature data</span><br><span class="line">Nov 27 02:07:05 xxx postfix/qmgr[619]: send-id-A: from=&lt;user@my-mail.com&gt;, size=32379, nrcpt=1 (queue active)</span><br><span class="line">Nov 27 02:07:05 xxx postfix/smtpd[16548]: disconnect from unknown[172.29.8.1] ehlo=1 mail=1 rcpt=1 data=1 quit=1 commands=5</span><br><span class="line">Nov 27 02:07:05 xxx postfix/smtpd-amavis/smtpd[16638]: connect from localhost[127.0.0.1]</span><br><span class="line">Nov 27 02:07:05 xxx postfix/trivial-rewrite[16634]: warning: do not list domain my-mail.com in BOTH mydestination and virtual_mailbox_domains</span><br><span class="line">Nov 27 02:07:05 xxx postfix/smtpd-amavis/smtpd[16638]: receive-id-B: client=localhost[127.0.0.1]</span><br><span class="line">Nov 27 02:07:05 xxx postfix/cleanup[16635]: receive-id-B: message-id=&lt;this-is-id@my-mail.com&gt;</span><br><span class="line">Nov 27 02:07:05 xxx postfix/qmgr[619]: receive-id-B: from=&lt;user@my-mail.co&gt;, size=32604, nrcpt=1 (queue active)</span><br><span class="line">Nov 27 02:07:05 xxx amavis[687]: (00687-01) Passed CLEAN &#123;RelayedOpenRelay&#125;, [172.29.8.1]:59858 &lt;user@my-mail.co&gt; -&gt; &lt;my-real-email@email.com&gt;, Queue-ID: send-id-A, mail_id: xxxxx, Hits: -, size: 32345, queued_as: receive-id-B, 43 ms</span><br><span class="line">Nov 27 02:07:05 xxx postfix/smtp-amavis/smtp[16636]: send-id-A: to=&lt;my-real-email@email.com&gt;, relay=127.0.0.1[127.0.0.1]:10024, delay=0.07, delays=0.01/0.01/0/0.04, dsn=2.0.0, status=sent (250 2.0.0 from MTA(smtp:[127.0.0.1]:10025): 250 2.0.0 Ok: queued as receive-id-B)</span><br><span class="line">Nov 27 02:07:05 xxx postfix/qmgr[619]: send-id-A: removed</span><br><span class="line">Nov 27 02:07:06 xxx postfix/smtp[16639]: receive-id-B: to=&lt;my-real-email@email.com&gt;, relay=real-email-domian[xxx.xxx.xx.xx]:25, delay=0.89, delays=0/0.01/0.16/0.72, dsn=2.0.0, status=sent (250 Mail OK queued as some-id another-id)</span><br><span class="line">Nov 27 02:07:06 xxx postfix/qmgr[619]: receive-id-B: removed</span><br></pre></td></tr></table></figure><p>这样配置后，理论上我们还需要把这个配置做持久化映射，否则docker重启后又会发送失败。</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>整体只是一个简单的配置，但是因为不熟悉邮件系统 + 没有域名导致折腾了很久，很多配置在域名上的我以为是本地配的，找了半天。另外其实这个邮件系统有点鸡肋，算是一个小小的学习demo吧。<br>其实运行过程中还会发现有些问题，比如经常出现connect from unknown然后忽略连接，也不知道是局域网有问题还是什么情况；另外也有思考既然基本只用到postfix是不是找个postfix镜像就行，但好像还需要一个简单的db存储，针对这个docker也需要更深入研究下。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://www.treesir.pub/post/docker-deploy-mailserver/#%E7%8E%AF%E5%A2%83%E8%AF%B4%E6%98%8E">使用 Docker Compose 5分钟 部署 一台邮件服务器</a></li><li><a href="https://zhuanlan.zhihu.com/p/609639797">docker-mailserver 搭建邮件服务器</a></li><li><a href="https://wmwm.me/article/456048926181560320">搭建一个属于自己的域名邮箱｜Docker-Mailserver详细教程｜避坑指南</a></li><li><a href="https://lala.im/4224.html">使用docker-mailserver自建邮件服务器</a></li><li><a href="https://xinalin.com/91/selfhosted-mail-server-on-docker">Docker自建邮件服务器</a></li><li><a href="https://www.cnblogs.com/turingguo/p/15802479.html">使用docker-mailserver搭建轻量邮件服务器</a></li><li><a href="https://serverfault.com/questions/577134/postfix-host-or-domain-not-found">Postfix - Host or domain not found</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近入手了第一台NAS，考虑配置拓展入手了威联通，于是开始了捣腾QTS系统。威联通的通知中心会发送事件和警报通知给注册的设备，其中一种发送方式是邮件，需要通过SMTP服务连接一个邮件服务器，使用这个服务器的账户发送通知给指定的邮箱。其实简单点直接配置自己的邮箱服务就行，但我突然想尝试一下在NAS上搭一个邮件系统。威联通系统不像群晖有自带的邮件服务，需要自己去搭建，在搜索几个服务后选择了&lt;a href=&quot;https://docker-mailserver.github.io/docker-mailserver/latest/&quot;&gt;docker-mailserver&lt;/a&gt;来搭建，这个镜像比较轻量级，可以简单的只搭建一个SMTP服务，对系统的要求比较低一些。&lt;/p&gt;
    
    </summary>
    
    
      <category term="NAS" scheme="https://yueyue200830.github.io/categories/NAS/"/>
    
    
      <category term="NAS" scheme="https://yueyue200830.github.io/tags/NAS/"/>
    
      <category term="威联通" scheme="https://yueyue200830.github.io/tags/%E5%A8%81%E8%81%94%E9%80%9A/"/>
    
      <category term="SMTP" scheme="https://yueyue200830.github.io/tags/SMTP/"/>
    
  </entry>
  
  <entry>
    <title>Install and Config Neovim on WSL</title>
    <link href="https://yueyue200830.github.io/2023/06/24/Install-Neovim-on-WSL/"/>
    <id>https://yueyue200830.github.io/2023/06/24/Install-Neovim-on-WSL/</id>
    <published>2023-06-24T15:50:52.000Z</published>
    <updated>2023-06-24T15:50:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>开始学习vim一是觉得非常炫酷，二也是发现自己配置的vim在不同的机器下的迁移成本最低，非常方便适合多机器的开发场景，而如果选择用vim开发，就一定会选择全新的neovim（具体区别可参考：<a href="https://juejin.cn/post/7090094882588459045">Vim还是Neovim？为什么你应该使用后者？</a>。虽然我们大可用别人现成的配置，完成一个开箱即用的编辑器，但纯命令行的插件快捷键也会让人十分头大，那不如趁有时间，从头配置自己的编辑器。</p><span id="more"></span><p>这是我目前的<a href="https://github.com/yueyue200830/nvim">配置仓库</a>，欢迎交流。<em>注：仍在逐步配置中</em><br>强烈推荐chirs大佬的这个视频<a href="https://www.youtube.com/playlist?list=PLhoH5vyxr6Qq41NFL4GvhFp-WLd5xzIzZ">Neovim from Scratch</a>，虽然有些配置已经不是最新的了，但是可以学习如何自己去定制化配置，如何找到想要的配置。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="Neovim"><a href="#Neovim" class="headerlink" title="Neovim"></a>Neovim</h2><p>一开始安装的是v0.8的版本，但Ubuntu环境下只有0.6(apt) / 0.7(pip stable) / 0.9(pip unstable)，没法安装0.8，因此选择直接下载编译后的包进行安装，这样也方便后续升级管理。可以在<a href="https://github.com/neovim/neovim/releases/tag/stable">neovim github</a>上找到对应的安装包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/neovim/neovim/releases/download/stable/nvim-linux64.tar.gz</span><br><span class="line">sudo tar xzvf nvim-linux64.tar.gz -C /usr/local/</span><br><span class="line">/usr/local/nvim-linux64/bin/nvim</span><br></pre></td></tr></table></figure><p>如果安装顺利，输入第三行命令就可以正常打开nvim了，但现在的nvim应该什么都没，和vim一样的空空荡荡，最后记得把nvim加入path。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/local/nvim-linux64/bin</span><br></pre></td></tr></table></figure><h2 id="Nerd-Fonts"><a href="#Nerd-Fonts" class="headerlink" title="Nerd Fonts"></a>Nerd Fonts</h2><p>Nerd字体是含有大量的icon图标的字体，因为它不像网页或软件有icon库，所以需要集成在字体中，这样终端也可以改造得非常炫酷，可以在<a href="https://www.nerdfonts.com/font-downloads">网站</a>找到合适的字体下载，windows直接双击安装即可，然后在终端配置中修改字体，我选择的是hack nerd mono。</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>Neovim的配置文件在<code>~/.config/nvim</code>下，采用lua编写，默认会读取init.lua。我的配置结构是下面有一个lua的文件夹编写各种配置，init.lua会执行这些配置文件，所有的插件在plugin-lazy中安装，在plugin-config文件夹下配置插件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">├── init.lua</span><br><span class="line">├── lua</span><br><span class="line">│   ├── lsp</span><br><span class="line">│   │   └── &lt;lsp&gt;</span><br><span class="line">│   ├── plugin-config</span><br><span class="line">│   │   └── &lt;plugins&gt;</span><br><span class="line">│   ├── autocmd.lua</span><br><span class="line">│   ├── color.lua</span><br><span class="line">│   ├── keymappings.lua</span><br><span class="line">│   ├── plugin-lazy.lua</span><br><span class="line">│   └── setting.lua</span><br><span class="line">└── test</span><br><span class="line">    └── &lt;test_files&gt;</span><br></pre></td></tr></table></figure><h3 id="样式配置"><a href="#样式配置" class="headerlink" title="样式配置"></a>样式配置</h3><p>类似<code>.vimrc</code>的配置，可以开启一些比如行号、鼠标、缩进的配置，只是用lua重写了一遍，以下为我的配置，对应文件<code>setting.lua</code></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> options = &#123;</span><br><span class="line">  <span class="comment">-- clipboard = &#x27;unnamedplus&#x27;, --同步系统剪贴板</span></span><br><span class="line">  cmdheight = <span class="number">1</span>,</span><br><span class="line">  showmode = <span class="literal">true</span>,       <span class="comment">--右下角显示模式</span></span><br><span class="line">  showcmd = <span class="literal">true</span>,        <span class="comment">--右下角显示命令</span></span><br><span class="line">  conceallevel = <span class="number">0</span>,</span><br><span class="line">  mouse = <span class="string">&quot;a&quot;</span>,           <span class="comment">--允许鼠标</span></span><br><span class="line">  fileencoding = <span class="string">&quot;utf-8&quot;</span>, <span class="comment">--utf8编码</span></span><br><span class="line">  number = <span class="literal">true</span>,         <span class="comment">--行号</span></span><br><span class="line">  relativenumber = <span class="literal">true</span>, <span class="comment">--相对行号</span></span><br><span class="line">  signcolumn = <span class="string">&quot;yes&quot;</span>,    <span class="comment">--展示状态行</span></span><br><span class="line">  <span class="comment">-- search</span></span><br><span class="line">  ignorecase = <span class="literal">true</span>,     <span class="comment">--查找时忽略大小写</span></span><br><span class="line">  smartcase = <span class="literal">true</span>,      <span class="comment">--智能大小写</span></span><br><span class="line">  incsearch = <span class="literal">true</span>,      <span class="comment">-- 边输入边搜索</span></span><br><span class="line">  hlsearch = <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">-- indent</span></span><br><span class="line">  smartindent = <span class="literal">true</span>, <span class="comment">--智能缩进</span></span><br><span class="line">  cindent = <span class="literal">true</span>,    <span class="comment">-- Enables automatic C program indenting</span></span><br><span class="line">  autoindent = <span class="literal">true</span>, <span class="comment">--自动缩进</span></span><br><span class="line">  tabstop = <span class="number">4</span>,       <span class="comment">--Tab宽度</span></span><br><span class="line">  shiftwidth = <span class="number">4</span>,    <span class="comment">--每次Shift调整的缩进</span></span><br><span class="line">  softtabstop = <span class="number">2</span>,</span><br><span class="line">  showtabline = <span class="number">2</span>,</span><br><span class="line">  expandtab = <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">  scrolloff = <span class="number">5</span>,</span><br><span class="line">  sidescrolloff = <span class="number">5</span>,</span><br><span class="line">  <span class="built_in">wrap</span> = <span class="literal">false</span>,         <span class="comment">--不自动换行</span></span><br><span class="line">  termguicolors = <span class="literal">false</span>, <span class="comment">--如果安装第三方主题，必须设置为true</span></span><br><span class="line">  cursorline = <span class="literal">false</span>,   <span class="comment">--不高亮当前行</span></span><br><span class="line">  cursorcolumn = <span class="literal">false</span>, <span class="comment">--不高亮当前列</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">--应用上面配置</span></span><br><span class="line">vim.opt.shortmess:append(<span class="string">&quot;c&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(options) <span class="keyword">do</span></span><br><span class="line">  vim.opt[k] = v</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>自定义快捷键是必不可少的一个步骤，在使用以及配置插件的过程中我们也会根据需求去调整快捷键。在vim中有一个快捷键叫做leader，先按这个键再按其他的字母可以就可以组合出更多的快捷键。我将空格键设置为leader，并配置再normal模式下空格+q就可以退出页面。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim.g.mapleader = <span class="string">&quot; &quot;</span></span><br><span class="line">vim.g.maplocalleader = <span class="string">&quot; &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 保存本地变量</span></span><br><span class="line"><span class="keyword">local</span> map = vim.api.nvim_set_keymap</span><br><span class="line"><span class="keyword">local</span> opt = &#123; noremap = <span class="literal">true</span>, silent = <span class="literal">true</span> &#125;</span><br><span class="line"></span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;leader&gt;q&quot;</span>, <span class="string">&quot;:q&lt;CR&gt;&quot;</span>, opt)</span><br></pre></td></tr></table></figure><h2 id="剪贴板"><a href="#剪贴板" class="headerlink" title="剪贴板"></a>剪贴板</h2><p>想要windows和wsl的剪贴板互通可以安装<a href="https://github.com/equalsraf/win32yank">win32yank</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/equalsraf/win32yank/releases/download/v0.1.1/win32yank-x64.zip</span><br><span class="line">unzip win32yank.exe</span><br><span class="line"><span class="built_in">chmod</span> +x win32yank.exe</span><br><span class="line">sudo <span class="built_in">mv</span> win32yank.exe /usr/local/bin/</span><br></pre></td></tr></table></figure><p><strong>方案1</strong>：可以通过mapping设置与系统剪贴板的交互，这样我们可以控制什么时候和系统剪贴板交互<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;leader&gt;y&quot;</span>, <span class="string">&quot;\&quot;+y&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;v&quot;</span>, <span class="string">&quot;&lt;leader&gt;y&quot;</span>, <span class="string">&quot;\&quot;+y&quot;</span>, opt)</span><br><span class="line">map(<span class="string">&quot;n&quot;</span>, <span class="string">&quot;&lt;leader&gt;Y&quot;</span>, <span class="string">&quot;\&quot;+Y&quot;</span>, opt)</span><br></pre></td></tr></table></figure></p><p><strong>方案2</strong>：覆盖vim剪贴板的配置，直接复制到系统剪贴板中，但有个问题是发现这个配置后我的启动速度特别慢（见<em>测试启动速度</em>）<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vim.cmd(<span class="string">[[</span></span><br><span class="line"><span class="string">let g:clipboard = &#123;</span></span><br><span class="line"><span class="string">\   &#x27;name&#x27;: &#x27;win32yank-wsl&#x27;,</span></span><br><span class="line"><span class="string">\   &#x27;copy&#x27;: &#123;</span></span><br><span class="line"><span class="string">\      &#x27;+&#x27;: &#x27;win32yank.exe -i --crlf&#x27;,</span></span><br><span class="line"><span class="string">\      &#x27;*&#x27;: &#x27;win32yank.exe -i --crlf&#x27;,</span></span><br><span class="line"><span class="string">\    &#125;,</span></span><br><span class="line"><span class="string">\   &#x27;paste&#x27;: &#123;</span></span><br><span class="line"><span class="string">\      &#x27;+&#x27;: &#x27;win32yank.exe -o --lf&#x27;,</span></span><br><span class="line"><span class="string">\      &#x27;*&#x27;: &#x27;win32yank.exe -o --lf&#x27;,</span></span><br><span class="line"><span class="string">\   &#125;,</span></span><br><span class="line"><span class="string">\   &#x27;cache_enabled&#x27;: 0,</span></span><br><span class="line"><span class="string">\ &#125;</span></span><br><span class="line"><span class="string">]]</span>)</span><br></pre></td></tr></table></figure></p><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><h2 id="插件管理器"><a href="#插件管理器" class="headerlink" title="插件管理器"></a>插件管理器</h2><p>vim的插件管理器有很多个，现在最常见的有<a href="https://github.com/wbthomason/packer.nvim">packer</a>和<a href="https://github.com/folke/lazy.nvim">lazy</a>两个，如果跟着教程学大多都是用packer的，但lazy这两年冒得很快，现在大佬们的仓库都是lazy居多，而且lazy安装插件方式比较配置化，看着清爽一点，安装也更加可视化操作一些，支持配置插件的加载方式。</p><p>lazy的安装方式非常简单，直接在lua文件中写入以下代码，重启就行</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> lazypath = vim.fn.stdpath(<span class="string">&quot;data&quot;</span>) .. <span class="string">&quot;/lazy/lazy.nvim&quot;</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> vim.loop.fs_stat(lazypath) <span class="keyword">then</span></span><br><span class="line">  vim.fn.system(&#123;</span><br><span class="line">    <span class="string">&quot;git&quot;</span>,</span><br><span class="line">    <span class="string">&quot;clone&quot;</span>,</span><br><span class="line">    <span class="string">&quot;--filter=blob:none&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://github.com/folke/lazy.nvim.git&quot;</span>,</span><br><span class="line">    <span class="string">&quot;--branch=stable&quot;</span>, <span class="comment">-- latest stable release</span></span><br><span class="line">    lazypath,</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">vim.opt.rtp:prepend(lazypath)</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;lazy&quot;</span>).setup(&#123;&#125;)</span><br></pre></td></tr></table></figure><p>如果要新增一个插件，只需要在setup中加上这个仓库</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&quot;lazy&quot;</span>).setup(&#123;</span><br><span class="line">  &#123; <span class="string">&quot;folke/neoconf.nvim&quot;</span> &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Theme-主题"><a href="#Theme-主题" class="headerlink" title="Theme 主题"></a>Theme 主题</h2><p>工欲善其事必先利其器，编辑器好看了才有动力配置下去，因此第一步当然是安装主题插件啦，这里推荐两个常见主题<a href="https://github.com/navarasu/onedark.nvim">onedark</a>和<a href="https://github.com/shaunsingh/nord.nvim">nord</a></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&quot;lazy&quot;</span>).setup(&#123;</span><br><span class="line">  &#123; <span class="string">&quot;navarasu/onedark.nvim&quot;</span>, lazy = <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="string">&quot;shaunsingh/nord.nvim&quot;</span>,  lazy = <span class="literal">true</span> &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;onedark&#x27;</span>).<span class="built_in">load</span>()</span><br></pre></td></tr></table></figure><h2 id="Telescope-模糊搜索"><a href="#Telescope-模糊搜索" class="headerlink" title="Telescope 模糊搜索"></a>Telescope 模糊搜索</h2><p><a href="https://github.com/nvim-telescope/telescope.nvim#telescope-defaults">telescope.nvim</a>是一个模糊搜索的插件。这个插件需要注意默认搜索能力是基于<a href="https://github.com/BurntSushi/ripgrep">BurntSushi/ripgrep</a>的能力，所以一定要记得在机器上安装ripgrep，否则会发现空白的搜索结果（甚至不报错。。）</p><h2 id="Null-ls"><a href="#Null-ls" class="headerlink" title="Null-ls"></a>Null-ls</h2><p>null-ls的配置说明不是很完善，中文文档也不是很多，参考了这个视频<a href="https://www.youtube.com/watch?v=b7OguLuaYvE">Neovim - Null-LS Formatting, Linting &amp; more</a>，另外这篇英文文档也不错<a href="https://smarttech101.com/nvim-lsp-set-up-null-ls-for-beginners/">Nvim lsp: set up null-ls for beginners</a></p><h1 id="Debug-amp-Learning"><a href="#Debug-amp-Learning" class="headerlink" title="Debug &amp; Learning"></a>Debug &amp; Learning</h1><h2 id="测试启动速度"><a href="#测试启动速度" class="headerlink" title="测试启动速度"></a>测试启动速度</h2><p>在刚开始配置没多久，就发现nvim加载异常缓慢，比vscode开启时间还长，于是排查了一些导致启动速度慢的原因，在开启nvim的时候只需要加上<code>--startuptime</code>就可以记录启动日志了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvim --startuptime startup.log</span><br></pre></td></tr></table></figure><p>从日志中可以看到clipboard花费了700ms的时间来启动，虽然不知道是为什么，但为了解决启动速度的问题，我把这段配置去掉了，而且也有其他方法和剪贴板进行交互。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">times in msec</span><br><span class="line"> clock   self+sourced   self:  sourced script</span><br><span class="line"> clock   elapsed:              other lines</span><br><span class="line"></span><br><span class="line">000.011  000.011: --- NVIM STARTING ---</span><br><span class="line">000.184  000.173: event init</span><br><span class="line">000.266  000.082: early init</span><br><span class="line">000.451  000.186: locale set</span><br><span class="line">000.480  000.028: init first window</span><br><span class="line">...</span><br><span class="line">783.095  753.181  753.181: sourcing /usr/local/nvim/share/nvim/runtime/autoload/provider/clipboard.vim</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="Lua"><a href="#Lua" class="headerlink" title="Lua"></a>Lua</h2><p>为了更好地配置vim，需要学习lua语法学习和规范，因此在本地也安装了lua和luarocks，也参考了<a href="http://lua-users.org/wiki/LuaStyleGuide">LuaStyleGuide</a>配置了规范。</p><ol><li>缩进2个空格</li><li>字符串双引号</li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://www.youtube.com/playlist?list=PLhoH5vyxr6Qq41NFL4GvhFp-WLd5xzIzZ">Neovim from Scratch</a> 非常推荐这个教程，LunarVim的开发者做的视频，很清晰</li><li><a href="https://github.com/LunarVim/LunarVim">LunarVim</a> 参考了不少这个配置</li><li>Credit to 小伙伴五木</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开始学习vim一是觉得非常炫酷，二也是发现自己配置的vim在不同的机器下的迁移成本最低，非常方便适合多机器的开发场景，而如果选择用vim开发，就一定会选择全新的neovim（具体区别可参考：&lt;a href=&quot;https://juejin.cn/post/7090094882588459045&quot;&gt;Vim还是Neovim？为什么你应该使用后者？&lt;/a&gt;。虽然我们大可用别人现成的配置，完成一个开箱即用的编辑器，但纯命令行的插件快捷键也会让人十分头大，那不如趁有时间，从头配置自己的编辑器。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Vim" scheme="https://yueyue200830.github.io/categories/Vim/"/>
    
    
      <category term="Installation" scheme="https://yueyue200830.github.io/tags/Installation/"/>
    
      <category term="Vim" scheme="https://yueyue200830.github.io/tags/Vim/"/>
    
      <category term="Nvim" scheme="https://yueyue200830.github.io/tags/Nvim/"/>
    
      <category term="WSL" scheme="https://yueyue200830.github.io/tags/WSL/"/>
    
  </entry>
  
  <entry>
    <title>Install Python on Ubuntu</title>
    <link href="https://yueyue200830.github.io/2023/04/30/Install-Python-on-Ubuntu/"/>
    <id>https://yueyue200830.github.io/2023/04/30/Install-Python-on-Ubuntu/</id>
    <published>2023-04-30T07:41:03.000Z</published>
    <updated>2023-04-30T07:41:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>每次新的系统安装各个环境都得操作都得搜索一遍，不如自己写一篇找起来方便些。</p><span id="more"></span><p>由于apt的版本总是比较旧一些，所以我们需要自己编译源码进行安装，这样也比较方便管控版本。</p><h1 id="1-Prerequisite-安装编译环境"><a href="#1-Prerequisite-安装编译环境" class="headerlink" title="1. Prerequisite 安装编译环境"></a>1. Prerequisite 安装编译环境</h1><p>一定注意要执行一遍命令，之前以为电脑中安装了环境，导致后面编译出错，踩了不少坑</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install make build-essential zlib1g-dev libbz2-dev libssl-dev libncurses5-dev libsqlite3-dev libreadline-dev tk-dev libgdbm-dev libdb-dev libpcap-dev xz-utils libexpat1-dev liblzma-dev libffi-dev libc6-dev</span><br></pre></td></tr></table></figure><h1 id="2-Download-source-package-下载源码包"><a href="#2-Download-source-package-下载源码包" class="headerlink" title="2. Download source package 下载源码包"></a>2. Download source package 下载源码包</h1><p>我安装的是3.11.3，从<a href="https://www.python.org/downloads/">python官网</a>找到的下载链接，使用wget下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.11.3/Python-3.11.3.tgz</span><br></pre></td></tr></table></figure><h1 id="3-Decompress-解压"><a href="#3-Decompress-解压" class="headerlink" title="3. Decompress 解压"></a>3. Decompress 解压</h1><p>解压到默认文件夹即可，这个文件夹最后会删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -xzf Python-3.11.3.tgz</span><br><span class="line"><span class="built_in">cd</span> Python-3.11.3</span><br></pre></td></tr></table></figure><h1 id="4-Configuration-配置"><a href="#4-Configuration-配置" class="headerlink" title="4. Configuration 配置"></a>4. Configuration 配置</h1><p>如果不需要做额外配置，直接执行configure文件即可，可以用<code>--prefix</code>指定安装目录，默认路径是<code>/usr/local/lib/</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure><p>想要学习更多参数，可以用<code>./configure --help</code>了解更多，安装说明在<code>README.rst</code>文件中。</p><h1 id="5-Make-amp-Install-Make与安装"><a href="#5-Make-amp-Install-Make与安装" class="headerlink" title="5. Make &amp; Install Make与安装"></a>5. Make &amp; Install Make与安装</h1><p>首先需要make生成预安装的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure><p>然后按照官方说明是需要进行安装测试，不过网上大部分都直接install了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>测试通过后，就可以进行正式安装了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>如果没有报错，那么输入<code>python3.11</code>就可以运行了。</p><p><strong>如果遇到任何报错</strong>，请首先执行以下命令，安装相关依赖，并从第四步configuration开始重新安装。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make clean</span><br></pre></td></tr></table></figure><h1 id="6-Configure-default-version-配置默认版本"><a href="#6-Configure-default-version-配置默认版本" class="headerlink" title="6. Configure default version 配置默认版本"></a>6. Configure default version 配置默认版本</h1><p>如果电脑之前没有安装其他python版本，直接输入<code>python3</code>应该是可以直接运行的，但像我的ubuntu默认有一个python3.10，会发现默认的版本仍然是python3.10，我们首先可以看下python3的配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ <span class="built_in">which</span> python3</span><br><span class="line">/usr/bin/python3</span><br></pre></td></tr></table></figure><p>应该是这个软连接指向了旧的python3.10，那么我们删除这个软链重新生成一个就可以了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ sudo <span class="built_in">rm</span> /usr/bin/python3</span><br><span class="line">➜  ~ <span class="built_in">ln</span> -s /usr/local/bin/python3.11 /usr/bin/python3</span><br><span class="line">➜  ~ python3 --version</span><br><span class="line">Python 3.11.3</span><br></pre></td></tr></table></figure><p>同时也检查以下pip是否正常</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ pip3 --version</span><br><span class="line">pip 22.3.1 from /usr/local/lib/python3.11/site-packages/pip (python 3.11)</span><br></pre></td></tr></table></figure><h1 id="安装后导致的一些问题"><a href="#安装后导致的一些问题" class="headerlink" title="安装后导致的一些问题"></a>安装后导致的一些问题</h1><h2 id="apt-update报错"><a href="#apt-update报错" class="headerlink" title="apt update报错"></a>apt update报错</h2><p>ModuleNotFoundError: No module named ‘apt_pkg’</p><p>更新了python后运行<code>apt update</code>出现了<code>ModuleNotFoundError: No module named &#39;apt_pkg&#39;</code>，根据网上解答，重新安装<code>python3-apt</code>可以解决问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install --reinstall python3-apt</span><br></pre></td></tr></table></figure><p>如果还是不行，可以尝试卸载再安装，我的是卸载报错了，但是再执行了重新安装命令就成功了。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://zhuanlan.zhihu.com/p/149796622">Ubuntu安装Python3</a><br><a href="https://askubuntu.com/questions/480908/problem-with-update-manager-no-module-named-apt-pkg-in-ubuntu-13-10-having-i">Problem with update-manager</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每次新的系统安装各个环境都得操作都得搜索一遍，不如自己写一篇找起来方便些。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://yueyue200830.github.io/categories/Linux/"/>
    
    
      <category term="Installation" scheme="https://yueyue200830.github.io/tags/Installation/"/>
    
      <category term="Python" scheme="https://yueyue200830.github.io/tags/Python/"/>
    
      <category term="Ubuntu" scheme="https://yueyue200830.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Vim Custom Color Scheme 自定义配色</title>
    <link href="https://yueyue200830.github.io/2023/01/07/Vim-Custom-Color-Scheme-%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E8%89%B2/"/>
    <id>https://yueyue200830.github.io/2023/01/07/Vim-Custom-Color-Scheme-%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E8%89%B2/</id>
    <published>2023-01-07T11:01:48.000Z</published>
    <updated>2023-01-07T11:01:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>我也算是忠实的Windows用户了，装过Ubuntu和黑苹果最后还是觉得Windows用起来方便些，经过了各种的折腾也是比较习惯，偶尔的一些需求也可以用虚拟机代替，以及近两年还推出了WSL2也更加方便了开发使用；最近重新开始学习Vim也装上了WSL2，但发现Windows Terminal和vim的组合还是有很多问题需要解决的，由其默认的配色在某些状态下根本看不清字体，所以折腾了下自定义配色。</p><span id="more"></span><p>其实Vim是有很多自定义配色的插件，也尝试安装过，发现和Windows Terminal不兼容，配色非常奇怪，还是自己配色比较稳妥，如果是linux/mac用户完全可以在<a href="https://vimcolorschemes.com/">vimcolor</a>上选择一个喜欢的配色进行配置</p><p>我Windows Terminal采用的是魔改后的OneHalfDark配色（一开始以为vim的问题可以用配色解决，最后发现不行）</p><p>可以看下对比效果，左侧是git bash终端默认的配色，右侧是我改动后的配色，由其在visual模式下看起来舒服很多了</p><!-- ![before](before.png) ![after](after.png) --><div style="display: flex">  <img src="before.png" alt="before" width="45%"/>  <img src="after.png" alt="after" width="45%"/></div><h1 id="256色"><a href="#256色" class="headerlink" title="256色"></a>256色</h1><p>现在的terminal都支持256色了，vim的配置一般会用这个256个颜色，所以知道对应的几个颜色，这256色的配置是来源是terminal的scheme，可以通过<a href="https://gist.github.com/HaleTom/89ffe32783f89f403bba96bd7bcd1263">脚本</a>来查看terminal配置的256色；这是我的配置颜色</p><p><img src="color256.png" alt="color_256" width="50%"/></p><h1 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h1><h2 id="自带配置文件"><a href="#自带配置文件" class="headerlink" title="自带配置文件"></a>自带配置文件</h2><p>vim默认的配置路径在ubuntu下是<code>/usr/share/vim/vim82/</code>（这里vim82与vim版本有关），颜色的的配置文件夹在<code>colors</code>下，可以看到一些默认的配色，如果想要在原来的配置上魔改一下，可以从这里复制一份出来，默认的配置是<code>default.vim</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  colors <span class="built_in">ls</span></span><br><span class="line">blue.vim      delek.vim    evening.vim   lists        pablo.vim      shine.vim  torte.vim</span><br><span class="line">darkblue.vim  desert.vim   industry.vim  morning.vim  peachpuff.vim  slate.vim  zellner.vim</span><br><span class="line">default.vim   elflord.vim  koehler.vim   murphy.vim   ron.vim        tools</span><br></pre></td></tr></table></figure><p>自定义的颜色配置放置在<code>~/.vim/colors/</code>下，比如我的文件名叫做<code>diy.vim</code></p><h2 id="查看及切换配置"><a href="#查看及切换配置" class="headerlink" title="查看及切换配置"></a>查看及切换配置</h2><h3 id="切换配置文件配置"><a href="#切换配置文件配置" class="headerlink" title="切换配置文件配置"></a>切换配置文件配置</h3><p>在编辑器中，可以通过<code>:colorscheme</code> + <tab> 查看可用的配置</p><p><img src="colorscheme.png" alt="color_scheme" width="75%"></p><p>可以用<code>:hi</code>（highlight的简写）查看配置中的文件，也可以查看当前哪个配置有问题，方便修改</p><p><img src="highlight.png" alt="highlight" width="75%"></p><h3 id="配置文件及参数"><a href="#配置文件及参数" class="headerlink" title="配置文件及参数"></a>配置文件及参数</h3><h4 id="前置配置"><a href="#前置配置" class="headerlink" title="前置配置"></a>前置配置</h4><p>这些配置是从默认配置复制来的，放在配置文件最前面即可。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&quot; Remove all existing highlighting and set the defaults.</span></span><br><span class="line"><span class="comment">&quot; 清除所有的配置</span></span><br><span class="line"><span class="keyword">hi</span> clear</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Load the syntax highlighting defaults, if it&#x27;s enabled.</span></span><br><span class="line"><span class="comment">&quot; 加载高光</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">exists</span>(<span class="string">&quot;syntax_on&quot;</span>)</span><br><span class="line">  <span class="keyword">syntax</span> reset</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Set color scheme name</span></span><br><span class="line"><span class="comment">&quot; 设置配置文件名称</span></span><br><span class="line"><span class="keyword">let</span> colors_name = <span class="string">&quot;diy&quot;</span></span><br></pre></td></tr></table></figure><h4 id="高亮配置"><a href="#高亮配置" class="headerlink" title="高亮配置"></a>高亮配置</h4><p>在vim的配置中，针对不同的样式有不同的高亮方案，最终形成了一个有高亮的vim编辑器，常见的配置有以下三种：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&quot; Color configuration to a style</span></span><br><span class="line"><span class="keyword">hi</span> Folded ctermfg=<span class="number">14</span> ctermbg=<span class="number">242</span> guifg=DarkCyan guibg=LightGrey term=standout</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Set the style without extra highlight</span></span><br><span class="line">LineNrAbove    xxx cleared</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Set a style same as another style</span></span><br><span class="line">CursorLineSign xxx links <span class="keyword">to</span> SignColumn</span><br></pre></td></tr></table></figure><p>我们一般只需要修改第一种实际带有颜色的配置即可，它的写法如下：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">hi</span> <span class="symbol">&lt;style_name&gt;</span> ctermfg=<span class="symbol">&lt;font_color&gt;</span> ctermbg=<span class="symbol">&lt;background_color&gt;</span> guifg=<span class="symbol">&lt;font_color&gt;</span> guibg=<span class="symbol">&lt;background_color&gt;</span> term=<span class="symbol">&lt;text_style&gt;</span> <span class="keyword">gui</span>=<span class="symbol">&lt;text_style&gt;</span> cterm=<span class="symbol">&lt;text_style&gt;</span></span><br></pre></td></tr></table></figure></p><p>第一个是样式名称，我们可以通过<code>:hi</code>查看想要配置的样式;</p><p>后面的配置从范围上可以分为：</p><ul><li>针对彩色终端（color terminal）的配置：<code>ctermfg</code>，<code>ctermbg</code>和<code>cterm</code></li><li>针对gui的配置：<code>guifg</code>，<code>guibg</code>和<code>gui</code></li><li>针对常规终端：<code>term</code>；因为常规终端是黑白配色的，所以没有颜色配置</li></ul><p>从配置样式上可以分为：</p><ul><li>字体颜色：<code>ctermfg</code>，<code>guifg</code></li><li>背景颜色：<code>ctermbg</code>，<code>guibg</code></li><li>字体样式：<code>cterm</code>，<code>gui</code>，<code>term</code></li></ul><p>我是在终端配置的，也就是只需要配置<code>ctermfg</code>，<code>ctermbg</code>和<code>cterm</code>，但为了防止修改修改导致以后使用gui显示不正常，我会一同配置gui的颜色；如果不需要覆盖某种配置（比如不需要背景色），就不需要配置这个参数<br>Terminal和GUI配置的最大区别是terminal只可以用256色，但是GUI可以用RGB颜色来配置（更多的颜色选择），在配置terminal时我们可以对照前面提到的256色卡来判断颜色的选择。</p><p>在字体颜色的配置上，我们常用0-15（终端内配置的色彩） / 232-255（灰度）进行配置，比如<code>ctermfg=11</code>配置字体颜色为浅黄色</p><p>字体样式有以下选择：</p><ul><li>bold</li><li>underline</li><li>undercurl    <em>not always available, only available in GUI 一般仅在GUI中有效</em></li><li>reverse</li><li>inverse        <em>same as reverse</em></li><li>italic</li><li>standout</li><li>NONE        <em>no attributes used (used to reset it)</em></li></ul><p>以下这个配置，可以看到它设置了terminal和GUI字体颜色是黄色，在GUI和普通黑白终端中字体加粗，在颜色终端中是下划线<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">hi</span> CursorLineNr ctermfg=<span class="number">11</span> guifg=Yellow <span class="keyword">gui</span>=bold term=bold cterm=underline</span><br></pre></td></tr></table></figure></p><p>在我们能看懂配置后，就可以在原有的配置上进行魔改，设置成自己喜欢的颜色</p><h1 id="我的配置"><a href="#我的配置" class="headerlink" title="我的配置"></a>我的配置</h1><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&quot; Diy Vim color file for Windows Terminal with One Dark</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">hi</span> clear Normal</span><br><span class="line"><span class="keyword">set</span> bg&amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Remove all existing highlighting and set the defaults.</span></span><br><span class="line"><span class="keyword">hi</span> clear</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; Load the syntax highlighting defaults, if it&#x27;s enabled.</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">exists</span>(<span class="string">&quot;syntax_on&quot;</span>)</span><br><span class="line">  <span class="keyword">syntax</span> reset</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> colors_name = <span class="string">&quot;diy&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">hi</span> LineNr       ctermfg=<span class="number">11</span> guifg=Yellow cterm=none</span><br><span class="line"><span class="keyword">hi</span> CursorLineNr ctermfg=<span class="number">11</span> guifg=Yellow <span class="keyword">gui</span>=bold term=bold cterm=underline</span><br><span class="line"><span class="keyword">hi</span> Search       ctermfg=<span class="number">8</span> ctermbg=<span class="number">11</span> guifg=Black guibg=Yellow term=<span class="built_in">reverse</span></span><br><span class="line"><span class="keyword">hi</span> Statement    ctermfg=<span class="number">11</span> guifg=Yellow <span class="keyword">gui</span>=bold term=bold</span><br><span class="line"><span class="keyword">hi</span> SignColumn   ctermfg=<span class="number">14</span> ctermbg=<span class="number">242</span> guifg=Cyan guibg=Grey term=standout</span><br><span class="line"><span class="keyword">hi</span> FoldColumn   ctermfg=<span class="number">14</span> ctermbg=<span class="number">242</span> guifg=Cyan guibg=Grey term=standout</span><br><span class="line"><span class="keyword">hi</span> Folded       ctermfg=<span class="number">14</span> ctermbg=<span class="number">242</span> guifg=DarkCyan guibg=LightGrey term=standout</span><br><span class="line"><span class="keyword">hi</span> Visual       ctermbg=<span class="number">242</span> guibg=LightGrey term=<span class="built_in">reverse</span></span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="https://ithelp.ithome.com.tw/articles/10271969">Day 12：vim 配色方案</a><br><a href="https://zhuanlan.zhihu.com/p/20718108">如何编写属于自己的Vim主题</a><br><a href="https://alvinalexander.com/linux/vi-vim-editor-color-scheme-syntax/">How to control/configure vim colors</a><br><a href="https://blog.51cto.com/oeasy/3582938">oeasy教您玩转vim - 24 - 自定颜色</a><br><a href="https://vimdoc.sourceforge.net/htmldoc/syntax.html">Vim Doc - Syntax</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我也算是忠实的Windows用户了，装过Ubuntu和黑苹果最后还是觉得Windows用起来方便些，经过了各种的折腾也是比较习惯，偶尔的一些需求也可以用虚拟机代替，以及近两年还推出了WSL2也更加方便了开发使用；最近重新开始学习Vim也装上了WSL2，但发现Windows Terminal和vim的组合还是有很多问题需要解决的，由其默认的配色在某些状态下根本看不清字体，所以折腾了下自定义配色。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Vim" scheme="https://yueyue200830.github.io/categories/Vim/"/>
    
    
      <category term="Windows" scheme="https://yueyue200830.github.io/tags/Windows/"/>
    
      <category term="Vim" scheme="https://yueyue200830.github.io/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-Next升级记录</title>
    <link href="https://yueyue200830.github.io/2023/01/01/Hexo%E5%8D%87%E7%BA%A7%E8%AE%B0%E5%BD%95/"/>
    <id>https://yueyue200830.github.io/2023/01/01/Hexo%E5%8D%87%E7%BA%A7%E8%AE%B0%E5%BD%95/</id>
    <published>2023-01-01T13:53:32.000Z</published>
    <updated>2023-01-01T13:53:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>好久没更新博客了，回想起这还是20年搭的博客，强迫症选手想升级下相关组件，需要升级的有Node.js, Hexo和Next。</p><span id="more"></span><h1 id="升级Hexo"><a href="#升级Hexo" class="headerlink" title="升级Hexo"></a>升级Hexo</h1><p>升级Hexo只需要在<code>package.json</code>配置hexo的版本号，然后再install更新即可<code>yarn install</code></p><p>比如当前hexo的最新版本是6.3，配置<code>&quot;hexo&quot;: &quot;^6.3.0&quot;</code></p><h1 id="升级Node-js"><a href="#升级Node-js" class="headerlink" title="升级Node.js"></a>升级Node.js</h1><p>尝试把nodejs升级到18，遇到了几个问题，网上如果中文搜索到大多都是让退回12，这种治标不治本的解决方案当然不可以接受，不过还好nodejs14出现很久了，其实相关问题都有解决方案</p><h2 id="Node-js-14以上循环依赖错误"><a href="#Node-js-14以上循环依赖错误" class="headerlink" title="Node.js 14以上循环依赖错误"></a>Node.js 14以上循环依赖错误</h2><p>报错如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(node:16596) Warning: Accessing non-existent property <span class="string">&#x27;lineno&#x27;</span> of module exports inside circular dependency</span><br><span class="line">(node:16596) Warning: Accessing non-existent property <span class="string">&#x27;column&#x27;</span> of module exports inside circular dependency</span><br><span class="line">(node:16596) Warning: Accessing non-existent property <span class="string">&#x27;filename&#x27;</span> of module exports inside circular dependency</span><br><span class="line">(node:16596) Warning: Accessing non-existent property <span class="string">&#x27;lineno&#x27;</span> of module exports inside circular dependency</span><br><span class="line">(node:16596) Warning: Accessing non-existent property <span class="string">&#x27;column&#x27;</span> of module exports inside circular dependency</span><br><span class="line">(node:16596) Warning: Accessing non-existent property <span class="string">&#x27;filename&#x27;</span> of module exports inside circular dependency</span><br></pre></td></tr></table></figure></p><p>参考了<a href="https://www.haoyizebo.com/posts/710984d0/">解决 Hexo 在使用 Node.js 14</a>，应该是stylus导致的问题，可以利用npx分析能力：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx cross-env NODE_OPTIONS=<span class="string">&quot;--trace-warnings&quot;</span> hexo s</span><br></pre></td></tr></table></figure><h2 id="Node-js-18出现Database-load-failed"><a href="#Node-js-18出现Database-load-failed" class="headerlink" title="Node.js 18出现Database load failed"></a>Node.js 18出现Database load failed</h2><p>错误信息：<code>Database load failed. Deleting database.</code></p><p>在Github上搜到的一个issue：<a href="https://github.com/hexojs/hexo/issues/5022">Database load failed on Node 18.6.0</a>，是由于<code>warehouse</code>低版本导致的一个错误，需要把升级到<code>4.0.2</code>以上，因此在<code>package.json</code>中配置最低版本号（注意resolutions只针对yarn生效）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;resolutions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;warehouse&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.0.2&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Deploy是出现类型错误"><a href="#Deploy是出现类型错误" class="headerlink" title="Deploy是出现类型错误"></a>Deploy是出现类型错误</h2><p>运行命令<code>hexo d -g</code>时，出现如下错误信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">TypeError [ERR_INVALID_ARG_TYPE]: The <span class="string">&quot;mode&quot;</span> argument must be <span class="built_in">integer</span>. Received an instance of Object</span><br><span class="line">    at copyFile (node:fs:2840:10)</span><br><span class="line">    at tryCatcher (&lt;path&gt;\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at ret (<span class="built_in">eval</span> at makeNodePromisifiedEval (&lt;path&gt;\npm\node_modules\hexo-cli\node_modules\bluebird\js\release\promisify.js:184:12), &lt;anonymous&gt;:13:39)</span><br><span class="line">    at &lt;path&gt;\node_modules\hexo-deployer-git\node_modules\hexo-fs\lib\fs.js:144:39</span><br><span class="line">    at tryCatcher (&lt;path&gt;\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at Promise._settlePromiseFromHandler (&lt;path&gt;\node_modules\bluebird\js\release\promise.js:547:31)</span><br><span class="line">    at Promise._settlePromise (&lt;path&gt;\node_modules\bluebird\js\release\promise.js:604:18)</span><br><span class="line">    at Promise._settlePromise0 (&lt;path&gt;\node_modules\bluebird\js\release\promise.js:649:10)</span><br><span class="line">    at Promise._settlePromises (&lt;path&gt;\node_modules\bluebird\js\release\promise.js:729:18)</span><br><span class="line">    at Promise._fulfill (&lt;path&gt;\node_modules\bluebird\js\release\promise.js:673:18)</span><br><span class="line">    at Promise._resolveCallback (&lt;path&gt;\node_modules\bluebird\js\release\promise.js:466:57)</span><br><span class="line">    at Promise._settlePromiseFromHandler (&lt;path&gt;\node_modules\bluebird\js\release\promise.js:559:17)</span><br><span class="line">    at Promise._settlePromise (&lt;path&gt;\node_modules\bluebird\js\release\promise.js:604:18)</span><br><span class="line">    at Promise._settlePromise0 (&lt;path&gt;\node_modules\bluebird\js\release\promise.js:649:10)</span><br><span class="line">    at Promise._settlePromises (&lt;path&gt;\node_modules\bluebird\js\release\promise.js:729:18)</span><br><span class="line">    at Promise._fulfill (&lt;path&gt;\node_modules\bluebird\js\release\promise.js:673:18)</span><br><span class="line">    at Promise._resolveCallback (&lt;path&gt;\node_modules\bluebird\js\release\promise.js:466:57)</span><br><span class="line">    at Promise._settlePromiseFromHandler (&lt;path&gt;\node_modules\bluebird\js\release\promise.js:559:17)</span><br><span class="line">    at Promise._settlePromise (&lt;path&gt;\node_modules\bluebird\js\release\promise.js:604:18)</span><br><span class="line">    at Promise._settlePromise0 (&lt;path&gt;\node_modules\bluebird\js\release\promise.js:649:10)</span><br><span class="line">    at Promise._settlePromises (&lt;path&gt;\node_modules\bluebird\js\release\promise.js:729:18)</span><br><span class="line">    at Promise._fulfill (&lt;path&gt;\node_modules\bluebird\js\release\promise.js:673:18)</span><br></pre></td></tr></table></figure><p>找到一个<a href="https://github.com/hexojs/hexo/issues/4281">issue</a>，在最后yoshinorin的解答是有效的，原因是hexo-fs的版本不兼容，需要至少升级至2.0.1才可以，同上一个问题，设置版本<code>&quot;hexo-fs&quot;: &quot;^2.0.1&quot;</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久没更新博客了，回想起这还是20年搭的博客，强迫症选手想升级下相关组件，需要升级的有Node.js, Hexo和Next。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="https://yueyue200830.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://yueyue200830.github.io/tags/Hexo/"/>
    
      <category term="Nodejs" scheme="https://yueyue200830.github.io/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Google Foo Bar挑战</title>
    <link href="https://yueyue200830.github.io/2022/04/30/Google-Foo-Bar%E6%8C%91%E6%88%98/"/>
    <id>https://yueyue200830.github.io/2022/04/30/Google-Foo-Bar%E6%8C%91%E6%88%98/</id>
    <published>2022-04-30T08:42:17.000Z</published>
    <updated>2022-04-30T08:42:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>非常意外得在一次技术搜索中跳出了foo bar参赛的页面，曾听闻过这是Google的一个特殊招聘渠道，不过感觉近几年这个挑战被宣传后更多得只是一个有趣的挑战，近几年也没见到有人通过这个参与面试了。</p><span id="more"></span><p>Foo Bar一共有5个level的题目，每个level有一个或多个题目，随着level提高，题目的难度也会提高，每个题目都有限制的答题时间，但最短的也有7天，所以可以给答题者足够的思考时间。<br>题目一共可以用两种语言类回答，Java和Python，因为近期用Python更多些以及Python写起来也更简洁些，所以题解都是用的Python。</p><p>Foo Bar类似Google的其他比赛，题目都会有很多的包装，需要阅读理解，个人还是比较欣赏这种没法完全背解答的题目。<br>另一个比较与众不同的是，这个挑战虽然是一个网页，但全程需要使用命令行进行测试提交挑战，只有在编写代码时是一个web端的编辑器。</p><img src="/2022/04/30/Google-Foo-Bar%E6%8C%91%E6%88%98/screenshot.png" class="" title="foo-bar页面截图"><h1 id="Level-1"><a href="#Level-1" class="headerlink" title="Level 1"></a>Level 1</h1><p>level 1只有一题，一开始题目没有复制出来，只有个截图看下吧</p><h2 id="Level-1-1"><a href="#Level-1-1" class="headerlink" title="Level 1-1"></a>Level 1-1</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><img src="/2022/04/30/Google-Foo-Bar%E6%8C%91%E6%88%98/level-1.png" class="" title="level-1题目"><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>第一题还是非常简单的，做一个字符串的转换就可以了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">x</span>):</span><br><span class="line">    s = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">        a = x[i]</span><br><span class="line">        <span class="keyword">if</span> a &gt;= <span class="string">&#x27;a&#x27;</span> <span class="keyword">and</span> a &lt;= <span class="string">&#x27;z&#x27;</span>:</span><br><span class="line">            a = <span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) + <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>) - <span class="built_in">ord</span>(a))</span><br><span class="line">        s += a</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure><p>代码通过后会有这么一个可爱的图案</p><img src="/2022/04/30/Google-Foo-Bar%E6%8C%91%E6%88%98/submission.png" class="" title="过关截图"><h1 id="Level-2"><a href="#Level-2" class="headerlink" title="Level 2"></a>Level 2</h1><p>level 2有两题，题目总体还是比较简单的</p><h2 id="Level-2-1"><a href="#Level-2-1" class="headerlink" title="Level 2-1"></a>Level 2-1</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><blockquote><p>Please Pass the Coded Messages</p><p>You need to pass a message to the bunny workers, but to avoid detection, the code you agreed to use is… obscure, to say the least. The bunnies are given food on standard-issue plates that are stamped with the numbers 0-9 for easier sorting, and you need to combine sets of plates to create the numbers in the code. The signal that a number is part of the code is that it is divisible by 3. You can do smaller numbers like 15 and 45 easily, but bigger numbers like 144 and 414 are a little trickier. Write a program to help yourself quickly create large numbers for use in the code, given a limited number of plates to work with.</p><p>You have L, a list containing some digits (0 to 9). Write a function solution(L) which finds the largest number that can be made from some or all of these digits and is divisible by 3. If it is not possible to make such a number, return 0 as the solution. L will contain anywhere from 1 to 9 digits.  The same digit may appear multiple times in the list, but each element in the list may only be used once.</p></blockquote><h3 id="测试样例"><a href="#测试样例" class="headerlink" title="测试样例"></a>测试样例</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">Solution.solution(&#123;3, 1, 4, 1&#125;)</span><br><span class="line">Output:</span><br><span class="line"><span class="code">    4311</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">Input:</span><br><span class="line">Solution.solution(&#123;3, 1, 4, 1, 5, 9&#125;)</span><br><span class="line">Output:</span><br><span class="line"><span class="code">    94311</span></span><br></pre></td></tr></table></figure><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>题目整体可以分为两步，1：把数字从大到小排序；2：去掉几个数（0-2个数）是的数字之和模3余0。<br>关于第二步，很明显去掉一个字符会大于去掉两个字符，且去掉的数字越小越好，所以依次尝试这两种情况是否能满足3的倍数即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">l</span>):</span><br><span class="line">    x = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">    </span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">        x[i] += <span class="number">1</span></span><br><span class="line">        s += i</span><br><span class="line">    diff = s % <span class="number">3</span></span><br><span class="line">    <span class="keyword">if</span> diff != <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># cut 1 char</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            <span class="keyword">if</span> x[i] &gt; <span class="number">0</span> <span class="keyword">and</span> i % <span class="number">3</span> == diff:</span><br><span class="line">                x[i] -= <span class="number">1</span></span><br><span class="line">                diff = <span class="number">0</span>  <span class="comment"># set to zero</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> diff != <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># cut 2 char</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">                <span class="keyword">if</span> x[i] &gt; <span class="number">0</span>:</span><br><span class="line">                    x[i] -= <span class="number">1</span></span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">                        <span class="keyword">if</span> x[j] &gt; <span class="number">0</span> <span class="keyword">and</span> (i + j) % <span class="number">3</span> == diff:</span><br><span class="line">                            x[j] -= <span class="number">1</span></span><br><span class="line">                            diff = <span class="number">0</span></span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> diff == <span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    x[i] += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span> diff != <span class="number">0</span>:</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">while</span> x[i] &gt; <span class="number">0</span>:</span><br><span class="line">            result = result * <span class="number">10</span> + i</span><br><span class="line">            x[i] -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Level-2-2"><a href="#Level-2-2" class="headerlink" title="Level 2-2"></a>Level 2-2</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><blockquote><p>Power Hungry</p><p>Commander Lambda’s space station is HUGE. And huge space stations take a LOT of power. Huge space stations with doomsday devices take even more power. To help meet the station’s power needs, Commander Lambda has installed solar panels on the station’s outer surface. But the station sits in the middle of a quasar quantum flux field, which wreaks havoc on the solar panels. You and your team of henchmen have been assigned to repair the solar panels, but you’d rather not take down all of the panels at once if you can help it, since they do help power the space station and all!</p><p>You need to figure out which sets of panels in any given array you can take offline to repair while still maintaining the maximum amount of power output per array, and to do THAT, you’ll first need to figure out what the maximum output of each array actually is. Write a function solution(xs) that takes a list of integers representing the power output levels of each panel in an array, and returns the maximum product of some non-empty subset of those numbers. So for example, if an array contained panels with power output levels of [2, -3, 1, 0, -5], then the maximum product would be found by taking the subset: xs[0] = 2, xs[1] = -3, xs[4] = -5, giving the product 2*(-3)*(-5) = 30.  So solution([2,-3,1,0,-5]) will be “30”.</p><p>Each array of solar panels contains at least 1 and no more than 50 panels, and each panel will have a power output level whose absolute value is no greater than 1000 (some panels are malfunctioning so badly that they’re draining energy, but you know a trick with the panels’ wave stabilizer that lets you combine two negative-output panels to produce the positive output of the multiple of their power values). The final products may be very large, so give the solution as a string representation of the number.</p></blockquote><h3 id="测试样例-1"><a href="#测试样例-1" class="headerlink" title="测试样例"></a>测试样例</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">solution.solution([2, 0, 2, 2, 0])</span><br><span class="line">Output:</span><br><span class="line"><span class="code">    8</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">Input:</span><br><span class="line">solution.solution([-2, -3, 4, -5])</span><br><span class="line">Output:</span><br><span class="line"><span class="code">    60</span></span><br></pre></td></tr></table></figure><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>求这些数的乘积之和的最大值，对于正数直接相乘即可；对于负数需要选取偶数个相乘；对于0在只有一个负数的时候会选择。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">xs</span>):</span><br><span class="line">    result = <span class="number">1</span></span><br><span class="line">    negative = []</span><br><span class="line">    p = <span class="number">0</span> <span class="comment"># positive count</span></span><br><span class="line">    n = <span class="number">0</span> <span class="comment"># negative count</span></span><br><span class="line">    zero = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xs:</span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="number">0</span>:</span><br><span class="line">            result *= i</span><br><span class="line">            p += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> i &lt; <span class="number">0</span>:</span><br><span class="line">            negative.append(i)</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            zero += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> p == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">            result = <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> n == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> zero != <span class="number">0</span>:</span><br><span class="line">                result = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result = negative[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    negative.sort()</span><br><span class="line">    l = <span class="built_in">len</span>(negative)</span><br><span class="line">    <span class="keyword">if</span> l % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">        l -= <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l):</span><br><span class="line">        result *= negative[i]</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(result)</span><br></pre></td></tr></table></figure><h1 id="Level-3"><a href="#Level-3" class="headerlink" title="Level 3"></a>Level 3</h1><p>level 3中后两题感觉比较简单，但3-1卡了我很久，感觉逻辑非常绕</p><h2 id="Level-3-1"><a href="#Level-3-1" class="headerlink" title="Level 3-1"></a>Level 3-1</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><blockquote><p>Doomsday Fuel</p><p>Making fuel for the LAMBCHOP’s reactor core is a tricky process because of the exotic matter involved. It starts as raw ore, then during processing, begins randomly changing between forms, eventually reaching a stable form. There may be multiple stable forms that a sample could ultimately reach, not all of which are useful as fuel. </p><p>Commander Lambda has tasked you to help the scientists increase fuel creation efficiency by predicting the end state of a given ore sample. You have carefully studied the different structures that the ore can take and which transitions it undergoes. It appears that, while random, the probability of each structure transforming is fixed. That is, each time the ore is in 1 state, it has the same probabilities of entering the next state (which might be the same state).  You have recorded the observed transitions in a matrix. The others in the lab have hypothesized more exotic forms that the ore can become, but you haven’t seen all of them.</p><p>Write a function solution(m) that takes an array of array of nonnegative ints representing how many times that state has gone to the next state and return an array of ints for each terminal state giving the exact probabilities of each terminal state, represented as the numerator for each state, then the denominator for all of them at the end and in simplest form. The matrix is at most 10 by 10. It is guaranteed that no matter which state the ore is in, there is a path from that state to a terminal state. That is, the processing will always eventually end in a stable state. The ore starts in state 0. The denominator will fit within a signed 32-bit integer during the calculation, as long as the fraction is simplified regularly. </p><p>For example, consider the matrix m:<br>[<br>[0,1,0,0,0,1],  # s0, the initial state, goes to s1 and s5 with equal probability<br>[4,0,0,3,2,0],  # s1 can become s0, s3, or s4, but with different probabilities<br>[0,0,0,0,0,0],  # s2 is terminal, and unreachable (never observed in practice)<br>[0,0,0,0,0,0],  # s3 is terminal<br>[0,0,0,0,0,0],  # s4 is terminal<br>[0,0,0,0,0,0],  # s5 is terminal<br>]<br>So, we can consider different paths to terminal states, such as:<br>s0 -&gt; s1 -&gt; s3<br>s0 -&gt; s1 -&gt; s0 -&gt; s1 -&gt; s0 -&gt; s1 -&gt; s4<br>s0 -&gt; s1 -&gt; s0 -&gt; s5<br>Tracing the probabilities of each, we find that<br>s2 has probability 0<br>s3 has probability 3/14<br>s4 has probability 1/7<br>s5 has probability 9/14<br>So, putting that together, and making a common denominator, gives an answer in the form of<br>[s2.numerator, s3.numerator, s4.numerator, s5.numerator, denominator] which is<br>[0, 3, 2, 9, 14].</p></blockquote><h3 id="测试样例-2"><a href="#测试样例-2" class="headerlink" title="测试样例"></a>测试样例</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">solution.solution([[0, 2, 1, 0, 0], [0, 0, 0, 3, 4], [0, 0, 0, 0, 0], [0, 0, 0, 0,0], [0, 0, 0, 0, 0]])</span><br><span class="line">Output:</span><br><span class="line"><span class="code">    [7, 6, 8, 21]</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">Input:</span><br><span class="line">solution.solution([[0, 1, 0, 0, 0, 1], [4, 0, 0, 3, 2, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]])</span><br><span class="line">Output:</span><br><span class="line"><span class="code">    [0, 3, 2, 9, 14]</span></span><br></pre></td></tr></table></figure><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><p>这道计算概率的题目把我绕得非常混乱，应该是自己没想清楚做法，感觉目前的解法也不是最优的，所以看看就好。</p><p>尝试过的思路：</p><ol><li>[成功] 正向计算，从s0开始dfs，寻找到terminal的概率</li><li>[失败] 反向计算，从terminal开始反着找到可以到达它的node</li></ol><p>最后用的第一个方法来计算，通过dfs计算si到各个node的概率，这里比较困难的点是如何定义dfs，我的定义是si到terminal或已经访问过的node的概率<br>即如果现在是s1之前访问的是s0，terminal是s4和s5，那么dfs(s1)会计算s1到s0、s4、s5的概率，到s1、s2、s3的概率都是0。</p><p>这样定义是为了解决dfs遇到循环如何计算概率，我们观察一个case，现在有三个路径（其中s3、s4是terminal）：</p><ol><li>s1 -&gt; s2 -&gt; s1</li><li>s1 -&gt; s3</li><li>s1 -&gt; s4</li></ol><p>我们可以看到无论循环多少次s1，最终都会到s3或者s4，实际上的概率与不计算循环是一致的，所以在计算si到其他node的概率时，可以把它到自己的概率平分给其他node</p><p>在这样的计算逻辑下，对于si而言，对于未访问过的node，我们可以通过上述定义解决循环访问的问题，而对于已经访问过的node，我们会交回这些node自己处理。<br>在dfs的逻辑下，也就是当dfs到一个访问过的节点时，会计算这个访问过的节点的概率，并返回给上一级；当得到它所有下游节点到其他节点的概率时，把循环到自己的概率部分去掉再平分</p><p>此外，因为是概率，所以这里存储的结构会比较复杂，我采用在list最后加上一个数表示分母</p><p><strong>update</strong><br>搜了一下题解，正确做法应该是马尔科夫链，<a href="https://gist.github.com/algomaster99/782b898177ca37bfbf955cec416bb6a4">链接</a>有一个超级简洁的python写法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">m</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(m)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">    is_terminal = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">sum</span>(m[i]) == <span class="number">0</span>:</span><br><span class="line">            is_terminal[i] = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    visited = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="comment"># x line</span></span><br><span class="line">        <span class="comment"># return prob list + denominator</span></span><br><span class="line">        <span class="comment"># prob list: including recursion probability</span></span><br><span class="line">        <span class="keyword">if</span> visited[x]:</span><br><span class="line">            <span class="keyword">return</span> [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        visited[x] = <span class="number">1</span></span><br><span class="line">        l = m[x]</span><br><span class="line">        s = <span class="built_in">sum</span>(l)</span><br><span class="line">        res = [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> l[i] == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> is_terminal[i]:</span><br><span class="line">                r = [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line">                r[i] = l[i]</span><br><span class="line">                r[n] = s</span><br><span class="line">                res = add(res, r, n)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> visited[i]:</span><br><span class="line">                    r = [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line">                    r[i] = l[i]</span><br><span class="line">                    r[n] = s</span><br><span class="line">                    res = add(res, r, n)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    r = dfs(i)</span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                        r[j] *= l[i]</span><br><span class="line">                    r[n] *= s</span><br><span class="line">                    res = add(res, r, n)</span><br><span class="line">        <span class="comment"># deal with recursion</span></span><br><span class="line">        res[n] -= res[x]</span><br><span class="line">        res[x] = <span class="number">0</span></span><br><span class="line">        res = gcd_list(res)</span><br><span class="line">        visited[x] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line">    res = dfs(<span class="number">0</span>)</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">if</span> is_terminal[i]:</span><br><span class="line">            result.append(res[i])</span><br><span class="line">    result.append(res[n])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b, n</span>):</span><br><span class="line">    <span class="comment"># add two prob list, n is the length</span></span><br><span class="line">    <span class="keyword">if</span> a[n] == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">    <span class="keyword">if</span> b[n] == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    l = lcm(a[n], b[n])</span><br><span class="line">    r = [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        r[i] = a[i] * l / a[n] + b[i] * l / b[n]</span><br><span class="line">    r[n] = l</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gcd_list</span>(<span class="params">l</span>):</span><br><span class="line">    g = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">        <span class="keyword">if</span> i != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> g == <span class="number">0</span>:</span><br><span class="line">                g = i</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                g = gcd(g, i)</span><br><span class="line">    r = [i / g <span class="keyword">for</span> i <span class="keyword">in</span> l]</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">x, y</span>):</span><br><span class="line">   <span class="keyword">while</span>(y):</span><br><span class="line">       x, y = y, x % y</span><br><span class="line">   <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lcm</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x * y / gcd(x, y)</span><br></pre></td></tr></table></figure><h2 id="Level-3-2"><a href="#Level-3-2" class="headerlink" title="Level 3-2"></a>Level 3-2</h2><h3 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h3><blockquote><p>Fuel Injection Perfection</p><p>Commander Lambda has asked for your help to refine the automatic quantum antimatter fuel injection system for the LAMBCHOP doomsday device. It’s a great chance for you to get a closer look at the LAMBCHOP — and maybe sneak in a bit of sabotage while you’re at it — so you took the job gladly. </p><p>Quantum antimatter fuel comes in small pellets, which is convenient since the many moving parts of the LAMBCHOP each need to be fed fuel one pellet at a time. However, minions dump pellets in bulk into the fuel intake. You need to figure out the most efficient way to sort and shift the pellets down to a single pellet at a time. </p><p>The fuel control mechanisms have three operations: </p><p>1) Add one fuel pellet<br>2) Remove one fuel pellet<br>3) Divide the entire group of fuel pellets by 2 (due to the destructive energy released when a quantum antimatter pellet is cut in half, the safety controls will only allow this to happen if there is an even number of pellets)</p><p>Write a function called solution(n) which takes a positive integer as a string and returns the minimum number of operations needed to transform the number of pellets to 1. The fuel intake control panel can only display a number up to 309 digits long, so there won’t ever be more pellets than you can express in that many digits.</p><p>For example:<br>solution(4) returns 2: 4 -&gt; 2 -&gt; 1<br>solution(15) returns 5: 15 -&gt; 16 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1</p></blockquote><h3 id="测试样例-3"><a href="#测试样例-3" class="headerlink" title="测试样例"></a>测试样例</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">solution.solution(&#x27;15&#x27;)</span><br><span class="line">Output:</span><br><span class="line"><span class="code">    5</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">Input:</span><br><span class="line">solution.solution(&#x27;4&#x27;)</span><br><span class="line">Output:</span><br><span class="line"><span class="code">    2</span></span><br></pre></td></tr></table></figure><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h3><p>把数字转换成二进制看，末尾有三种情况：</p><ol><li>末尾是0，直接除2，一次操作，长度少一位</li><li>末尾仅有一个连续的1，减1除2，两次操作，长度减少一位</li><li>末尾有n（n&gt;1）个连续的1，加1除2，两次操作，长度减少n位</li></ol><p><strong>update</strong><br>解答应该有问题，估计没有保存最新的代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">n</span>):</span><br><span class="line">    num = <span class="built_in">int</span>(n)</span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    count = <span class="number">0</span> <span class="comment"># 1 count</span></span><br><span class="line">    <span class="keyword">while</span> num != <span class="number">1</span>:</span><br><span class="line">        m = num % <span class="number">2</span></span><br><span class="line">        num /= <span class="number">2</span></span><br><span class="line">        s += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> m == <span class="number">1</span>:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> count &gt; <span class="number">1</span>:</span><br><span class="line">                s += <span class="number">1</span></span><br><span class="line">                count = <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> count == <span class="number">1</span>:</span><br><span class="line">                s += <span class="number">1</span></span><br><span class="line">                count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> count &gt;= <span class="number">2</span>:</span><br><span class="line">        s += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> count == <span class="number">1</span>:</span><br><span class="line">        s += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure><h2 id="Level-3-3"><a href="#Level-3-3" class="headerlink" title="Level 3-3"></a>Level 3-3</h2><h3 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h3><blockquote><p>Find the Access Codes</p><p>In order to destroy Commander Lambda’s LAMBCHOP doomsday device, you’ll need access to it. But the only door leading to the LAMBCHOP chamber is secured with a unique lock system whose number of passcodes changes daily. Commander Lambda gets a report every day that includes the locks’ access codes, but only the Commander knows how to figure out which of several lists contains the access codes. You need to find a way to determine which list contains the access codes once you’re ready to go in. </p><p>Fortunately, now that you’re Commander Lambda’s personal assistant, Lambda has confided to you that all the access codes are “lucky triples” in order to make it easier to find them in the lists. A “lucky triple” is a tuple (x, y, z) where x divides y and y divides z, such as (1, 2, 4). With that information, you can figure out which list contains the number of access codes that matches the number of locks on the door when you’re ready to go in (for example, if there’s 5 passcodes, you’d need to find a list with 5 “lucky triple” access codes).</p><p>Write a function solution(l) that takes a list of positive integers l and counts the number of “lucky triples” of (li, lj, lk) where the list indices meet the requirement i &lt; j &lt; k.  The length of l is between 2 and 2000 inclusive.  The elements of l are between 1 and 999999 inclusive.  The solution fits within a signed 32-bit integer. Some of the lists are purposely generated without any access codes to throw off spies, so if no triples are found, return 0. </p><p>For example, [1, 2, 3, 4, 5, 6] has the triples: [1, 2, 4], [1, 2, 6], [1, 3, 6], making the solution 3 total.</p></blockquote><h3 id="测试样例-4"><a href="#测试样例-4" class="headerlink" title="测试样例"></a>测试样例</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">solution.solution([1, 2, 3, 4, 5, 6])</span><br><span class="line">Output:</span><br><span class="line"><span class="code">    3</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">Input:</span><br><span class="line">solution.solution([1, 1, 1])</span><br><span class="line">Output:</span><br><span class="line"><span class="code">    1</span></span><br></pre></td></tr></table></figure><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h3><p>遍历每个数，将它定为三个数的中间的数lj，找到li和lk的数量，相乘即是满足条件的数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">l</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(l)</span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n-<span class="number">1</span>):</span><br><span class="line">        c_i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, j):</span><br><span class="line">            <span class="keyword">if</span> l[j] % l[i] == <span class="number">0</span>:</span><br><span class="line">                c_i += <span class="number">1</span></span><br><span class="line">        c_k = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(j+<span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">if</span> l[k] % l[j] == <span class="number">0</span>:</span><br><span class="line">                c_k += <span class="number">1</span></span><br><span class="line">        s += c_i * c_k</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure><h1 id="Level-4"><a href="#Level-4" class="headerlink" title="Level 4"></a>Level 4</h1><p>level 4整体感觉比较难的，第一题是常规算法中不常见的网络流，第二题不确定dfs</p><h2 id="Level-4-1"><a href="#Level-4-1" class="headerlink" title="Level 4-1"></a>Level 4-1</h2><h3 id="题目-6"><a href="#题目-6" class="headerlink" title="题目"></a>题目</h3><blockquote><p>Escape Pods</p><p>You’ve blown up the LAMBCHOP doomsday device and relieved the bunnies of their work duries — and now you need to escape from the space station as quickly and as orderly as possible! The bunnies have all gathered in various locations throughout the station, and need to make their way towards the seemingly endless amount of escape pods positioned in other parts of the station. You need to get the numerous bunnies through the various rooms to the escape pods. Unfortunately, the corridors between the rooms can only fit so many bunnies at a time. What’s more, many of the corridors were resized to accommodate the LAMBCHOP, so they vary in how many bunnies can move through them at a time. </p><p>Given the starting room numbers of the groups of bunnies, the room numbers of the escape pods, and how many bunnies can fit through at a time in each direction of every corridor in between, figure out how many bunnies can safely make it to the escape pods at a time at peak.</p><p>Write a function solution(entrances, exits, path) that takes an array of integers denoting where the groups of gathered bunnies are, an array of integers denoting where the escape pods are located, and an array of an array of integers of the corridors, returning the total number of bunnies that can get through at each time step as an int. The entrances and exits are disjoint and thus will never overlap. The path element path[A][B] = C describes that the corridor going from A to B can fit C bunnies at each time step.  There are at most 50 rooms connected by the corridors and at most 2000000 bunnies that will fit at a time.</p><p>For example, if you have:<br>entrances = [0, 1]<br>exits = [4, 5]<br>path = [<br>  [0, 0, 4, 6, 0, 0],  # Room 0: Bunnies<br>  [0, 0, 5, 2, 0, 0],  # Room 1: Bunnies<br>  [0, 0, 0, 0, 4, 4],  # Room 2: Intermediate room<br>  [0, 0, 0, 0, 6, 6],  # Room 3: Intermediate room<br>  [0, 0, 0, 0, 0, 0],  # Room 4: Escape pods<br>  [0, 0, 0, 0, 0, 0],  # Room 5: Escape pods<br>]</p><p>Then in each time step, the following might happen:<br>0 sends 4/4 bunnies to 2 and 6/6 bunnies to 3<br>1 sends 4/5 bunnies to 2 and 2/2 bunnies to 3<br>2 sends 4/4 bunnies to 4 and 4/4 bunnies to 5<br>3 sends 4/6 bunnies to 4 and 4/6 bunnies to 5</p><p>So, in total, 16 bunnies could make it to the escape pods at 4 and 5 at each time step.  (Note that in this example, room 3 could have sent any variation of 8 bunnies to 4 and 5, such as 2/6 and 6/6, but the final solution remains the same.)</p></blockquote><h3 id="测试样例-5"><a href="#测试样例-5" class="headerlink" title="测试样例"></a>测试样例</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">solution.solution([0], [3], [[0, 7, 0, 0], [0, 0, 6, 0], [0, 0, 0, 8], [9, 0, 0, 0]])</span><br><span class="line">Output:</span><br><span class="line"><span class="code">    6</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">Input:</span><br><span class="line">solution.solution([0, 1], [4, 5], [[0, 0, 4, 6, 0, 0], [0, 0, 5, 2, 0, 0], [0, 0, 0, 0, 4, 4], [0, 0, 0, 0, 6, 6], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]])</span><br><span class="line">Output:</span><br><span class="line"><span class="code">    16</span></span><br></pre></td></tr></table></figure><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a>题解</h3><p>经典网络流，《挑战》上有原题，只是没有包装，在入流和出流分别加上一个总入流和总出流。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">entrances, exits, path</span>):</span><br><span class="line">    MAX_NUM = <span class="number">4000000</span></span><br><span class="line">    n = <span class="built_in">len</span>(path)</span><br><span class="line">    </span><br><span class="line">    visited = [<span class="number">0</span>] * n</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">x, num</span>):</span><br><span class="line">        <span class="comment"># start from room x</span></span><br><span class="line">        <span class="comment"># return number of bunnies get through</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> visited[x]:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">in</span> exits:</span><br><span class="line">            <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line">        visited[x] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> path[x][i] &lt;= <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            f = dfs(i, <span class="built_in">min</span>(num, path[x][i]))</span><br><span class="line">            <span class="keyword">if</span> f &lt;= <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            path[x][i] -= f</span><br><span class="line">            path[i][x] += f</span><br><span class="line">            visited[x] = <span class="number">0</span></span><br><span class="line">            <span class="keyword">return</span> f</span><br><span class="line">        visited[x] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    f = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> f &gt; <span class="number">0</span>:</span><br><span class="line">        f = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> e <span class="keyword">in</span> entrances:</span><br><span class="line">            f += dfs(e, MAX_NUM)</span><br><span class="line">        res += f</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="Level-4-2"><a href="#Level-4-2" class="headerlink" title="Level 4-2"></a>Level 4-2</h2><h3 id="题目-7"><a href="#题目-7" class="headerlink" title="题目"></a>题目</h3><blockquote><p>Running with Bunnies</p><p>You and the bunny workers need to get out of this collapsing death trap of a space station — and fast! Unfortunately, some of the bunnies have been weakened by their long work shifts and can’t run very fast. Their friends are trying to help them, but this escape would go a lot faster if you also pitched in. The defensive bulkhead doors have begun to close, and if you don’t make it through in time, you’ll be trapped! You need to grab as many bunnies as you can and get through the bulkheads before they close. </p><p>The time it takes to move from your starting point to all of the bunnies and to the bulkhead will be given to you in a square matrix of integers. Each row will tell you the time it takes to get to the start, first bunny, second bunny, …, last bunny, and the bulkhead in that order. The order of the rows follows the same pattern (start, each bunny, bulkhead). The bunnies can jump into your arms, so picking them up is instantaneous, and arriving at the bulkhead at the same time as it seals still allows for a successful, if dramatic, escape. (Don’t worry, any bunnies you don’t pick up will be able to escape with you since they no longer have to carry the ones you did pick up.) You can revisit different spots if you wish, and moving to the bulkhead doesn’t mean you have to immediately leave — you can move to and from the bulkhead to pick up additional bunnies if time permits.</p><p>In addition to spending time traveling between bunnies, some paths interact with the space station’s security checkpoints and add time back to the clock. Adding time to the clock will delay the closing of the bulkhead doors, and if the time goes back up to 0 or a positive number after the doors have already closed, it triggers the bulkhead to reopen. Therefore, it might be possible to walk in a circle and keep gaining time: that is, each time a path is traversed, the same amount of time is used or added.</p><p>Write a function of the form solution(times, time_limit) to calculate the most bunnies you can pick up and which bunnies they are, while still escaping through the bulkhead before the doors close for good. If there are multiple sets of bunnies of the same size, return the set of bunnies with the lowest worker IDs (as indexes) in sorted order. The bunnies are represented as a sorted list by worker ID, with the first bunny being 0. There are at most 5 bunnies, and time_limit is a non-negative integer that is at most 999.</p><p>For instance, in the case of<br>[<br>  [0, 2, 2, 2, -1],  # 0 = Start<br>  [9, 0, 2, 2, -1],  # 1 = Bunny 0<br>  [9, 3, 0, 2, -1],  # 2 = Bunny 1<br>  [9, 3, 2, 0, -1],  # 3 = Bunny 2<br>  [9, 3, 2, 2,  0],  # 4 = Bulkhead<br>]<br>and a time limit of 1, the five inner array rows designate the starting point, bunny 0, bunny 1, bunny 2, and the bulkhead door exit respectively. You could take the path:</p><p>Start End Delta Time Status</p><pre><code>-   0     -    1 Bulkhead initially open0   4    -1    24   2     2    02   4    -1    14   3     2   -1 Bulkhead closes3   4    -1    0 Bulkhead reopens; you and the bunnies exit</code></pre><p>With this solution, you would pick up bunnies 1 and 2. This is the best combination for this space station hallway, so the solution is [1, 2].</p></blockquote><h3 id="测试样例-6"><a href="#测试样例-6" class="headerlink" title="测试样例"></a>测试样例</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">solution.solution([[0, 2, 2, 2, -1], [9, 0, 2, 2, -1], [9, 3, 0, 2, -1], [9, 3, 2, 0, -1], [9, 3, 2, 2, 0]], 1)</span><br><span class="line">Output:</span><br><span class="line"><span class="code">    [1, 2]</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">Input:</span><br><span class="line">solution.solution([[0, 1, 1, 1, 1], [1, 0, 1, 1, 1], [1, 1, 0, 1, 1], [1, 1, 1, 0, 1], [1, 1, 1, 1, 0]], 3)</span><br><span class="line">Output:</span><br><span class="line"><span class="code">    [0, 1]</span></span><br></pre></td></tr></table></figure><h3 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a>题解</h3><p>这道题也是硬解的一道题，因为数据量不大，dfs后做了些剪枝过的，应该也不是正确解法。</p><ol><li>首先用dp找到从i到j消费最少的路径</li><li>然后从start处开始dfs遍历所有可能的走法，以下为两个停止dfs的情况：<ol><li>注意到这里会重复到bulkhead，最短路径原则至多到bulkhead n次</li><li>由于最终必须到达bulkhead，因此当前节点必须能走到bulkhead</li></ol></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">times, times_limit</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(times)</span><br><span class="line">    m = n-<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    dp = [[x <span class="keyword">for</span> x <span class="keyword">in</span> t] <span class="keyword">for</span> t <span class="keyword">in</span> times] <span class="comment"># copy</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                dp[j][k] = <span class="built_in">min</span>(dp[j][k], dp[j][i] + dp[i][k])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">if</span> dp[i][i] &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># pick up all bunnies</span></span><br><span class="line">            <span class="keyword">return</span> [x-<span class="number">1</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m)]</span><br><span class="line">    </span><br><span class="line">    visited = [<span class="number">0</span>] * n</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">x, limit</span>):</span><br><span class="line">        <span class="comment"># x: current buddy, limit: left limit</span></span><br><span class="line">        <span class="keyword">if</span> limit &lt; dp[x][m] <span class="keyword">or</span> visited[x] &gt; n:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> x == m:</span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                <span class="keyword">return</span> [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">            do_dfs = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m):</span><br><span class="line">                <span class="keyword">if</span> visited[i] == <span class="number">0</span> <span class="keyword">and</span> dp[x][i]+dp[i][x] &lt;= limit:</span><br><span class="line">                    do_dfs = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> do_dfs:</span><br><span class="line">                <span class="keyword">return</span> [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n) <span class="keyword">if</span> visited[i] &gt; <span class="number">0</span> <span class="keyword">or</span> i == m]</span><br><span class="line">        </span><br><span class="line">        res = []</span><br><span class="line">        visited[x] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> i == x:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            r = dfs(i, limit - times[x][i])</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(r) == n:</span><br><span class="line">                res = r</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(r) &gt; <span class="built_in">len</span>(res):</span><br><span class="line">                res = r</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">len</span>(r) == <span class="built_in">len</span>(res):</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(r)):</span><br><span class="line">                    <span class="keyword">if</span> r[i] &lt; res[i]:</span><br><span class="line">                        res = r</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">        visited[x] -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line">    result = dfs(<span class="number">0</span>, times_limit)</span><br><span class="line">    result = [r-<span class="number">1</span> <span class="keyword">for</span> r <span class="keyword">in</span> result <span class="keyword">if</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m)]</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h1 id="Level-5"><a href="#Level-5" class="headerlink" title="Level 5"></a>Level 5</h1><h2 id="Level-5-1"><a href="#Level-5-1" class="headerlink" title="Level 5-1"></a>Level 5-1</h2><p>这道题没做出来，感觉是dp，但没完全想出来</p><h3 id="题目-8"><a href="#题目-8" class="headerlink" title="题目"></a>题目</h3><blockquote><p>Expanding Nebula</p><p>You’ve escaped Commander Lambda’s exploding space station along with numerous escape pods full of bunnies. But — oh no! — one of the escape pods has flown into a nearby nebula, causing you to lose track of it. You start monitoring the nebula, but unfortunately, just a moment too late to find where the pod went. However, you do find that the gas of the steadily expanding nebula follows a simple pattern, meaning that you should be able to determine the previous state of the gas and narrow down where you might find the pod.</p><p>From the scans of the nebula, you have found that it is very flat and distributed in distinct patches, so you can model it as a 2D grid. You find that the current existence of gas in a cell of the grid is determined exactly by its 4 nearby cells, specifically, (1) that cell, (2) the cell below it, (3) the cell to the right of it, and (4) the cell below and to the right of it. If, in the current state, exactly 1 of those 4 cells in the 2x2 block has gas, then it will also have gas in the next state. Otherwise, the cell will be empty in the next state.</p><p>For example, let’s say the previous state of the grid (p) was:<br>.O..<br>..O.<br>…O<br>O…</p><p>To see how this grid will change to become the current grid (c) over the next time step, consider the 2x2 blocks of cells around each cell.  Of the 2x2 block of [p[0][0], p[0][1], p[1][0], p[1][1]], only p[0][1] has gas in it, which means this 2x2 block would become cell c[0][0] with gas in the next time step:<br>.O -&gt; O<br>..</p><p>Likewise, in the next 2x2 block to the right consisting of [p[0][1], p[0][2], p[1][1], p[1][2]], two of the containing cells have gas, so in the next state of the grid, c[0][1] will NOT have gas:<br>O. -&gt; .<br>.O</p><p>Following this pattern to its conclusion, from the previous state p, the current state of the grid c will be:<br>O.O<br>.O.<br>O.O</p><p>Note that the resulting output will have 1 fewer row and column, since the bottom and rightmost cells do not have a cell below and to the right of them, respectively.</p><p>Write a function solution(g) where g is an array of array of bools saying whether there is gas in each cell (the current scan of the nebula), and return an int with the number of possible previous states that could have resulted in that grid after 1 time step.  For instance, if the function were given the current state c above, it would deduce that the possible previous states were p (given above) as well as its horizontal and vertical reflections, and would return 4. The width of the grid will be between 3 and 50 inclusive, and the height of the grid will be between 3 and 9 inclusive.  The solution will always be less than one billion (10^9).</p></blockquote><h3 id="测试样例-7"><a href="#测试样例-7" class="headerlink" title="测试样例"></a>测试样例</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">solution.solution([[True, True, False, True, False, True, False, True, True, False], [True, True, False, False, False, False, True, True, True, False], [True, True, False, False, False, False, False, False, False, True], [False, True, False, False, False, False, True, True, False, False]])</span><br><span class="line">Output:</span><br><span class="line"><span class="code">    11567</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">Input:</span><br><span class="line">solution.solution([[True, False, True], [False, True, False], [True, False, True]])</span><br><span class="line">Output:</span><br><span class="line"><span class="code">    4</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">Input:</span><br><span class="line">solution.solution([[True, False, True, False, False, True, True, True], [True, False, True, False, False, False, True, False], [True, True, True, False, False, False, True, False], [True, False, True, False, False, False, True, False], [True, False, True, False, False, True, True, True]])</span><br><span class="line">Output:</span><br><span class="line"><span class="code">    254</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;非常意外得在一次技术搜索中跳出了foo bar参赛的页面，曾听闻过这是Google的一个特殊招聘渠道，不过感觉近几年这个挑战被宣传后更多得只是一个有趣的挑战，近几年也没见到有人通过这个参与面试了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://yueyue200830.github.io/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="https://yueyue200830.github.io/tags/Algorithm/"/>
    
      <category term="Python" scheme="https://yueyue200830.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>前端图画绘制——Canvas</title>
    <link href="https://yueyue200830.github.io/2021/04/18/%E5%89%8D%E7%AB%AF%E5%9B%BE%E7%94%BB%E7%BB%98%E5%88%B6%E2%80%94%E2%80%94Canvas/"/>
    <id>https://yueyue200830.github.io/2021/04/18/%E5%89%8D%E7%AB%AF%E5%9B%BE%E7%94%BB%E7%BB%98%E5%88%B6%E2%80%94%E2%80%94Canvas/</id>
    <published>2021-04-18T14:18:41.000Z</published>
    <updated>2021-04-18T14:18:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个假全栈开发者，遇到一个需求要在页面上显示地图，然后根据房间点击跳转，原生HTML有两种解决方法：SVG和Canvas，这两种都是在前端画图，但原理和实现完全不一样。</p><span id="more"></span><h1 id="SVG和Canvas的区别"><a href="#SVG和Canvas的区别" class="headerlink" title="SVG和Canvas的区别"></a>SVG和Canvas的区别</h1><p>SVG和Canvas最大的区别是SVG是矢量图而Canvas是非矢量图，Canvas是HTML5内自带的标签，而SVG则其实并非必须基于HTML，它类似JPG、GIF，是一种定义的格式，甚至可以采用Adobe AI来画SVG。</p><p>在页面绘制方面，Canvas逻辑上是一块画布，我们在画布上通过js画我们想要的图案，因此若要做到动态效果，Canvas必须进行重绘，也就是Canvas是通过代码把每一帧写出来的方式做到的动画效果，而这样的开发也更多的依赖于前端工程师，因此Canvas更多的会用在复杂的场景上，如3D等。</p><p>而SVG则是仅采用HTML标签绘制，它也可以类似JPG一样采用image标签导入显示，SVG的动画效果采用标签animate实现，支持触发各种listener的事件，个人理解为通过HTML标签读取并执行相应js。SVG作为矢量图更多的用于一些动画渲染，比如loading图标，因为矢量且轻量，可以减少传输的数据量，又不会失真，而个人感觉SVG应该更多的是UX画的（？）。实际上我感觉SVG更像一个轻量级的Flash，因为AI里制作动画十分像Flash的模式。</p><h1 id="Canvas基本入门"><a href="#Canvas基本入门" class="headerlink" title="Canvas基本入门"></a>Canvas基本入门</h1><h2 id="Canvas标签"><a href="#Canvas标签" class="headerlink" title="Canvas标签"></a>Canvas标签</h2><p>Canvas在HTML部分只需要写一个标签，绘制部分全部交给js，所以必须要填id，而在标签内部，可以写一些文字，当canvas标签不支持时会显示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvasLearning&quot;</span>&gt;</span></span><br><span class="line">  抱歉，您的浏览器不支持canvas元素</span><br><span class="line">  （这些内容将会在不支持<span class="tag">&lt;<span class="name">canvas</span>&gt;</span>元素的浏览器或是禁用了JavaScript的浏览器内渲染并展现）</span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Canvas坐标"><a href="#Canvas坐标" class="headerlink" title="Canvas坐标"></a>Canvas坐标</h2><p>Canvas坐标和大部分CS坐标一样，左上角是0，0。图片来源：<a href="https://www.cnblogs.com/fly_dragon/p/10416034.html">Canvas入门到高级详解(上)</a></p><img src="/2021/04/18/%E5%89%8D%E7%AB%AF%E5%9B%BE%E7%94%BB%E7%BB%98%E5%88%B6%E2%80%94%E2%80%94Canvas/1.png" class="" title="canvas坐标"><h2 id="Canvas绘制——Context"><a href="#Canvas绘制——Context" class="headerlink" title="Canvas绘制——Context"></a>Canvas绘制——Context</h2><p>Canvas绘制需要通过js获取canvas的上下文（context），用context来画的，2d是二维画图，也就是我们一般用的，如果用3d则是WebGL。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;canvasLearning&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>)</span><br></pre></td></tr></table></figure><p>一个小例子，画一个红色的正方形。<br>canvas画图和古老的MFC很像，首先定义画笔的颜色、粗细、样式等，也就是这里的<code>fillStyle</code>，然后通过函数画图，这里是画一个实心的长方形。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;canvasLearning&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&#x27;rgb(200,0,0)&#x27;</span></span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">50</span>)</span><br></pre></td></tr></table></figure><h2 id="绘制基本图形"><a href="#绘制基本图形" class="headerlink" title="绘制基本图形"></a>绘制基本图形</h2><h3 id="矩形"><a href="#矩形" class="headerlink" title="矩形"></a>矩形</h3><p>矩形有三种画法，全填充的<code>fillRect(x, y, width, height)</code>，描边的<code>strokeRect(x, y, width, height)</code>和清空矩形内的画布<code>clearRect(x, y, width, height)</code>。<br>这里的x和y是矩形左上角的点，也是在坐标轴内坐标最小的点。</p><p>一个例子，来自MDN</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;canvasLearning&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">25</span>, <span class="number">25</span>, <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line">ctx.<span class="title function_">clearRect</span>(<span class="number">45</span>, <span class="number">45</span>, <span class="number">60</span>, <span class="number">60</span>)</span><br><span class="line">ctx.<span class="title function_">strokeRect</span>(<span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>)</span><br></pre></td></tr></table></figure><p>结果如下：</p><img src="/2021/04/18/%E5%89%8D%E7%AB%AF%E5%9B%BE%E7%94%BB%E7%BB%98%E5%88%B6%E2%80%94%E2%80%94Canvas/rect.png" class="" title="矩形"><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><p>这里的路径是指由很多个点或线组成的图案，可以绘制空心也可绘制实心。于矩形不同的是这里会需要<code>beginPath()</code>作为开始绘制路径的命令，并且当使用<code>stroke()</code>（空心）或<code>fill()</code>（实心）时才会执行绘制。</p><p>移动画笔位置命令为<code>moveTo(x, y)</code></p><p>下面的绘制是基于路径的绘制方法。</p><h3 id="直线"><a href="#直线" class="headerlink" title="直线"></a>直线</h3><p><code>lineTo(x, y)</code>会从当前位置绘制一条线到坐标（x，y）</p><p>例子，绘制三角形，来自MDN</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;canvas&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 填充三角形</span></span><br><span class="line">ctx.<span class="title function_">beginPath</span>()</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">25</span>, <span class="number">25</span>)</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">105</span>, <span class="number">25</span>)</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">25</span>, <span class="number">105</span>)</span><br><span class="line">ctx.<span class="title function_">fill</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 描边三角形</span></span><br><span class="line">ctx.<span class="title function_">beginPath</span>()</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">125</span>, <span class="number">125</span>)</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">125</span>, <span class="number">45</span>)</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">45</span>, <span class="number">125</span>)</span><br><span class="line">ctx.<span class="title function_">closePath</span>()</span><br><span class="line">ctx.<span class="title function_">stroke</span>()</span><br></pre></td></tr></table></figure><img src="/2021/04/18/%E5%89%8D%E7%AB%AF%E5%9B%BE%E7%94%BB%E7%BB%98%E5%88%B6%E2%80%94%E2%80%94Canvas/lineTo.png" class="" title="直线"><h3 id="圆弧"><a href="#圆弧" class="headerlink" title="圆弧"></a>圆弧</h3><p><code>arc(x, y, radius, startAngle, endAngle, anticlockwise)</code>绘制一个以<code>(x, y)</code>为圆心，半径为radius的圆弧，圆弧的角度采用弧度制，x轴正方向为0，anticlockwise为<code>true</code>或<code>false</code>表示顺时针或逆时针。</p><p>例子，来自MDN</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">beginPath</span>()</span><br><span class="line">ctx.<span class="title function_">arc</span>(<span class="number">75</span>, <span class="number">75</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">2</span>, <span class="literal">true</span>)</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">110</span>, <span class="number">75</span>)</span><br><span class="line">ctx.<span class="title function_">arc</span>(<span class="number">75</span>, <span class="number">75</span>, <span class="number">35</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span>, <span class="literal">false</span>)</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">65</span>, <span class="number">65</span>)</span><br><span class="line">ctx.<span class="title function_">arc</span>(<span class="number">60</span>, <span class="number">65</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">2</span>, <span class="literal">true</span>)</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">95</span>, <span class="number">65</span>)</span><br><span class="line">ctx.<span class="title function_">arc</span>(<span class="number">90</span>, <span class="number">65</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">2</span>, <span class="literal">true</span>)</span><br><span class="line">ctx.<span class="title function_">stroke</span>()</span><br></pre></td></tr></table></figure><img src="/2021/04/18/%E5%89%8D%E7%AB%AF%E5%9B%BE%E7%94%BB%E7%BB%98%E5%88%B6%E2%80%94%E2%80%94Canvas/arc.png" class="" title="圆弧"><h2 id="Style样式"><a href="#Style样式" class="headerlink" title="Style样式"></a>Style样式</h2><p>最基本的就是设置绘制颜色，支持CSS中的颜色表达，命令为<code>ctx.style = &#39;...&#39;</code></p><p>如果绘制线条，那么牵扯到线条的粗细，可以通过<code>ctx.lineWidth</code>设置</p><p>此外还有很多可以设置的参数，而比较特殊的我认为是渐变效果，有线性渐变<code>createLinearGradient(x1, y1, x2, y2)</code>和径向渐变<code>createRadialGradient(x1, y1, r1, x2, y2, r2)</code></p><h2 id="绘制文字"><a href="#绘制文字" class="headerlink" title="绘制文字"></a>绘制文字</h2><p>首先通过<code>ctx.font</code>设置字体，然后通过<code>fillText(text, x, y)</code>就可以绘制文字。</p><p>但是！这个文字很模糊，据说是绘制优化问题，它的绘制和HTML显示的绘制方法不一样，如果想要做到清晰，就需要设置一个高清画布，也就是一个实际画布大小很大，然后被缩小显示的方法。</p><p>我修改了别人的一个代码，但是找不到网址了。。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setHiDPICanvas</span> (w, h, ratio) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">PIXEL_RATIO</span> = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> c = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;canvas&quot;</span>)</span><br><span class="line">    <span class="keyword">let</span> ctx = c.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>)</span><br><span class="line">    <span class="keyword">let</span> dpr = <span class="variable language_">window</span>.<span class="property">devicePixelRatio</span> || <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> bsr = ctx[<span class="string">&#x27;webkitBackingStorePixelRatio&#x27;</span>] ||</span><br><span class="line">      ctx[<span class="string">&#x27;mozBackingStorePixelRatio&#x27;</span>] ||</span><br><span class="line">      ctx[<span class="string">&#x27;msBackingStorePixelRatio&#x27;</span>] ||</span><br><span class="line">      ctx[<span class="string">&#x27;oBackingStorePixelRatio&#x27;</span>] ||</span><br><span class="line">      ctx[<span class="string">&#x27;backingStorePixelRatio&#x27;</span>] || <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dpr / bsr</span><br><span class="line">  &#125;)()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!ratio) &#123;</span><br><span class="line">    ratio = <span class="variable constant_">PIXEL_RATIO</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;canvasLearning&#x27;</span>)</span><br><span class="line">  canvas.<span class="property">width</span> = w * ratio</span><br><span class="line">  canvas.<span class="property">height</span> = h * ratio</span><br><span class="line">  canvas.<span class="property">style</span>.<span class="property">width</span> = w + <span class="string">&quot;px&quot;</span></span><br><span class="line">  canvas.<span class="property">style</span>.<span class="property">height</span> = h + <span class="string">&quot;px&quot;</span></span><br><span class="line">  canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>).<span class="title function_">setTransform</span>(ratio, <span class="number">0</span>, <span class="number">0</span>, ratio, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一个假全栈开发者，遇到一个需求要在页面上显示地图，然后根据房间点击跳转，原生HTML有两种解决方法：SVG和Canvas，这两种都是在前端画图，但原理和实现完全不一样。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Frontend" scheme="https://yueyue200830.github.io/categories/Frontend/"/>
    
    
      <category term="HTML" scheme="https://yueyue200830.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>go-micro 入门（一）——安装运行HelloWorld</title>
    <link href="https://yueyue200830.github.io/2021/01/23/go-micro%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85%E8%B7%91%E9%80%9AHelloWorld/"/>
    <id>https://yueyue200830.github.io/2021/01/23/go-micro%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85%E8%B7%91%E9%80%9AHelloWorld/</id>
    <published>2021-01-23T14:59:49.000Z</published>
    <updated>2021-01-23T14:59:49.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Update</strong><br>go-micro作者表示不再维护go-micro而仅专心开发micro（原因之一应该是micro v3变成商业版可以赚钱吧。。）</p><p>本文是v3的教程，但兼容v2。不过我跑通v3后发现用不了gin退回v2了。</p><p>—————update分割线—————</p><p>go-micro是Go的常见微服务之一，不过它的官方文档和别人的教程甚至代码的repo都十分混乱，初入门的我直接下载最新的版本被教程搞得一头雾水，这里记录一下以及希望有朋友不要一起踩坑啦（如果作者又搞事情我也无话可说）</p><span id="more"></span><p>题外话：悲催的我刚跑通<code>v2.9</code>第二天打开GitHub发现更新到了<code>v3.01</code>😓</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li><strong>OS</strong>: Win10</li><li><strong>Go</strong>: 1.15.6（1.14以上应该都可以，v2建议用1.14不要1.15）</li><li><strong>go-micro</strong>: 3.0.1（本文含v2.9的基础安装）</li><li><strong>protoc</strong>: 3.14.0</li><li><strong>consul</strong>: 1.9.1（Docker）</li><li><strong>GoLand</strong>: 2020.3.1</li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="go-micro"><a href="#go-micro" class="headerlink" title="go-micro"></a>go-micro</h2><p><a href="https://github.com/asim/go-micro">官方Github</a></p><p>go-micro的repo其实有些混乱，以及除了go-micro之外，还有一个micro的repo，两者之间的关系我暂时还没搞懂（似乎micro可安装后对go-micro进行查看）</p><p>安装go-micro的v3版本，其实之前有段时间好像叫nitro来着，但最后正式版还是回归了go-micro<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/asim/go-micro/v3</span><br></pre></td></tr></table></figure></p><p>如果出问题记得设置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go <span class="built_in">env</span> -w GO111MODULE=on</span><br></pre></td></tr></table></figure></p><p>go-micro的v1和v2都是<code>github.com/micro/go-micro/[v2]</code>，不知道为什么反而v3变回了个人的repo路径</p><h2 id="go-micro-plugins"><a href="#go-micro-plugins" class="headerlink" title="go-micro plugins"></a>go-micro plugins</h2><p>go-micro在v1和v2采用<code>go-plugins</code>的一个单独repo <a href="https://github.com/microhq/go-plugins">Github</a>，但在v3的时候又重新回到了<code>go-micro/plugins</code>下面<a href="https://github.com/asim/go-micro/tree/master/plugins">Github</a></p><p>没有成功获得插件正确安装方法，只会傻傻得一个个安装。。</p><p>v2的安装命令，注意替换需要的插件的路径<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/micro/go-plugins/registry/consul/v2</span><br></pre></td></tr></table></figure></p><p>v3<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/asim/go-micro/plugins/registry/consul/v3</span><br></pre></td></tr></table></figure></p><h2 id="protobuf"><a href="#protobuf" class="headerlink" title="protobuf"></a>protobuf</h2><h3 id="安装protobuf"><a href="#安装protobuf" class="headerlink" title="安装protobuf"></a>安装protobuf</h3><p>protobuf介绍自行搜索，类似json但占用更小的空间<br>在<a href="https://github.com/protocolbuffers/protobuf">官方Github</a>里的release下载最新的包，选择对应的os，比如我下载的是<code>protoc-3.14.0-win64.zip</code>（不懂为什么一群人教程下32位）</p><p>放到想要的安装目录下，比如我的<code>C:\Program Files\Protobuf</code>，把bin目录加入环境变量</p><p>命令行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;protoc --version</span><br><span class="line">libprotoc 3.14.0</span><br></pre></td></tr></table></figure></p><h3 id="安装protoc-gen-go"><a href="#安装protoc-gen-go" class="headerlink" title="安装protoc-gen-go"></a>安装protoc-gen-go</h3><p>protobuf默认是不支持go的编译的，因此需要安装<code>protoc-gen-go</code>来支持编译为go文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/golang/protobuf/protoc-gen-go</span><br></pre></td></tr></table></figure><h3 id="安装protoc-gen-micro"><a href="#安装protoc-gen-micro" class="headerlink" title="安装protoc-gen-micro"></a>安装protoc-gen-micro</h3><p>protoc-gen-micro是用于生成针对micro可用的文件 <a href="https://github.com/asim/go-micro/tree/master/cmd/protoc-gen-micro">Github</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/asim/go-micro/cmd/protoc-gen-micro/v3</span><br></pre></td></tr></table></figure><h3 id="测试安装成功"><a href="#测试安装成功" class="headerlink" title="测试安装成功"></a>测试安装成功</h3><p>首先创建一个文件<code>greeter.proto</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">service Greeter &#123;</span><br><span class="line">rpc Hello(Request) returns (Response) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message Request &#123;</span><br><span class="line">string name = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message Response &#123;</span><br><span class="line">string msg = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc --micro_out=. --go_out=. greeter.proto</span><br></pre></td></tr></table></figure><p>如果能生成<code>greeter.pb.go</code>和<code>greeter.pb.micro.go</code>那就证明安装成功了。<br>上面的文件会出现一些提示要求specify go package的路径，但暂时不影响</p><h2 id="consul"><a href="#consul" class="headerlink" title="consul"></a>consul</h2><p>这里我偷懒了以下，下了一个docker镜像包，因为本身也准备用docker，安装在电脑上似乎没那么必要</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull consul</span><br><span class="line">docker run --name consul1 -d -p 8500:8500 -p 8300:8300 -p 8301:8301 -p 8302:8302 -p 8600:8600 consul agent -server -bootstrap-expect=1 -ui -<span class="built_in">bind</span>=0.0.0.0 -client=0.0.0.0</span><br></pre></td></tr></table></figure><p>浏览器<code>localhost:8500</code>，可以看到当前已注册的服务</p><h1 id="创建第一个micro服务"><a href="#创建第一个micro服务" class="headerlink" title="创建第一个micro服务"></a>创建第一个micro服务</h1><p>这里只是简单的运行micro这个服务</p><p><code>main.go</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/asim/go-micro/v3&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">service := micro.NewService(</span><br><span class="line">micro.Name(<span class="string">&quot;helloworld&quot;</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">service.Init()</span><br><span class="line"></span><br><span class="line">service.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="采用consul作为注册中心"><a href="#采用consul作为注册中心" class="headerlink" title="采用consul作为注册中心"></a>采用consul作为注册中心</h1><p>go-micro v2和v3都是采用mdns作为注册中心的，但是consul有更多的功能以及UI（另外常用的还有etcd和zookeeper）</p><p>而更加坑的是不知道什么问题，我电脑明明可运行mdns，采用mdns的时候micro的服务无被发现（可能win10的锅，也有说法防火墙的锅，我ubuntu运行正常，有人win10也运行正常）</p><p>首先需要运行consul，走默认端口8500</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/asim/go-micro/plugins/registry/consul/v3&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/asim/go-micro/v3&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/asim/go-micro/v3/registry&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> consulReg registry.Registry</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">consulReg = consul.NewRegistry(registry.Addrs(<span class="string">&quot;:8500&quot;</span>)) <span class="comment">// 告知consul的端口号，如果走默认可以不填写</span></span><br><span class="line">                                                              <span class="comment">// 冒号前面可填ip地址，默认localhost</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">service := micro.NewService(</span><br><span class="line">micro.Name(<span class="string">&quot;helloworld&quot;</span>),</span><br><span class="line">micro.Address(<span class="string">&quot;:18001&quot;</span>),     <span class="comment">// 设置端口18001</span></span><br><span class="line">micro.Registry(consulReg),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">service.Init()</span><br><span class="line"></span><br><span class="line">service.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在consul的ui中可以看到有一个叫做<code>helloworld</code>的服务</p><h1 id="HelloWorld微服务"><a href="#HelloWorld微服务" class="headerlink" title="HelloWorld微服务"></a>HelloWorld微服务</h1><p>这里我们创建一个service和一个client，模拟最简单的微服务的交互场景（代码改编于go-micro/example/service)</p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>文件夹<code>go-micro-test</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">│  client.go</span><br><span class="line">│  go.mod</span><br><span class="line">│  go.sum</span><br><span class="line">│  greeter.go</span><br><span class="line">│</span><br><span class="line">└─proto</span><br><span class="line">        greeter.pb.go</span><br><span class="line">        greeter.pb.micro.go</span><br><span class="line">        greeter.proto</span><br></pre></td></tr></table></figure><h2 id="定义proto"><a href="#定义proto" class="headerlink" title="定义proto"></a>定义proto</h2><p><em>如果采用GoLand开发的话推荐安装插件<code>Protocol Buffer Editor</code>，网上看到推荐<code>Protobuf Support</code>已经被deprecated了</em></p><p><code>greeter.proto</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">package proto;</span><br><span class="line">option go_package = &quot;/proto&quot;;</span><br><span class="line"></span><br><span class="line">service Greeter &#123;</span><br><span class="line">  rpc Hello(Request) returns (Response) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message Request &#123;</span><br><span class="line">  string name = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message Response &#123;</span><br><span class="line">  string greeting = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里定义了一个叫做<code>Greeter</code>的调用方法（client对service的rpc），其中<code>Request</code>就是请求的数据内容，<code>Response</code>就是service返回的内容<br><code>package</code>是生成的文件的包名，<code>go_package</code>是总的包路径</p><p>生成对应go文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc --micro_out=. --go_out=. proto/greeter.proto</span><br></pre></td></tr></table></figure></p><p>获得<code>greeter.pb.go</code>和<code>greeter.pb.micro.go</code></p><h2 id="编写service"><a href="#编写service" class="headerlink" title="编写service"></a>编写service</h2><p>这里叫做<code>greeter.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/asim/go-micro/plugins/registry/consul/v3&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/asim/go-micro/v3&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/asim/go-micro/v3/registry&quot;</span></span><br><span class="line">proto <span class="string">&quot;go-micro-test/proto&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Greeter <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *Greeter)</span></span> Hello(ctx context.Context, req *proto.Request, rsp *proto.Response) <span class="type">error</span> &#123;</span><br><span class="line">rsp.Greeting = <span class="string">&quot;Hello &quot;</span> + req.Name</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">consulReg := consul.NewRegistry(registry.Addrs(<span class="string">&quot;:8500&quot;</span>))</span><br><span class="line"></span><br><span class="line">service := micro.NewService(</span><br><span class="line">micro.Name(<span class="string">&quot;greeter&quot;</span>),</span><br><span class="line">micro.Registry(consulReg),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">service.Init()</span><br><span class="line"></span><br><span class="line">proto.RegisterGreeterHandler(service.Server(), <span class="built_in">new</span>(Greeter))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := service.Run(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<code>Greeter</code>和它的方法<code>Hello</code>是用来实现我们在proto中定义的调用</p><h2 id="编写client"><a href="#编写client" class="headerlink" title="编写client"></a>编写client</h2><p>文件<code>client.go</code><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/asim/go-micro/plugins/registry/consul/v3&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/asim/go-micro/v3&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/asim/go-micro/v3/registry&quot;</span></span><br><span class="line">proto <span class="string">&quot;go-micro-test/proto&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">consulReg := consul.NewRegistry(registry.Addrs(<span class="string">&quot;:8500&quot;</span>))</span><br><span class="line"></span><br><span class="line">service := micro.NewService(</span><br><span class="line">micro.Name(<span class="string">&quot;greeter.client&quot;</span>),</span><br><span class="line">micro.Registry(consulReg),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">service.Init()</span><br><span class="line"></span><br><span class="line">greeter := proto.NewGreeterService(<span class="string">&quot;greeter&quot;</span>, service.Client())</span><br><span class="line"></span><br><span class="line">rsp, err := greeter.Hello(context.TODO(), &amp;proto.Request&#123;Name: <span class="string">&quot;World&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(rsp.Greeting)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>首先启动ervice<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run greeter.go</span><br></pre></td></tr></table></figure></p><p>其次启动client<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run client.go</span><br></pre></td></tr></table></figure></p><p>如无意外可以看到client这边显示<code>Hello World</code></p><h2 id="采用mdns注册中心"><a href="#采用mdns注册中心" class="headerlink" title="采用mdns注册中心"></a>采用mdns注册中心</h2><p>直接把注册consul的删掉就好，但是我在win10下运行会返回500，ubuntu下正常<br>搜到的<a href="https://github.com/asim/go-micro/issues/692">相关issue</a>，开发者说windows不支持，但的确看到有人win10可以跑</p><p>而且mdns也的确不适合作为大型服务的注册中心，还是推荐consul或者etcd</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;&lt;br&gt;go-micro作者表示不再维护go-micro而仅专心开发micro（原因之一应该是micro v3变成商业版可以赚钱吧。。）&lt;/p&gt;
&lt;p&gt;本文是v3的教程，但兼容v2。不过我跑通v3后发现用不了gin退回v2了。&lt;/p&gt;
&lt;p&gt;—————update分割线—————&lt;/p&gt;
&lt;p&gt;go-micro是Go的常见微服务之一，不过它的官方文档和别人的教程甚至代码的repo都十分混乱，初入门的我直接下载最新的版本被教程搞得一头雾水，这里记录一下以及希望有朋友不要一起踩坑啦（如果作者又搞事情我也无话可说）&lt;/p&gt;
    
    </summary>
    
    
      <category term="Go" scheme="https://yueyue200830.github.io/categories/Go/"/>
    
    
      <category term="Go" scheme="https://yueyue200830.github.io/tags/Go/"/>
    
      <category term="go-micro" scheme="https://yueyue200830.github.io/tags/go-micro/"/>
    
      <category term="微服务" scheme="https://yueyue200830.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>C++溢出的坑</title>
    <link href="https://yueyue200830.github.io/2020/11/10/C-%E6%BA%A2%E5%87%BA%E7%9A%84%E5%9D%91/"/>
    <id>https://yueyue200830.github.io/2020/11/10/C-%E6%BA%A2%E5%87%BA%E7%9A%84%E5%9D%91/</id>
    <published>2020-11-09T16:11:33.000Z</published>
    <updated>2020-11-09T16:11:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>C++的int只有32位，计算溢出也是十分普遍的事情，但我作死得尝试采用溢出的计算方法，结果发现千万不要代码中做溢出计算，编译器分分钟把你搞死。。</p><span id="more"></span><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">0x7fffffff</span>;</span><br><span class="line">cout &lt;&lt; !(x + x + <span class="number">2</span>) &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>根据常理，输出答案应该是1，<code>2 * (0x7fffffff + 1) = 2 * 0x80000000 = 0</code>，想想挺完美的吧，结果得出是0，百思不得其解，甚至尝试用了多个编译器，结果在我windows下的codeblocks中得到了1！</p><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>查看了codeblocks的编译器，发现是32位的，其它编译器都是64位的，还以为是32位和64位的锅呢，然而并不是，实际是2014年编译器和2019年编译器的锅。。。</p><p>不死心的我把代码进行了汇编，终于发现了问题所在：</p><img src="/2020/11/10/C-%E6%BA%A2%E5%87%BA%E7%9A%84%E5%9D%91/1.png" class="" title="screenshot"><p>这是main函数的汇编截图，主要看赋值的那行开始的三行，首先第一句是赋值<code>0x7fffffff</code>给<code>-4(%rbp)</code>，然后把它和<code>-1</code>比较一下，就完事了？？？<br>Excuse me？？<br>仔细思考一下的确也没错，<code>!</code>遇到0是1，也就是比较是否为0，也就是<code>x + x + 2 == 0</code>，优化一下就是<code>x + 1 == 0</code>。。</p><p>完全没想到是编译器太优秀了，帮我自行简化了，然而因为溢出的原因，<code>x + x + 2 == 0</code>其实有两个解。。</p><p>至于为什么我的codeblocks得到了1，是因为14年的编译器还比较傻，算的是<code>2x == -2</code>。</p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>溢出的坑真的不能踩啊，还是得乖乖得写正确的代码，谁知道谁知道编译器哪天又太优秀了把代码优化了呢。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C++的int只有32位，计算溢出也是十分普遍的事情，但我作死得尝试采用溢出的计算方法，结果发现千万不要代码中做溢出计算，编译器分分钟把你搞死。。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>黑苹果安装记录</title>
    <link href="https://yueyue200830.github.io/2020/10/17/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"/>
    <id>https://yueyue200830.github.io/2020/10/17/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</id>
    <published>2020-10-17T13:08:21.000Z</published>
    <updated>2020-10-17T13:08:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个小白的黑苹果安装记录，大概花了3天时间搞定了最基本的，作为小白还是选择了clover而不是oc，我的<a href="https://github.com/yueyue200830/ASUS-B360M-8700-EFI">EFI文件</a></p><p>其实到今天要独自装一个黑苹果已经不难了，网上有无数到教程，跟着做就可以了，甚至很多笔记本都有公开到EFI文件，十分方便</p><p>此文章没什么干货，仅安装记录，无任何截图，建议点击下面参考教程</p><span id="more"></span><p>主要参考教程：</p><ol><li><a href="https://www.sqlsec.com/2020/08/xps15.html#toc-heading-6">国光大佬xps安装黑苹果</a>，入坑装黑苹果起因也是这篇文章，有黑苹果系统的下载链接（黑果小兵的博客链接找不到正确打开方式。。）</li><li><a href="https://www.bilibili.com/video/av28790265">国光大佬b站黑苹果安装视频</a></li><li><a href="https://blog.daliansky.net/MacOS-installation-tutorial-XiaoMi-Pro-installation-process-records.html">黑果小兵macOS安装教程兼小米Pro安装过程记录</a></li><li><a href="https://www.bilibili.com/video/BV1x54y1X7tS/?spm_id_from=333.788.videocard.9">2020最新macOS Catalina10.15黑苹果安装教程</a> ，安装工具从这里下载的</li></ol><h1 id="电脑配置"><a href="#电脑配置" class="headerlink" title="电脑配置"></a>电脑配置</h1><ul><li>主板：ASUS B360M-Plus GS</li><li>CPU：i7 8700</li><li>GPU：uhd 630</li><li>SSD：三星830</li><li>显示器：dell 2k</li><li>系统：Catalina 10.15.7</li><li>无蓝牙/wifi</li></ul><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>硬件：</p><ul><li>一块硬盘</li><li>一个启动u盘</li></ul><p>作为从来没试过分区的小白，我选择用一块硬盘作为启动盘，以免影响windows系统，反正台式机有得是地方放硬盘hhh</p><p>根据参考教程，<a href="https://mirrors.dtops.cc/iso/MacOS/daliansky_macos/">下载系统</a>，选择最新的文件<code>macOS Catalina 10.15.7(19H2) Installer for Clover 5122 and WEPE.dmg</code></p><p>下载相关软件，上面视频教程有评论链接，我用到了<code>balenaEtcher</code>和<code>DiskGenius</code></p><p>在<code>Github</code>上搜索搜索和自己系统对应的EFI文件（比如我的<code>8700 EFI</code>），或者去远景论坛找（但需要买注册码），如果没完全匹配的，可以先用一个相似的配置的EFI</p><h1 id="正式流程"><a href="#正式流程" class="headerlink" title="正式流程"></a>正式流程</h1><h2 id="制作启动盘"><a href="#制作启动盘" class="headerlink" title="制作启动盘"></a>制作启动盘</h2><p>用<code>balenaEtcher</code>把下载好的镜像装入U盘中，详见参考教程1或4</p><p>用<code>DiskGenius</code>将符合自己的EFI文件替换原EFI文件（注意：EFI文件的分区在Windows下无法直接显示，必须用软件），详见教程4</p><h2 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h2><p>重启电脑，选择U盘作为启动盘，首先选择<code>磁盘工具</code>格式化准备安装的硬盘，然后选择<code>安装Mac OS</code>这个硬盘进行安装，如果安装卡住尝试更换EFI</p><p>安装完毕后会自动重启，同样采用U盘作为启动盘，然后会看到启动界面选择<code>boot form &lt;DISK NAME&gt;</code>，如果EFI正常的话就可以进去了</p><p>一般来说成功安装系统没那么难，但做到功能完全可以用就相对麻烦</p><h2 id="将启动Clover设置为mac所在的盘"><a href="#将启动Clover设置为mac所在的盘" class="headerlink" title="将启动Clover设置为mac所在的盘"></a>将启动Clover设置为mac所在的盘</h2><p>采用<code>DiskGenius</code>或者直接在mac下面用<code>clover</code>挂载u盘和mac所在硬盘的EFI分区，将u盘下面的clover文件夹复制到mac下，在bios下重设启动盘即可</p><h2 id="修改为自己电脑的EFI文件"><a href="#修改为自己电脑的EFI文件" class="headerlink" title="修改为自己电脑的EFI文件"></a>修改为自己电脑的EFI文件</h2><p>我找到的EFI文件其实是主板不一致的，也导致了没有正确识别GPU，动画效果明显卡顿，其实clover文件并没有那么复杂，每一块硬件都有自己对应的配置，只要找到满足自己的硬件的EFI，拿过来替换那部分就可以了。<br>比如我主板是<code>ASUS B360M-Plus GS</code>，那么可以搜索一个满足我主板的EFI文件，然后根据网上说的对应部分，修改就好。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一个小白的黑苹果安装记录，大概花了3天时间搞定了最基本的，作为小白还是选择了clover而不是oc，我的&lt;a href=&quot;https://github.com/yueyue200830/ASUS-B360M-8700-EFI&quot;&gt;EFI文件&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其实到今天要独自装一个黑苹果已经不难了，网上有无数到教程，跟着做就可以了，甚至很多笔记本都有公开到EFI文件，十分方便&lt;/p&gt;
&lt;p&gt;此文章没什么干货，仅安装记录，无任何截图，建议点击下面参考教程&lt;/p&gt;
    
    </summary>
    
    
      <category term="Others" scheme="https://yueyue200830.github.io/categories/Others/"/>
    
    
      <category term="黑苹果" scheme="https://yueyue200830.github.io/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
    
  </entry>
  
  <entry>
    <title>2020秋招总结</title>
    <link href="https://yueyue200830.github.io/2020/09/18/2020%E7%A7%8B%E6%8B%9B%E6%80%BB%E7%BB%93/"/>
    <id>https://yueyue200830.github.io/2020/09/18/2020%E7%A7%8B%E6%8B%9B%E6%80%BB%E7%BB%93/</id>
    <published>2020-09-18T14:04:46.000Z</published>
    <updated>2020-09-18T14:04:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>漫长的秋招从往年的金八银九变成了金七银八，从七月的焦虑到八月初的痛苦到最后的收获，总体我算是幸运的，能拿到几个大厂的意向书。<br>然而反观总体面试情况，其实有点可笑，大厂面的都offer，剩下都不要我。</p><span id="more"></span><h1 id="个人情况"><a href="#个人情况" class="headerlink" title="个人情况"></a>个人情况</h1><p>投的后端岗位，略懂前端，各种不精通但Java、Go、C++都有接触，相关项目经验完全不足。<br>有两段外企实习经历，算法在普通人中算不错的。<br>投递基本全为上海的岗位</p><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>意向书：字节、美团、蚂蚁<br>感谢信：大疆（深圳，笔试挂），京东（二面挂），Akuna（电面挂），商汤（一面挂），Shopee（新加坡，一面挂）<br>无消息：腾讯（只要上海，似乎没hc），亚马逊（学校邮箱没收到笔试邮件）</p><p>其实秋招这样的结果也挺无语的，最难进的几个公司给了意向书，剩下一堆都不要我。可能是经验不足吧，大厂不是很在意培养人才，但其它厂比较在意经验（京东二面面试官明确表示我经验不足。。）</p><h1 id="字节"><a href="#字节" class="headerlink" title="字节"></a>字节</h1><p>字节应该是我最幸运的一个公司，也是第一个意向书的公司，收到意向书以后总体就轻松了不少。</p><p>因为拿到了字节的实习offer，所以可以直通车，但其实中间过程有点曲折，被打电话后莫名被投到网络工程师然后挂了，去argue后深圳的部门又打电话，之后又变成了上海的视频部门，我选择了放弃面试，再秋招正式批重新申请了。<br>十分意外得是那个部门竟然也给了我直通车的机会，就加了一轮面试，最后给了意向书。</p><h2 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h2><ul><li>问项目，讲了Go的项目，然后被深入问Go的特点，表示概念只会Java</li><li>Java的JVM</li><li>段页式存储一次数据查询几次</li><li>看我写过vue问js特性</li><li>js的promise</li><li>计网：如果浏览器页面无法加载怎么排查</li><li>算法题：最短包含某个字符串的子串</li></ul><h1 id="美团"><a href="#美团" class="headerlink" title="美团"></a>美团</h1><p>第一场笔试，编程题AK，本场题目水准不如实习。</p><h2 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h2><p>某天晚上的视频面，内容忘得差不多了，没面好</p><ul><li>hashtable和hashmap区别</li><li>第一题算法题应该是dp</li><li>后面面试官看我算法不错加了一题：最大回文子串，继续只会dp，O(n)的做法没想出来</li></ul><h2 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h2><p>一二面联系间隔了一整周，差点以为挂了。</p><p>本轮面试官思路特别跳跃，一段技术问题，一段闲聊。。。</p><ul><li>最近看什么书（被我说不看书看博客）</li><li>一般看什么博客（遇到问题再看，作死的解答，然后扯到一些和理论不相关但好玩的博客和概念）</li><li>java8特性</li></ul><h2 id="HR面"><a href="#HR面" class="headerlink" title="HR面"></a>HR面</h2><p>二面后2小时被hr面了，其实整体感觉有点push。</p><p>hr面时说要一个月出结果，然而最终大概一周多就突然收到了意向书</p><h1 id="蚂蚁金服"><a href="#蚂蚁金服" class="headerlink" title="蚂蚁金服"></a>蚂蚁金服</h1><p>能拿到蚂蚁的意向书感觉是真的很幸运的，可能所有的坏运气都用在了阿里的笔试上吧，偏偏遇到一场错排+AC自动机的笔试，最后只有0.3，是所有公司笔试中唯一没有AK编程题的笔试。</p><p>整体面试效率是很高的，基本间隔两天会有消息。因为当时在实习，每次打电话都约了其它时间，面试官都很nice的同意了。</p><h2 id="简历面（一面）"><a href="#简历面（一面）" class="headerlink" title="简历面（一面）"></a>简历面（一面）</h2><p>简历面问的十分基础，因此回答得还不错</p><ul><li>二叉树，平衡二叉树，红黑树，B+树简单说一下</li><li>mysql分页查询</li><li>left join， right join</li><li>mysql 投影（被坑到了，我只知道英文projection）</li><li>数据库锁（乐观锁，悲观锁）</li><li>java反射机制，可以干什么</li><li>设计模式</li><li>IOC</li><li>Jvm</li><li>文件读取，如果一个比如100G的文件，要做一些处理，怎么设计</li><li>排序算法：快排、归并（用法）、桶排</li><li>进程和线程</li><li>缓存不命中的替换策略</li><li>http协议</li></ul><h2 id="二面-1"><a href="#二面-1" class="headerlink" title="二面"></a>二面</h2><p>二面就比较深入了，我比较菜，但面试官人也超级好，挑我会的问</p><p>主要就问了项目，中间件，还有分布式，然而我并不会分布式，面试官很耐心得引导我怎么设计某个分布式的东西，于是我瞎猜了一通，没想到过了。</p><h2 id="三面"><a href="#三面" class="headerlink" title="三面"></a>三面</h2><p>说实话三面面得很不好，疯狂问我实习项目相关的，但我不太能讲清楚（自己觉得讲得还听清楚的呀）</p><h2 id="四面（交叉面）"><a href="#四面（交叉面）" class="headerlink" title="四面（交叉面）"></a>四面（交叉面）</h2><p>没想到会有交叉面，但又面得十分糟糕，没有把我项目遇到的问题讲清楚，最后还为了挽回一下我的评级多问了点问题。</p><h2 id="HR面-1"><a href="#HR面-1" class="headerlink" title="HR面"></a>HR面</h2><p>阿里的这个hr是我面过最厉害的hr，可以一阵见血得指出我的问题，太太太厉害了。</p><h1 id="腾讯"><a href="#腾讯" class="headerlink" title="腾讯"></a>腾讯</h1><p>被广东地区部门捞过，表示只要上海的就没后续了</p><p>第一轮笔试70分钟AK都没人捞也是很心塞的。</p><h1 id="大疆"><a href="#大疆" class="headerlink" title="大疆"></a>大疆</h1><p>随手投了一个没想到C++的岗位，笔试算法AK，概念乱猜，直接感谢信，不过大疆据说今年招的人很少</p><h1 id="京东"><a href="#京东" class="headerlink" title="京东"></a>京东</h1><p>笔试算法AK，一面体验很好，二面不行</p><h2 id="一面-1"><a href="#一面-1" class="headerlink" title="一面"></a>一面</h2><p>算是基础面吧，京东的面试还挺固定的，面试前看了面经，Java spring必考，不会就挂，然后疯狂补了一下。</p><p>一些小插曲：面试期间腾讯来电话，和面试官说了面试官很nice的说过会儿打回来。</p><h2 id="二面-2"><a href="#二面-2" class="headerlink" title="二面"></a>二面</h2><p>上来看到我的项目就怼我项目经验不足，就表明不想要我呗，就差没被我怼回去了。。</p><p>金融相关部门</p><h1 id="Akuna"><a href="#Akuna" class="headerlink" title="Akuna"></a>Akuna</h1><p>唯一一家明知C++还投递的公司，不了解公司业务看着是个外企就投了</p><p>笔试是网上做题，有概念和算法，算法题感觉不错，测试点全过了。</p><h2 id="电面"><a href="#电面" class="headerlink" title="电面"></a>电面</h2><p>这轮面试说实话是我准备不充分，甚至不太记得C++怎么写。。</p><ol><li>十六进制的与/或操作</li><li>改正一棵树找最大值的函数</li><li>实现一个account类，使得可以实想两个帐户之间的转账功能（涉及到锁）</li><li>实现STL中的vector（脑子不清晰这题没写出来）</li></ol><h1 id="商汤"><a href="#商汤" class="headerlink" title="商汤"></a>商汤</h1><p>也是一家随手投，没看清岗位的公司，要求没写清楚要会容器分布式等知识啊。。。</p><p>面试时我Java面试官Go，没有什么知识交集。</p><h1 id="Shopee"><a href="#Shopee" class="headerlink" title="Shopee"></a>Shopee</h1><p>投的是新加坡的岗，对于中国人开的外国公司体验就一个国内企业的感觉，没有任何外企的感觉。</p><p>笔试概念占据超高的比例，算法题超级简单。。</p><h2 id="一面-2"><a href="#一面-2" class="headerlink" title="一面"></a>一面</h2><p>hr晚上11点给我发面试邀请我就被吓到了。。。</p><p>概念部分中规中矩没什么太难的点，算法写hashmap又没认真思考过然后写崩了，还有一题两个栈实现一个队列。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;漫长的秋招从往年的金八银九变成了金七银八，从七月的焦虑到八月初的痛苦到最后的收获，总体我算是幸运的，能拿到几个大厂的意向书。&lt;br&gt;然而反观总体面试情况，其实有点可笑，大厂面的都offer，剩下都不要我。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Others" scheme="https://yueyue200830.github.io/categories/Others/"/>
    
    
      <category term="Interview" scheme="https://yueyue200830.github.io/tags/Interview/"/>
    
      <category term="校招" scheme="https://yueyue200830.github.io/tags/%E6%A0%A1%E6%8B%9B/"/>
    
  </entry>
  
  <entry>
    <title>Vue+Element搭建桌面应用</title>
    <link href="https://yueyue200830.github.io/2020/07/24/Vue-Element%E6%90%AD%E5%BB%BA%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8/"/>
    <id>https://yueyue200830.github.io/2020/07/24/Vue-Element%E6%90%AD%E5%BB%BA%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8/</id>
    <published>2020-07-24T14:39:32.000Z</published>
    <updated>2020-07-24T14:39:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>写这篇文章是因为在开发时发现好多文章都过时了（目测我的很快也要过时了）</p><p>现在网上大部分以前的文章都是推荐用<code>electron-vue</code>搭建的，但经过我的实验，<code>vue-cli 4.0</code>完全不能用啊，这里推荐一个新的插件<code>Vue CLI Plugin Electron Builder</code>，<a href="https://github.com/nklayman/vue-cli-plugin-electron-builder">Github</a>，<a href="https://nklayman.github.io/vue-cli-plugin-electron-builder/guide/">官方文档</a>。</p><span id="more"></span><p>这个插件使用也十分方便，首先用<code>vue-cli</code>搭建一个<code>Vue</code>的项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局安装vue-cli</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用vue-cli搭建一个新的项目，其中会需要一些选项，这里不多介绍，可自行查询</span></span><br><span class="line">vue create &lt;project-name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入项目</span></span><br><span class="line"><span class="built_in">cd</span> &lt;project-name&gt;</span><br></pre></td></tr></table></figure><p>之后用添加<code>electron-builder</code>依赖，这里会自动引入<code>Electron</code>，并搭建整个开发环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 添加electron-builder依赖</span><br><span class="line">vue add electron-builder</span><br><span class="line"></span><br><span class="line"># 安装相关依赖</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"># 运行项目</span><br><span class="line">npm run electron:serve</span><br></pre></td></tr></table></figure><p>这里主要是推销一下这个插件，并且帮助大家避雷，就不多介绍其它用法了（本人也是新手）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写这篇文章是因为在开发时发现好多文章都过时了（目测我的很快也要过时了）&lt;/p&gt;
&lt;p&gt;现在网上大部分以前的文章都是推荐用&lt;code&gt;electron-vue&lt;/code&gt;搭建的，但经过我的实验，&lt;code&gt;vue-cli 4.0&lt;/code&gt;完全不能用啊，这里推荐一个新的插件&lt;code&gt;Vue CLI Plugin Electron Builder&lt;/code&gt;，&lt;a href=&quot;https://github.com/nklayman/vue-cli-plugin-electron-builder&quot;&gt;Github&lt;/a&gt;，&lt;a href=&quot;https://nklayman.github.io/vue-cli-plugin-electron-builder/guide/&quot;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Frontend" scheme="https://yueyue200830.github.io/categories/Frontend/"/>
    
    
      <category term="Vue" scheme="https://yueyue200830.github.io/tags/Vue/"/>
    
      <category term="Element" scheme="https://yueyue200830.github.io/tags/Element/"/>
    
  </entry>
  
  <entry>
    <title>服务器部署Nginx的坑</title>
    <link href="https://yueyue200830.github.io/2020/07/19/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2Nginx%E7%9A%84%E5%9D%91/"/>
    <id>https://yueyue200830.github.io/2020/07/19/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2Nginx%E7%9A%84%E5%9D%91/</id>
    <published>2020-07-19T13:03:42.000Z</published>
    <updated>2020-07-19T13:03:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>好久不发博文了，debug了一天的Nginx部署，必须得记录一下踩过的坑。</p><span id="more"></span><h1 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h1><p>前端有两个页面、后端有一个服务，需要把前端访问转发到后端去读数据库。<br>服务器用的<code>Centos 8</code>。</p><h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><h2 id="问题一：无法转发"><a href="#问题一：无法转发" class="headerlink" title="问题一：无法转发"></a>问题一：无法转发</h2><p>采用<code>proxy_pass</code>转发到local，始终没反应，返回<code>502</code>，log显示<code>(13: Permission denied)</code>，服务器curl localhost有反应。</p><p>结果是linux的http设置问题</p><p><strong>解决方法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setsebool -P httpd_can_network_connect 1</span><br></pre></td></tr></table></figure><h2 id="问题二：部分图片加载一半就结束"><a href="#问题二：部分图片加载一半就结束" class="headerlink" title="问题二：部分图片加载一半就结束"></a>问题二：部分图片加载一半就结束</h2><p>有的图片莫名不能加载出来，浏览器的console报错<code>net::ERR_CONTENT_LENGTH_MISMATCH</code>，log显示<code>(13: Permission denied)</code>。</p><p>这是真的没权限，因为访问速度较慢，nginx创建了temp文件夹做缓存，结果用户权限不够。</p><p><strong>解决方法</strong></p><p>在nginx的配置下把user改成root（或者其它有权限访问temp文件夹的用户）</p><h2 id="问题三：转发到另一nginx端口无效"><a href="#问题三：转发到另一nginx端口无效" class="headerlink" title="问题三：转发到另一nginx端口无效"></a>问题三：转发到另一nginx端口无效</h2><p>因为有两个前端，设了不同的端口，结果转发失败（后端转发成功），log显示<code>bind() to 0.0.0.0:**** failed</code>。</p><p>端口没有注册，需要在系统中加入这个端口。</p><p><strong>解决方法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo semanage port -a -t http_port_t  -p tcp xxxx <span class="comment"># xxxx is port number</span></span><br></pre></td></tr></table></figure><h2 id="问题四：修改文件后无法加载"><a href="#问题四：修改文件后无法加载" class="headerlink" title="问题四：修改文件后无法加载"></a>问题四：修改文件后无法加载</h2><p>把前端的静态文件重新编译部署了以下，就出现了这个问题，返回<code>403</code>，log显示<code>(13: Permission denied)</code>，一直以为是没权限，但用户是root，并且给了777。</p><p>结果是nginx的问题，盲猜缓存的锅？</p><p><strong>解决方法</strong></p><p>手动重新启动，不能用reload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx -s stop</span><br><span class="line">nginx -c nginx.conf</span><br></pre></td></tr></table></figure><h1 id="崩溃的总结"><a href="#崩溃的总结" class="headerlink" title="崩溃的总结"></a>崩溃的总结</h1><p>linux系统也各种坑呀，一半都是系统设置的问题，一开始还没找到error的log完全不知道发生了什么。</p><p>今天以后我也是用过nginx的人了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久不发博文了，debug了一天的Nginx部署，必须得记录一下踩过的坑。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://yueyue200830.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://yueyue200830.github.io/tags/Linux/"/>
    
      <category term="Deployment" scheme="https://yueyue200830.github.io/tags/Deployment/"/>
    
      <category term="Nginx" scheme="https://yueyue200830.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Chrome浏览器阻止特定URL发送请求</title>
    <link href="https://yueyue200830.github.io/2020/05/26/Chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E9%98%BB%E6%AD%A2%E7%89%B9%E5%AE%9AURL%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/"/>
    <id>https://yueyue200830.github.io/2020/05/26/Chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E9%98%BB%E6%AD%A2%E7%89%B9%E5%AE%9AURL%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/</id>
    <published>2020-05-25T16:56:58.000Z</published>
    <updated>2020-05-25T16:56:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>在开发网页又或者做一些其它测试的过程中，有的时候需要block个别URL的请求，网上搜索了一堆，结果发现是超级简单的。。。。</p><span id="more"></span><p>因为这个操作早在<code>Chrome 59</code>的时候就已经被实现了，只需要在<code>network</code>右键想到block的URL，然后选择<code>Block Request URL</code>即可</p><img src="/2020/05/26/Chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E9%98%BB%E6%AD%A2%E7%89%B9%E5%AE%9AURL%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/block-request-url.png" class="" width="700" title="Block-Request"><p>之后会跳出一个页面<code>Request blocking</code>，可以设置和查看需要block的网址，并且支持正则表达式</p><p>是不是超级方便&amp;简单！！我找了两个小时啊啊啊啊</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发网页又或者做一些其它测试的过程中，有的时候需要block个别URL的请求，网上搜索了一堆，结果发现是超级简单的。。。。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Others" scheme="https://yueyue200830.github.io/categories/Others/"/>
    
    
      <category term="Chrome" scheme="https://yueyue200830.github.io/tags/Chrome/"/>
    
      <category term="Techniques" scheme="https://yueyue200830.github.io/tags/Techniques/"/>
    
  </entry>
  
  <entry>
    <title>关于VS Code运行C++中文乱码问题</title>
    <link href="https://yueyue200830.github.io/2020/05/26/%E5%85%B3%E4%BA%8EVS-Code%E8%BF%90%E8%A1%8CC-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <id>https://yueyue200830.github.io/2020/05/26/%E5%85%B3%E4%BA%8EVS-Code%E8%BF%90%E8%A1%8CC-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</id>
    <published>2020-05-25T16:36:53.000Z</published>
    <updated>2020-05-25T16:36:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>在几个编辑器里面，VS Code已经算是比较优秀，有插件可以很方便编译和运行<code>c++</code>的，但是因为特殊需要要输出中文，结果发现乱码。。搜索了一通选择了我个人觉得比较方便的方法</p><p>这里我编译运行是采用<code>code runner</code>的，但应该对task配置的方法也适用，不过这里强烈推荐<code>code runner</code>！</p><span id="more"></span><p>首先说说乱码的原因，其实就是<code>cmd</code>和<code>powershell</code>在中文的Windows下默认编码是<code>GBK</code>，而编译输出的文件是<code>UTF-8</code>，于是导致了乱码</p><p>其实在<code>git bash</code>里直接运行把编译好的exe是没有编码问题的，不过在VS Code中也似乎变成了<code>GBK</code>的编码</p><p>既然是编码问题，那么可以直接把terminal的编码改成<code>UTF-8</code>，这样就可以了。<br>但是搜索了以下， 直接修改会导致一些程序的错误。<br>实际上，我们只是需要运行的环境是<code>UTF-8</code>编码而已，因此只需要命令修改编译运行时的terminal的编码即可。</p><p>修改编码的命令是：<code>chcp 65001</code></p><p>我们需要将这个命令集成到编译运行的命令里<br>打开用户的<code>setting.json</code>，也可以通过<code>code runner</code>的<code>extention setting</code>中<code>executorMap</code>进入<br>添加以下内容，这里后面的命令是插件自己的命令，没有修改</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;code-runner.executorMap&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;cpp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;chcp 65001 &amp;&amp; cd $dir &amp;&amp; g++ $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>保存后就会运行这条命令了，可以解决中文乱码的问题</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在几个编辑器里面，VS Code已经算是比较优秀，有插件可以很方便编译和运行&lt;code&gt;c++&lt;/code&gt;的，但是因为特殊需要要输出中文，结果发现乱码。。搜索了一通选择了我个人觉得比较方便的方法&lt;/p&gt;
&lt;p&gt;这里我编译运行是采用&lt;code&gt;code runner&lt;/code&gt;的，但应该对task配置的方法也适用，不过这里强烈推荐&lt;code&gt;code runner&lt;/code&gt;！&lt;/p&gt;
    
    </summary>
    
    
      <category term="Others" scheme="https://yueyue200830.github.io/categories/Others/"/>
    
    
      <category term="Windows" scheme="https://yueyue200830.github.io/tags/Windows/"/>
    
      <category term="VS Code" scheme="https://yueyue200830.github.io/tags/VS-Code/"/>
    
  </entry>
  
  <entry>
    <title>通过密钥对服务器进行SSH连接</title>
    <link href="https://yueyue200830.github.io/2020/05/24/%E9%80%9A%E8%BF%87%E5%AF%86%E9%92%A5%E5%AF%B9%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%9B%E8%A1%8CSSH%E8%BF%9E%E6%8E%A5/"/>
    <id>https://yueyue200830.github.io/2020/05/24/%E9%80%9A%E8%BF%87%E5%AF%86%E9%92%A5%E5%AF%B9%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%9B%E8%A1%8CSSH%E8%BF%9E%E6%8E%A5/</id>
    <published>2020-05-23T17:19:09.000Z</published>
    <updated>2020-05-23T17:19:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>常见的ssh连接服务器有两种，一是通过用户名和密码登录，这也是我们最常用的，而另一种是通过密钥来登录，这种不仅可以省去密码，而且更加安全可靠。</p><span id="more"></span><h1 id="服务器端生成密钥"><a href="#服务器端生成密钥" class="headerlink" title="服务器端生成密钥"></a>服务器端生成密钥</h1><p>首先连接服务器，输入<code>ssh-keygen</code>建立密钥， 会跳出以下内容：（中文备注的地方需要输入处理）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ ssh-keygen</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/root/.ssh/id_rsa): // 直接按Enter，用默认文件位置</span><br><span class="line">Enter passphrase (empty for no passphrase): // 直接Enter，不用密码</span><br><span class="line">Enter same passphrase again: // 重复密码</span><br><span class="line">Your identification has been saved in /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">The key&#x27;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|                 |</span><br><span class="line">|                 |</span><br><span class="line">|                 |</span><br><span class="line">|     o +         |</span><br><span class="line">|    o O S .      |</span><br><span class="line">|     X O = o     |</span><br><span class="line">|    @ O.* X      |</span><br><span class="line">|   ..XoX.* +     |</span><br><span class="line">|   xxxxxxxx      |</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure><p>这样密钥就生成好了，其中<code>id_rsa</code>是密钥，也是我们本地需要的钥匙，<code>id_rsa.pub</code>是公钥，服务器自己持有</p><h1 id="服务器配置密钥"><a href="#服务器配置密钥" class="headerlink" title="服务器配置密钥"></a>服务器配置密钥</h1><p>在<code>~/.ssh</code>文件夹下面可以找到刚才生成的钥匙（我这里是root用户，所以上面显示的是<code>/root</code>）</p><p>首先需要把<code>id_rsa.pub</code>这个公钥内容复制到<code>authorized_keys</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure><p>然后需要修改文件的读写权限，保证只有此用户有写权限，一般就设置为以下的权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 600 authorized_keys</span><br><span class="line"><span class="built_in">chmod</span> 700 ~/.ssh</span><br></pre></td></tr></table></figure><p>到这里如果之前没有对服务器ssh进行修改的话，服务器端配置就完成了</p><h1 id="客户端配置密钥"><a href="#客户端配置密钥" class="headerlink" title="客户端配置密钥"></a>客户端配置密钥</h1><p>其实客户端这里没什么配置的，只要把私钥复制到本地就可以</p><p>通过<code>scp</code>命令复制id_rsa文件到本地用户的<code>.ssh</code>文件夹下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp root@xxxx:~/.ssh/id_rsa ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p>之后就可以通过密钥登录了，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@xxx -i ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常见的ssh连接服务器有两种，一是通过用户名和密码登录，这也是我们最常用的，而另一种是通过密钥来登录，这种不仅可以省去密码，而且更加安全可靠。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://yueyue200830.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://yueyue200830.github.io/tags/Linux/"/>
    
      <category term="SSH" scheme="https://yueyue200830.github.io/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>Windows下用Python模拟鼠标点击</title>
    <link href="https://yueyue200830.github.io/2020/05/19/Windows%E4%B8%8B%E7%94%A8Python%E6%A8%A1%E6%8B%9F%E9%BC%A0%E6%A0%87%E7%82%B9%E5%87%BB/"/>
    <id>https://yueyue200830.github.io/2020/05/19/Windows%E4%B8%8B%E7%94%A8Python%E6%A8%A1%E6%8B%9F%E9%BC%A0%E6%A0%87%E7%82%B9%E5%87%BB/</id>
    <published>2020-05-19T02:47:51.000Z</published>
    <updated>2020-05-19T02:47:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于某些需求，本人被安排了一个实现模拟按键的功能，虽然听说似乎按键精灵也有类似实现，但我的需求可能它无法满足，值得自己写。</p><p>对于Windows下的模拟，python一般是采用<code>win32api</code>，此外C++等也可以实现类似的功能，但是python简洁很多，适合不太熟悉Windows变成的人。</p><span id="more"></span><p>其实一开始是找到一个别人写的项目想直接用的，可惜运行失败，而且有部分需求不满足，有兴趣的可以直接试试<a href="https://github.com/PyUserInput/PyUserInput">PyUserInput</a></p><h1 id="鼠标模拟"><a href="#鼠标模拟" class="headerlink" title="鼠标模拟"></a>鼠标模拟</h1><p>这一块基本和<code>PyUserInput</code>一样，因为我的需求没有那么复杂，所以只用了部分，有兴趣的可以看源码<a href="https://github.com/PyUserInput/PyUserInput/blob/master/pymouse/windows.py">PyUserInput/pymouse</a></p><p>鼠标的基本操作可以分为：press（按下），release（释放），scroll（滚动，这里没写），move（移动）<br>在基本操作的基础上又有：click（按下+释放），drag（按下+移动+释放）</p><h2 id="Press-按下"><a href="#Press-按下" class="headerlink" title="Press 按下"></a>Press 按下</h2><p>模拟在屏幕(x, y)的位置下按下鼠标，button=1是左键，button=2是右键</p><p>注意这里只模拟了点击操作，并没有修改鼠标的位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> win32api</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">press</span>(<span class="params">x, y, button=<span class="number">1</span></span>):</span><br><span class="line">    buttonAction = <span class="number">2</span> ** ((<span class="number">2</span> * button) - <span class="number">1</span>)</span><br><span class="line">    win32api.mouse_event(buttonAction, x, y)</span><br></pre></td></tr></table></figure><h2 id="Release-释放"><a href="#Release-释放" class="headerlink" title="Release 释放"></a>Release 释放</h2><p>操作同上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> win32api</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">release</span>(<span class="params">x, y, button=<span class="number">1</span></span>):</span><br><span class="line">    buttonAction = <span class="number">2</span> ** ((<span class="number">2</span> * button))</span><br><span class="line">    win32api.mouse_event(buttonAction, x, y)</span><br></pre></td></tr></table></figure><h2 id="Move-移动"><a href="#Move-移动" class="headerlink" title="Move 移动"></a>Move 移动</h2><p>这里其实只是将鼠标设定到(x, y)的位置，并没有动画过程（写这个代码想想也没需要吧）</p><p>采用了<code>ctypes</code>这个库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">move</span>(<span class="params">x, y</span>):</span><br><span class="line">    ctypes.windll.user32.SetCursorPos(x, y)</span><br></pre></td></tr></table></figure><h2 id="Click-点击"><a href="#Click-点击" class="headerlink" title="Click 点击"></a>Click 点击</h2><p>点击 = 按下 + 释放</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">click</span>(<span class="params">x, y, button=<span class="number">1</span></span>):</span><br><span class="line">    press(x, y, button)</span><br><span class="line">    release(x, y, button)</span><br></pre></td></tr></table></figure><h2 id="Drag-拖动"><a href="#Drag-拖动" class="headerlink" title="Drag 拖动"></a>Drag 拖动</h2><p>拖动 = 位置1按下 + 位置2释放</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">drag</span>(<span class="params">x1, y1, x2, y2</span>):</span><br><span class="line">    self.press(x1, y1)</span><br><span class="line">    self.release(x2, y2)</span><br></pre></td></tr></table></figure><h2 id="获取当前鼠标位置"><a href="#获取当前鼠标位置" class="headerlink" title="获取当前鼠标位置"></a>获取当前鼠标位置</h2><p>这里其实困扰了我一下，虽然<code>ctypes</code>中有函数可以实现这个功能，但传入的参数有点奇怪，应该是传入的一个指定类型的实例，并且直接将坐标点返回给这个实例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>(ctypes.Structure):</span><br><span class="line">    _fields_ = [(<span class="string">&quot;x&quot;</span>, ctypes.c_ulong),</span><br><span class="line">                (<span class="string">&quot;y&quot;</span>, ctypes.c_ulong)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_pos</span>():</span><br><span class="line">    point = Point()</span><br><span class="line">    ctypes.windll.user32.GetCursorPos(ctypes.byref(point))</span><br><span class="line">    <span class="keyword">return</span> point.x, point.y</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://github.com/PyUserInput/PyUserInput">PyUserInput</a></li><li><a href="https://github.com/qiueer/autoops_for_win">autoops_for_win</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于某些需求，本人被安排了一个实现模拟按键的功能，虽然听说似乎按键精灵也有类似实现，但我的需求可能它无法满足，值得自己写。&lt;/p&gt;
&lt;p&gt;对于Windows下的模拟，python一般是采用&lt;code&gt;win32api&lt;/code&gt;，此外C++等也可以实现类似的功能，但是python简洁很多，适合不太熟悉Windows变成的人。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://yueyue200830.github.io/categories/Python/"/>
    
    
      <category term="Windows" scheme="https://yueyue200830.github.io/tags/Windows/"/>
    
      <category term="Python" scheme="https://yueyue200830.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Markdown反引号中输入反引号</title>
    <link href="https://yueyue200830.github.io/2020/05/18/Markdown%E5%8F%8D%E5%BC%95%E5%8F%B7%E4%B8%AD%E8%BE%93%E5%85%A5%E5%8F%8D%E5%BC%95%E5%8F%B7/"/>
    <id>https://yueyue200830.github.io/2020/05/18/Markdown%E5%8F%8D%E5%BC%95%E5%8F%B7%E4%B8%AD%E8%BE%93%E5%85%A5%E5%8F%8D%E5%BC%95%E5%8F%B7/</id>
    <published>2020-05-18T09:58:14.000Z</published>
    <updated>2020-05-18T09:58:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>被上篇文章的代码块中显示反引号坑了好久，不写一下对不起自己啊</p><span id="more"></span><p>其实超级简单，单行的代码块最外层用两个 <strong>``</strong> 而不是一个 <strong>`</strong></p><p><strong>Example</strong></p><p>Input:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入`` ` ``</span><br></pre></td></tr></table></figure><p>Output:</p><p>输入<code>` </code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;被上篇文章的代码块中显示反引号坑了好久，不写一下对不起自己啊&lt;/p&gt;
    
    </summary>
    
    
      <category term="Markdown" scheme="https://yueyue200830.github.io/categories/Markdown/"/>
    
    
      <category term="Markdown" scheme="https://yueyue200830.github.io/tags/Markdown/"/>
    
  </entry>
  
</feed>
