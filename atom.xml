<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Z Blog</title>
  
  <subtitle>Coding for Life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yueyue200830.github.io/"/>
  <updated>2023-01-01T13:53:32.000Z</updated>
  <id>https://yueyue200830.github.io/</id>
  
  <author>
    <name>yueyue200830</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hexo-Next升级记录</title>
    <link href="https://yueyue200830.github.io/2023/01/01/Hexo%E5%8D%87%E7%BA%A7%E8%AE%B0%E5%BD%95/"/>
    <id>https://yueyue200830.github.io/2023/01/01/Hexo%E5%8D%87%E7%BA%A7%E8%AE%B0%E5%BD%95/</id>
    <published>2023-01-01T13:53:32.000Z</published>
    <updated>2023-01-01T13:53:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>好久没更新博客了，回想起这还是20年搭的博客，强迫症选手想升级下相关组件，需要升级的有Node.js, Hexo和Next。</p><span id="more"></span><h1 id="升级Hexo"><a href="#升级Hexo" class="headerlink" title="升级Hexo"></a>升级Hexo</h1><p>升级Hexo只需要在<code>package.json</code>配置hexo的版本号，然后再install更新即可<code>yarn install</code></p><p>比如当前hexo的最新版本是6.3，配置<code>&quot;hexo&quot;: &quot;^6.3.0&quot;</code></p><h1 id="升级Node-js"><a href="#升级Node-js" class="headerlink" title="升级Node.js"></a>升级Node.js</h1><p>尝试把nodejs升级到18，遇到了几个问题，网上如果中文搜索到大多都是让退回12，这种治标不治本的解决方案当然不可以接受，不过还好nodejs14出现很久了，其实相关问题都有解决方案</p><h2 id="Node-js-14以上循环依赖错误"><a href="#Node-js-14以上循环依赖错误" class="headerlink" title="Node.js 14以上循环依赖错误"></a>Node.js 14以上循环依赖错误</h2><p>报错如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(node:16596) Warning: Accessing non-existent property <span class="string">&#x27;lineno&#x27;</span> of module exports inside circular dependency</span><br><span class="line">(node:16596) Warning: Accessing non-existent property <span class="string">&#x27;column&#x27;</span> of module exports inside circular dependency</span><br><span class="line">(node:16596) Warning: Accessing non-existent property <span class="string">&#x27;filename&#x27;</span> of module exports inside circular dependency</span><br><span class="line">(node:16596) Warning: Accessing non-existent property <span class="string">&#x27;lineno&#x27;</span> of module exports inside circular dependency</span><br><span class="line">(node:16596) Warning: Accessing non-existent property <span class="string">&#x27;column&#x27;</span> of module exports inside circular dependency</span><br><span class="line">(node:16596) Warning: Accessing non-existent property <span class="string">&#x27;filename&#x27;</span> of module exports inside circular dependency</span><br></pre></td></tr></table></figure><p>参考了<a href="https://www.haoyizebo.com/posts/710984d0/">解决 Hexo 在使用 Node.js 14</a>，应该是stylus导致的问题，可以利用npx分析能力：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx cross-env NODE_OPTIONS=<span class="string">&quot;--trace-warnings&quot;</span> hexo s</span><br></pre></td></tr></table></figure><h2 id="Node-js-18出现Database-load-failed"><a href="#Node-js-18出现Database-load-failed" class="headerlink" title="Node.js 18出现Database load failed"></a>Node.js 18出现Database load failed</h2><p>错误信息：<code>Database load failed. Deleting database.</code></p><p>在Github上搜到的一个issue：<a href="https://github.com/hexojs/hexo/issues/5022">Database load failed on Node 18.6.0</a>，是由于<code>warehouse</code>低版本导致的一个错误，需要把升级到<code>4.0.2</code>以上，因此在<code>package.json</code>中配置最低版本号（注意resolutions只针对yarn生效）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;resolutions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;warehouse&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.0.2&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Deploy是出现类型错误"><a href="#Deploy是出现类型错误" class="headerlink" title="Deploy是出现类型错误"></a>Deploy是出现类型错误</h2><p>运行命令<code>hexo d -g</code>时，出现如下错误信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">TypeError [ERR_INVALID_ARG_TYPE]: The <span class="string">&quot;mode&quot;</span> argument must be <span class="built_in">integer</span>. Received an instance of Object</span><br><span class="line">    at copyFile (node:fs:2840:10)</span><br><span class="line">    at tryCatcher (&lt;path&gt;\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at ret (<span class="built_in">eval</span> at makeNodePromisifiedEval (&lt;path&gt;\npm\node_modules\hexo-cli\node_modules\bluebird\js\release\promisify.js:184:12), &lt;anonymous&gt;:13:39)</span><br><span class="line">    at &lt;path&gt;\node_modules\hexo-deployer-git\node_modules\hexo-fs\lib\fs.js:144:39</span><br><span class="line">    at tryCatcher (&lt;path&gt;\node_modules\bluebird\js\release\util.js:16:23)</span><br><span class="line">    at Promise._settlePromiseFromHandler (&lt;path&gt;\node_modules\bluebird\js\release\promise.js:547:31)</span><br><span class="line">    at Promise._settlePromise (&lt;path&gt;\node_modules\bluebird\js\release\promise.js:604:18)</span><br><span class="line">    at Promise._settlePromise0 (&lt;path&gt;\node_modules\bluebird\js\release\promise.js:649:10)</span><br><span class="line">    at Promise._settlePromises (&lt;path&gt;\node_modules\bluebird\js\release\promise.js:729:18)</span><br><span class="line">    at Promise._fulfill (&lt;path&gt;\node_modules\bluebird\js\release\promise.js:673:18)</span><br><span class="line">    at Promise._resolveCallback (&lt;path&gt;\node_modules\bluebird\js\release\promise.js:466:57)</span><br><span class="line">    at Promise._settlePromiseFromHandler (&lt;path&gt;\node_modules\bluebird\js\release\promise.js:559:17)</span><br><span class="line">    at Promise._settlePromise (&lt;path&gt;\node_modules\bluebird\js\release\promise.js:604:18)</span><br><span class="line">    at Promise._settlePromise0 (&lt;path&gt;\node_modules\bluebird\js\release\promise.js:649:10)</span><br><span class="line">    at Promise._settlePromises (&lt;path&gt;\node_modules\bluebird\js\release\promise.js:729:18)</span><br><span class="line">    at Promise._fulfill (&lt;path&gt;\node_modules\bluebird\js\release\promise.js:673:18)</span><br><span class="line">    at Promise._resolveCallback (&lt;path&gt;\node_modules\bluebird\js\release\promise.js:466:57)</span><br><span class="line">    at Promise._settlePromiseFromHandler (&lt;path&gt;\node_modules\bluebird\js\release\promise.js:559:17)</span><br><span class="line">    at Promise._settlePromise (&lt;path&gt;\node_modules\bluebird\js\release\promise.js:604:18)</span><br><span class="line">    at Promise._settlePromise0 (&lt;path&gt;\node_modules\bluebird\js\release\promise.js:649:10)</span><br><span class="line">    at Promise._settlePromises (&lt;path&gt;\node_modules\bluebird\js\release\promise.js:729:18)</span><br><span class="line">    at Promise._fulfill (&lt;path&gt;\node_modules\bluebird\js\release\promise.js:673:18)</span><br></pre></td></tr></table></figure><p>找到一个<a href="https://github.com/hexojs/hexo/issues/4281">issue</a>，在最后yoshinorin的解答是有效的，原因是hexo-fs的版本不兼容，需要至少升级至2.0.1才可以，同上一个问题，设置版本<code>&quot;hexo-fs&quot;: &quot;^2.0.1&quot;</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久没更新博客了，回想起这还是20年搭的博客，强迫症选手想升级下相关组件，需要升级的有Node.js, Hexo和Next。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="https://yueyue200830.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://yueyue200830.github.io/tags/Hexo/"/>
    
      <category term="Nodejs" scheme="https://yueyue200830.github.io/tags/Nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Google Foo Bar挑战</title>
    <link href="https://yueyue200830.github.io/2022/04/30/Google-Foo-Bar%E6%8C%91%E6%88%98/"/>
    <id>https://yueyue200830.github.io/2022/04/30/Google-Foo-Bar%E6%8C%91%E6%88%98/</id>
    <published>2022-04-30T08:42:17.000Z</published>
    <updated>2022-04-30T08:42:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>非常意外得在一次技术搜索中跳出了foo bar参赛的页面，曾听闻过这是Google的一个特殊招聘渠道，不过感觉近几年这个挑战被宣传后更多得只是一个有趣的挑战，近几年也没见到有人通过这个参与面试了。</p><span id="more"></span><p>Foo Bar一共有5个level的题目，每个level有一个或多个题目，随着level提高，题目的难度也会提高，每个题目都有限制的答题时间，但最短的也有7天，所以可以给答题者足够的思考时间。<br>题目一共可以用两种语言类回答，Java和Python，因为近期用Python更多些以及Python写起来也更简洁些，所以题解都是用的Python。</p><p>Foo Bar类似Google的其他比赛，题目都会有很多的包装，需要阅读理解，个人还是比较欣赏这种没法完全背解答的题目。<br>另一个比较与众不同的是，这个挑战虽然是一个网页，但全程需要使用命令行进行测试提交挑战，只有在编写代码时是一个web端的编辑器。</p><img src="/2022/04/30/Google-Foo-Bar%E6%8C%91%E6%88%98/screenshot.png" class="" title="foo-bar页面截图"><h1 id="Level-1"><a href="#Level-1" class="headerlink" title="Level 1"></a>Level 1</h1><p>level 1只有一题，一开始题目没有复制出来，只有个截图看下吧</p><h2 id="Level-1-1"><a href="#Level-1-1" class="headerlink" title="Level 1-1"></a>Level 1-1</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><img src="/2022/04/30/Google-Foo-Bar%E6%8C%91%E6%88%98/level-1.png" class="" title="level-1题目"><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>第一题还是非常简单的，做一个字符串的转换就可以了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">x</span>):</span><br><span class="line">    s = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">        a = x[i]</span><br><span class="line">        <span class="keyword">if</span> a &gt;= <span class="string">&#x27;a&#x27;</span> <span class="keyword">and</span> a &lt;= <span class="string">&#x27;z&#x27;</span>:</span><br><span class="line">            a = <span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) + <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>) - <span class="built_in">ord</span>(a))</span><br><span class="line">        s += a</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure><p>代码通过后会有这么一个可爱的图案</p><img src="/2022/04/30/Google-Foo-Bar%E6%8C%91%E6%88%98/submission.png" class="" title="过关截图"><h1 id="Level-2"><a href="#Level-2" class="headerlink" title="Level 2"></a>Level 2</h1><p>level 2有两题，题目总体还是比较简单的</p><h2 id="Level-2-1"><a href="#Level-2-1" class="headerlink" title="Level 2-1"></a>Level 2-1</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><blockquote><p>Please Pass the Coded Messages</p><p>You need to pass a message to the bunny workers, but to avoid detection, the code you agreed to use is… obscure, to say the least. The bunnies are given food on standard-issue plates that are stamped with the numbers 0-9 for easier sorting, and you need to combine sets of plates to create the numbers in the code. The signal that a number is part of the code is that it is divisible by 3. You can do smaller numbers like 15 and 45 easily, but bigger numbers like 144 and 414 are a little trickier. Write a program to help yourself quickly create large numbers for use in the code, given a limited number of plates to work with.</p><p>You have L, a list containing some digits (0 to 9). Write a function solution(L) which finds the largest number that can be made from some or all of these digits and is divisible by 3. If it is not possible to make such a number, return 0 as the solution. L will contain anywhere from 1 to 9 digits.  The same digit may appear multiple times in the list, but each element in the list may only be used once.</p></blockquote><h3 id="测试样例"><a href="#测试样例" class="headerlink" title="测试样例"></a>测试样例</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">Solution.solution(&#123;3, 1, 4, 1&#125;)</span><br><span class="line">Output:</span><br><span class="line"><span class="code">    4311</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">Input:</span><br><span class="line">Solution.solution(&#123;3, 1, 4, 1, 5, 9&#125;)</span><br><span class="line">Output:</span><br><span class="line"><span class="code">    94311</span></span><br></pre></td></tr></table></figure><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p>题目整体可以分为两步，1：把数字从大到小排序；2：去掉几个数（0-2个数）是的数字之和模3余0。<br>关于第二步，很明显去掉一个字符会大于去掉两个字符，且去掉的数字越小越好，所以依次尝试这两种情况是否能满足3的倍数即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">l</span>):</span><br><span class="line">    x = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line">    </span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">        x[i] += <span class="number">1</span></span><br><span class="line">        s += i</span><br><span class="line">    diff = s % <span class="number">3</span></span><br><span class="line">    <span class="keyword">if</span> diff != <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># cut 1 char</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            <span class="keyword">if</span> x[i] &gt; <span class="number">0</span> <span class="keyword">and</span> i % <span class="number">3</span> == diff:</span><br><span class="line">                x[i] -= <span class="number">1</span></span><br><span class="line">                diff = <span class="number">0</span>  <span class="comment"># set to zero</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> diff != <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># cut 2 char</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">                <span class="keyword">if</span> x[i] &gt; <span class="number">0</span>:</span><br><span class="line">                    x[i] -= <span class="number">1</span></span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">                        <span class="keyword">if</span> x[j] &gt; <span class="number">0</span> <span class="keyword">and</span> (i + j) % <span class="number">3</span> == diff:</span><br><span class="line">                            x[j] -= <span class="number">1</span></span><br><span class="line">                            diff = <span class="number">0</span></span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">if</span> diff == <span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    x[i] += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span> diff != <span class="number">0</span>:</span><br><span class="line">         <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">while</span> x[i] &gt; <span class="number">0</span>:</span><br><span class="line">            result = result * <span class="number">10</span> + i</span><br><span class="line">            x[i] -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Level-2-2"><a href="#Level-2-2" class="headerlink" title="Level 2-2"></a>Level 2-2</h2><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><blockquote><p>Power Hungry</p><p>Commander Lambda’s space station is HUGE. And huge space stations take a LOT of power. Huge space stations with doomsday devices take even more power. To help meet the station’s power needs, Commander Lambda has installed solar panels on the station’s outer surface. But the station sits in the middle of a quasar quantum flux field, which wreaks havoc on the solar panels. You and your team of henchmen have been assigned to repair the solar panels, but you’d rather not take down all of the panels at once if you can help it, since they do help power the space station and all!</p><p>You need to figure out which sets of panels in any given array you can take offline to repair while still maintaining the maximum amount of power output per array, and to do THAT, you’ll first need to figure out what the maximum output of each array actually is. Write a function solution(xs) that takes a list of integers representing the power output levels of each panel in an array, and returns the maximum product of some non-empty subset of those numbers. So for example, if an array contained panels with power output levels of [2, -3, 1, 0, -5], then the maximum product would be found by taking the subset: xs[0] = 2, xs[1] = -3, xs[4] = -5, giving the product 2*(-3)*(-5) = 30.  So solution([2,-3,1,0,-5]) will be “30”.</p><p>Each array of solar panels contains at least 1 and no more than 50 panels, and each panel will have a power output level whose absolute value is no greater than 1000 (some panels are malfunctioning so badly that they’re draining energy, but you know a trick with the panels’ wave stabilizer that lets you combine two negative-output panels to produce the positive output of the multiple of their power values). The final products may be very large, so give the solution as a string representation of the number.</p></blockquote><h3 id="测试样例-1"><a href="#测试样例-1" class="headerlink" title="测试样例"></a>测试样例</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">solution.solution([2, 0, 2, 2, 0])</span><br><span class="line">Output:</span><br><span class="line"><span class="code">    8</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">Input:</span><br><span class="line">solution.solution([-2, -3, 4, -5])</span><br><span class="line">Output:</span><br><span class="line"><span class="code">    60</span></span><br></pre></td></tr></table></figure><h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><p>求这些数的乘积之和的最大值，对于正数直接相乘即可；对于负数需要选取偶数个相乘；对于0在只有一个负数的时候会选择。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">xs</span>):</span><br><span class="line">    result = <span class="number">1</span></span><br><span class="line">    negative = []</span><br><span class="line">    p = <span class="number">0</span> <span class="comment"># positive count</span></span><br><span class="line">    n = <span class="number">0</span> <span class="comment"># negative count</span></span><br><span class="line">    zero = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xs:</span><br><span class="line">        <span class="keyword">if</span> i &gt; <span class="number">0</span>:</span><br><span class="line">            result *= i</span><br><span class="line">            p += <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> i &lt; <span class="number">0</span>:</span><br><span class="line">            negative.append(i)</span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            zero += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> p == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">            result = <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> n == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">if</span> zero != <span class="number">0</span>:</span><br><span class="line">                result = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                result = negative[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    negative.sort()</span><br><span class="line">    l = <span class="built_in">len</span>(negative)</span><br><span class="line">    <span class="keyword">if</span> l % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">        l -= <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(l):</span><br><span class="line">        result *= negative[i]</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(result)</span><br></pre></td></tr></table></figure><h1 id="Level-3"><a href="#Level-3" class="headerlink" title="Level 3"></a>Level 3</h1><p>level 3中后两题感觉比较简单，但3-1卡了我很久，感觉逻辑非常绕</p><h2 id="Level-3-1"><a href="#Level-3-1" class="headerlink" title="Level 3-1"></a>Level 3-1</h2><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><blockquote><p>Doomsday Fuel</p><p>Making fuel for the LAMBCHOP’s reactor core is a tricky process because of the exotic matter involved. It starts as raw ore, then during processing, begins randomly changing between forms, eventually reaching a stable form. There may be multiple stable forms that a sample could ultimately reach, not all of which are useful as fuel. </p><p>Commander Lambda has tasked you to help the scientists increase fuel creation efficiency by predicting the end state of a given ore sample. You have carefully studied the different structures that the ore can take and which transitions it undergoes. It appears that, while random, the probability of each structure transforming is fixed. That is, each time the ore is in 1 state, it has the same probabilities of entering the next state (which might be the same state).  You have recorded the observed transitions in a matrix. The others in the lab have hypothesized more exotic forms that the ore can become, but you haven’t seen all of them.</p><p>Write a function solution(m) that takes an array of array of nonnegative ints representing how many times that state has gone to the next state and return an array of ints for each terminal state giving the exact probabilities of each terminal state, represented as the numerator for each state, then the denominator for all of them at the end and in simplest form. The matrix is at most 10 by 10. It is guaranteed that no matter which state the ore is in, there is a path from that state to a terminal state. That is, the processing will always eventually end in a stable state. The ore starts in state 0. The denominator will fit within a signed 32-bit integer during the calculation, as long as the fraction is simplified regularly. </p><p>For example, consider the matrix m:<br>[<br>[0,1,0,0,0,1],  # s0, the initial state, goes to s1 and s5 with equal probability<br>[4,0,0,3,2,0],  # s1 can become s0, s3, or s4, but with different probabilities<br>[0,0,0,0,0,0],  # s2 is terminal, and unreachable (never observed in practice)<br>[0,0,0,0,0,0],  # s3 is terminal<br>[0,0,0,0,0,0],  # s4 is terminal<br>[0,0,0,0,0,0],  # s5 is terminal<br>]<br>So, we can consider different paths to terminal states, such as:<br>s0 -&gt; s1 -&gt; s3<br>s0 -&gt; s1 -&gt; s0 -&gt; s1 -&gt; s0 -&gt; s1 -&gt; s4<br>s0 -&gt; s1 -&gt; s0 -&gt; s5<br>Tracing the probabilities of each, we find that<br>s2 has probability 0<br>s3 has probability 3/14<br>s4 has probability 1/7<br>s5 has probability 9/14<br>So, putting that together, and making a common denominator, gives an answer in the form of<br>[s2.numerator, s3.numerator, s4.numerator, s5.numerator, denominator] which is<br>[0, 3, 2, 9, 14].</p></blockquote><h3 id="测试样例-2"><a href="#测试样例-2" class="headerlink" title="测试样例"></a>测试样例</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">solution.solution([[0, 2, 1, 0, 0], [0, 0, 0, 3, 4], [0, 0, 0, 0, 0], [0, 0, 0, 0,0], [0, 0, 0, 0, 0]])</span><br><span class="line">Output:</span><br><span class="line"><span class="code">    [7, 6, 8, 21]</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">Input:</span><br><span class="line">solution.solution([[0, 1, 0, 0, 0, 1], [4, 0, 0, 3, 2, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]])</span><br><span class="line">Output:</span><br><span class="line"><span class="code">    [0, 3, 2, 9, 14]</span></span><br></pre></td></tr></table></figure><h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><p>这道计算概率的题目把我绕得非常混乱，应该是自己没想清楚做法，感觉目前的解法也不是最优的，所以看看就好。</p><p>尝试过的思路：</p><ol><li>[成功] 正向计算，从s0开始dfs，寻找到terminal的概率</li><li>[失败] 反向计算，从terminal开始反着找到可以到达它的node</li></ol><p>最后用的第一个方法来计算，通过dfs计算si到各个node的概率，这里比较困难的点是如何定义dfs，我的定义是si到terminal或已经访问过的node的概率<br>即如果现在是s1之前访问的是s0，terminal是s4和s5，那么dfs(s1)会计算s1到s0、s4、s5的概率，到s1、s2、s3的概率都是0。</p><p>这样定义是为了解决dfs遇到循环如何计算概率，我们观察一个case，现在有三个路径（其中s3、s4是terminal）：</p><ol><li>s1 -&gt; s2 -&gt; s1</li><li>s1 -&gt; s3</li><li>s1 -&gt; s4</li></ol><p>我们可以看到无论循环多少次s1，最终都会到s3或者s4，实际上的概率与不计算循环是一致的，所以在计算si到其他node的概率时，可以把它到自己的概率平分给其他node</p><p>在这样的计算逻辑下，对于si而言，对于未访问过的node，我们可以通过上述定义解决循环访问的问题，而对于已经访问过的node，我们会交回这些node自己处理。<br>在dfs的逻辑下，也就是当dfs到一个访问过的节点时，会计算这个访问过的节点的概率，并返回给上一级；当得到它所有下游节点到其他节点的概率时，把循环到自己的概率部分去掉再平分</p><p>此外，因为是概率，所以这里存储的结构会比较复杂，我采用在list最后加上一个数表示分母</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">m</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(m)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">    is_terminal = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">sum</span>(m[i]) == <span class="number">0</span>:</span><br><span class="line">            is_terminal[i] = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    visited = [<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">x</span>):</span><br><span class="line">        <span class="comment"># x line</span></span><br><span class="line">        <span class="comment"># return prob list + denominator</span></span><br><span class="line">        <span class="comment"># prob list: including recursion probability</span></span><br><span class="line">        <span class="keyword">if</span> visited[x]:</span><br><span class="line">            <span class="keyword">return</span> [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        visited[x] = <span class="number">1</span></span><br><span class="line">        l = m[x]</span><br><span class="line">        s = <span class="built_in">sum</span>(l)</span><br><span class="line">        res = [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> l[i] == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> is_terminal[i]:</span><br><span class="line">                r = [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line">                r[i] = l[i]</span><br><span class="line">                r[n] = s</span><br><span class="line">                res = add(res, r, n)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> visited[i]:</span><br><span class="line">                    r = [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line">                    r[i] = l[i]</span><br><span class="line">                    r[n] = s</span><br><span class="line">                    res = add(res, r, n)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    r = dfs(i)</span><br><span class="line">                    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                        r[j] *= l[i]</span><br><span class="line">                    r[n] *= s</span><br><span class="line">                    res = add(res, r, n)</span><br><span class="line">        <span class="comment"># deal with recursion</span></span><br><span class="line">        res[n] -= res[x]</span><br><span class="line">        res[x] = <span class="number">0</span></span><br><span class="line">        res = gcd_list(res)</span><br><span class="line">        visited[x] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line">    res = dfs(<span class="number">0</span>)</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">if</span> is_terminal[i]:</span><br><span class="line">            result.append(res[i])</span><br><span class="line">    result.append(res[n])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a, b, n</span>):</span><br><span class="line">    <span class="comment"># add two prob list, n is the length</span></span><br><span class="line">    <span class="keyword">if</span> a[n] == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> b</span><br><span class="line">    <span class="keyword">if</span> b[n] == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    l = lcm(a[n], b[n])</span><br><span class="line">    r = [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        r[i] = a[i] * l / a[n] + b[i] * l / b[n]</span><br><span class="line">    r[n] = l</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gcd_list</span>(<span class="params">l</span>):</span><br><span class="line">    g = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> l:</span><br><span class="line">        <span class="keyword">if</span> i != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> g == <span class="number">0</span>:</span><br><span class="line">                g = i</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                g = gcd(g, i)</span><br><span class="line">    r = [i / g <span class="keyword">for</span> i <span class="keyword">in</span> l]</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">x, y</span>):</span><br><span class="line">   <span class="keyword">while</span>(y):</span><br><span class="line">       x, y = y, x % y</span><br><span class="line">   <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lcm</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x * y / gcd(x, y)</span><br></pre></td></tr></table></figure><h2 id="Level-3-2"><a href="#Level-3-2" class="headerlink" title="Level 3-2"></a>Level 3-2</h2><h3 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h3><blockquote><p>Fuel Injection Perfection</p><p>Commander Lambda has asked for your help to refine the automatic quantum antimatter fuel injection system for the LAMBCHOP doomsday device. It’s a great chance for you to get a closer look at the LAMBCHOP – and maybe sneak in a bit of sabotage while you’re at it – so you took the job gladly. </p><p>Quantum antimatter fuel comes in small pellets, which is convenient since the many moving parts of the LAMBCHOP each need to be fed fuel one pellet at a time. However, minions dump pellets in bulk into the fuel intake. You need to figure out the most efficient way to sort and shift the pellets down to a single pellet at a time. </p><p>The fuel control mechanisms have three operations: </p><p>1) Add one fuel pellet<br>2) Remove one fuel pellet<br>3) Divide the entire group of fuel pellets by 2 (due to the destructive energy released when a quantum antimatter pellet is cut in half, the safety controls will only allow this to happen if there is an even number of pellets)</p><p>Write a function called solution(n) which takes a positive integer as a string and returns the minimum number of operations needed to transform the number of pellets to 1. The fuel intake control panel can only display a number up to 309 digits long, so there won’t ever be more pellets than you can express in that many digits.</p><p>For example:<br>solution(4) returns 2: 4 -&gt; 2 -&gt; 1<br>solution(15) returns 5: 15 -&gt; 16 -&gt; 8 -&gt; 4 -&gt; 2 -&gt; 1</p></blockquote><h3 id="测试样例-3"><a href="#测试样例-3" class="headerlink" title="测试样例"></a>测试样例</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">solution.solution(&#x27;15&#x27;)</span><br><span class="line">Output:</span><br><span class="line"><span class="code">    5</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">Input:</span><br><span class="line">solution.solution(&#x27;4&#x27;)</span><br><span class="line">Output:</span><br><span class="line"><span class="code">    2</span></span><br></pre></td></tr></table></figure><h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h3><p>把数字转换成二进制看，末尾有三种情况：</p><ol><li>末尾是0，直接除2，一次操作，长度少一位</li><li>末尾仅有一个连续的1，减1除2，两次操作，长度减少一位</li><li>末尾有n（n&gt;1）个连续的1，加1除2，两次操作，长度减少n位</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">n</span>):</span><br><span class="line">    num = <span class="built_in">int</span>(n)</span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    count = <span class="number">0</span> <span class="comment"># 1 count</span></span><br><span class="line">    <span class="keyword">while</span> num != <span class="number">1</span>:</span><br><span class="line">        m = num % <span class="number">2</span></span><br><span class="line">        num /= <span class="number">2</span></span><br><span class="line">        s += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> m == <span class="number">1</span>:</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> count &gt; <span class="number">1</span>:</span><br><span class="line">                s += <span class="number">1</span></span><br><span class="line">                count = <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> count == <span class="number">1</span>:</span><br><span class="line">                s += <span class="number">1</span></span><br><span class="line">                count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> count &gt;= <span class="number">2</span>:</span><br><span class="line">        s += <span class="number">2</span></span><br><span class="line">    <span class="keyword">elif</span> count == <span class="number">1</span>:</span><br><span class="line">        s += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure><h2 id="Level-3-3"><a href="#Level-3-3" class="headerlink" title="Level 3-3"></a>Level 3-3</h2><h3 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h3><blockquote><p>Find the Access Codes</p><p>In order to destroy Commander Lambda’s LAMBCHOP doomsday device, you’ll need access to it. But the only door leading to the LAMBCHOP chamber is secured with a unique lock system whose number of passcodes changes daily. Commander Lambda gets a report every day that includes the locks’ access codes, but only the Commander knows how to figure out which of several lists contains the access codes. You need to find a way to determine which list contains the access codes once you’re ready to go in. </p><p>Fortunately, now that you’re Commander Lambda’s personal assistant, Lambda has confided to you that all the access codes are “lucky triples” in order to make it easier to find them in the lists. A “lucky triple” is a tuple (x, y, z) where x divides y and y divides z, such as (1, 2, 4). With that information, you can figure out which list contains the number of access codes that matches the number of locks on the door when you’re ready to go in (for example, if there’s 5 passcodes, you’d need to find a list with 5 “lucky triple” access codes).</p><p>Write a function solution(l) that takes a list of positive integers l and counts the number of “lucky triples” of (li, lj, lk) where the list indices meet the requirement i &lt; j &lt; k.  The length of l is between 2 and 2000 inclusive.  The elements of l are between 1 and 999999 inclusive.  The solution fits within a signed 32-bit integer. Some of the lists are purposely generated without any access codes to throw off spies, so if no triples are found, return 0. </p><p>For example, [1, 2, 3, 4, 5, 6] has the triples: [1, 2, 4], [1, 2, 6], [1, 3, 6], making the solution 3 total.</p></blockquote><h3 id="测试样例-4"><a href="#测试样例-4" class="headerlink" title="测试样例"></a>测试样例</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">solution.solution([1, 2, 3, 4, 5, 6])</span><br><span class="line">Output:</span><br><span class="line"><span class="code">    3</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">Input:</span><br><span class="line">solution.solution([1, 1, 1])</span><br><span class="line">Output:</span><br><span class="line"><span class="code">    1</span></span><br></pre></td></tr></table></figure><h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h3><p>遍历每个数，将它定为三个数的中间的数lj，找到li和lk的数量，相乘即是满足条件的数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">l</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(l)</span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n-<span class="number">1</span>):</span><br><span class="line">        c_i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, j):</span><br><span class="line">            <span class="keyword">if</span> l[j] % l[i] == <span class="number">0</span>:</span><br><span class="line">                c_i += <span class="number">1</span></span><br><span class="line">        c_k = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(j+<span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">if</span> l[k] % l[j] == <span class="number">0</span>:</span><br><span class="line">                c_k += <span class="number">1</span></span><br><span class="line">        s += c_i * c_k</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure><h1 id="Level-4"><a href="#Level-4" class="headerlink" title="Level 4"></a>Level 4</h1><p>level 4整体感觉比较难的，第一题是常规算法中不常见的网络流，第二题不确定dfs</p><h2 id="Level-4-1"><a href="#Level-4-1" class="headerlink" title="Level 4-1"></a>Level 4-1</h2><h3 id="题目-6"><a href="#题目-6" class="headerlink" title="题目"></a>题目</h3><blockquote><p>Escape Pods</p><p>You’ve blown up the LAMBCHOP doomsday device and relieved the bunnies of their work duries – and now you need to escape from the space station as quickly and as orderly as possible! The bunnies have all gathered in various locations throughout the station, and need to make their way towards the seemingly endless amount of escape pods positioned in other parts of the station. You need to get the numerous bunnies through the various rooms to the escape pods. Unfortunately, the corridors between the rooms can only fit so many bunnies at a time. What’s more, many of the corridors were resized to accommodate the LAMBCHOP, so they vary in how many bunnies can move through them at a time. </p><p>Given the starting room numbers of the groups of bunnies, the room numbers of the escape pods, and how many bunnies can fit through at a time in each direction of every corridor in between, figure out how many bunnies can safely make it to the escape pods at a time at peak.</p><p>Write a function solution(entrances, exits, path) that takes an array of integers denoting where the groups of gathered bunnies are, an array of integers denoting where the escape pods are located, and an array of an array of integers of the corridors, returning the total number of bunnies that can get through at each time step as an int. The entrances and exits are disjoint and thus will never overlap. The path element path[A][B] = C describes that the corridor going from A to B can fit C bunnies at each time step.  There are at most 50 rooms connected by the corridors and at most 2000000 bunnies that will fit at a time.</p><p>For example, if you have:<br>entrances = [0, 1]<br>exits = [4, 5]<br>path = [<br>  [0, 0, 4, 6, 0, 0],  # Room 0: Bunnies<br>  [0, 0, 5, 2, 0, 0],  # Room 1: Bunnies<br>  [0, 0, 0, 0, 4, 4],  # Room 2: Intermediate room<br>  [0, 0, 0, 0, 6, 6],  # Room 3: Intermediate room<br>  [0, 0, 0, 0, 0, 0],  # Room 4: Escape pods<br>  [0, 0, 0, 0, 0, 0],  # Room 5: Escape pods<br>]</p><p>Then in each time step, the following might happen:<br>0 sends 4/4 bunnies to 2 and 6/6 bunnies to 3<br>1 sends 4/5 bunnies to 2 and 2/2 bunnies to 3<br>2 sends 4/4 bunnies to 4 and 4/4 bunnies to 5<br>3 sends 4/6 bunnies to 4 and 4/6 bunnies to 5</p><p>So, in total, 16 bunnies could make it to the escape pods at 4 and 5 at each time step.  (Note that in this example, room 3 could have sent any variation of 8 bunnies to 4 and 5, such as 2/6 and 6/6, but the final solution remains the same.)</p></blockquote><h3 id="测试样例-5"><a href="#测试样例-5" class="headerlink" title="测试样例"></a>测试样例</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">solution.solution([0], [3], [[0, 7, 0, 0], [0, 0, 6, 0], [0, 0, 0, 8], [9, 0, 0, 0]])</span><br><span class="line">Output:</span><br><span class="line"><span class="code">    6</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">Input:</span><br><span class="line">solution.solution([0, 1], [4, 5], [[0, 0, 4, 6, 0, 0], [0, 0, 5, 2, 0, 0], [0, 0, 0, 0, 4, 4], [0, 0, 0, 0, 6, 6], [0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]])</span><br><span class="line">Output:</span><br><span class="line"><span class="code">    16</span></span><br></pre></td></tr></table></figure><h3 id="题解-6"><a href="#题解-6" class="headerlink" title="题解"></a>题解</h3><p>经典网络流，《挑战》上有原题，只是没有包装，在入流和出流分别加上一个总入流和总出流。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">entrances, exits, path</span>):</span><br><span class="line">    MAX_NUM = <span class="number">4000000</span></span><br><span class="line">    n = <span class="built_in">len</span>(path)</span><br><span class="line">    </span><br><span class="line">    visited = [<span class="number">0</span>] * n</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">x, num</span>):</span><br><span class="line">        <span class="comment"># start from room x</span></span><br><span class="line">        <span class="comment"># return number of bunnies get through</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> visited[x]:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">in</span> exits:</span><br><span class="line">            <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line">        visited[x] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> path[x][i] &lt;= <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            f = dfs(i, <span class="built_in">min</span>(num, path[x][i]))</span><br><span class="line">            <span class="keyword">if</span> f &lt;= <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            path[x][i] -= f</span><br><span class="line">            path[i][x] += f</span><br><span class="line">            visited[x] = <span class="number">0</span></span><br><span class="line">            <span class="keyword">return</span> f</span><br><span class="line">        visited[x] = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    f = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> f &gt; <span class="number">0</span>:</span><br><span class="line">        f = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> e <span class="keyword">in</span> entrances:</span><br><span class="line">            f += dfs(e, MAX_NUM)</span><br><span class="line">        res += f</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="Level-4-2"><a href="#Level-4-2" class="headerlink" title="Level 4-2"></a>Level 4-2</h2><h3 id="题目-7"><a href="#题目-7" class="headerlink" title="题目"></a>题目</h3><blockquote><p>Running with Bunnies</p><p>You and the bunny workers need to get out of this collapsing death trap of a space station – and fast! Unfortunately, some of the bunnies have been weakened by their long work shifts and can’t run very fast. Their friends are trying to help them, but this escape would go a lot faster if you also pitched in. The defensive bulkhead doors have begun to close, and if you don’t make it through in time, you’ll be trapped! You need to grab as many bunnies as you can and get through the bulkheads before they close. </p><p>The time it takes to move from your starting point to all of the bunnies and to the bulkhead will be given to you in a square matrix of integers. Each row will tell you the time it takes to get to the start, first bunny, second bunny, …, last bunny, and the bulkhead in that order. The order of the rows follows the same pattern (start, each bunny, bulkhead). The bunnies can jump into your arms, so picking them up is instantaneous, and arriving at the bulkhead at the same time as it seals still allows for a successful, if dramatic, escape. (Don’t worry, any bunnies you don’t pick up will be able to escape with you since they no longer have to carry the ones you did pick up.) You can revisit different spots if you wish, and moving to the bulkhead doesn’t mean you have to immediately leave – you can move to and from the bulkhead to pick up additional bunnies if time permits.</p><p>In addition to spending time traveling between bunnies, some paths interact with the space station’s security checkpoints and add time back to the clock. Adding time to the clock will delay the closing of the bulkhead doors, and if the time goes back up to 0 or a positive number after the doors have already closed, it triggers the bulkhead to reopen. Therefore, it might be possible to walk in a circle and keep gaining time: that is, each time a path is traversed, the same amount of time is used or added.</p><p>Write a function of the form solution(times, time_limit) to calculate the most bunnies you can pick up and which bunnies they are, while still escaping through the bulkhead before the doors close for good. If there are multiple sets of bunnies of the same size, return the set of bunnies with the lowest worker IDs (as indexes) in sorted order. The bunnies are represented as a sorted list by worker ID, with the first bunny being 0. There are at most 5 bunnies, and time_limit is a non-negative integer that is at most 999.</p><p>For instance, in the case of<br>[<br>  [0, 2, 2, 2, -1],  # 0 = Start<br>  [9, 0, 2, 2, -1],  # 1 = Bunny 0<br>  [9, 3, 0, 2, -1],  # 2 = Bunny 1<br>  [9, 3, 2, 0, -1],  # 3 = Bunny 2<br>  [9, 3, 2, 2,  0],  # 4 = Bulkhead<br>]<br>and a time limit of 1, the five inner array rows designate the starting point, bunny 0, bunny 1, bunny 2, and the bulkhead door exit respectively. You could take the path:</p><p>Start End Delta Time Status<br>    -   0     -    1 Bulkhead initially open<br>    0   4    -1    2<br>    4   2     2    0<br>    2   4    -1    1<br>    4   3     2   -1 Bulkhead closes<br>    3   4    -1    0 Bulkhead reopens; you and the bunnies exit</p><p>With this solution, you would pick up bunnies 1 and 2. This is the best combination for this space station hallway, so the solution is [1, 2].</p></blockquote><h3 id="测试样例-6"><a href="#测试样例-6" class="headerlink" title="测试样例"></a>测试样例</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">solution.solution([[0, 2, 2, 2, -1], [9, 0, 2, 2, -1], [9, 3, 0, 2, -1], [9, 3, 2, 0, -1], [9, 3, 2, 2, 0]], 1)</span><br><span class="line">Output:</span><br><span class="line"><span class="code">    [1, 2]</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">Input:</span><br><span class="line">solution.solution([[0, 1, 1, 1, 1], [1, 0, 1, 1, 1], [1, 1, 0, 1, 1], [1, 1, 1, 0, 1], [1, 1, 1, 1, 0]], 3)</span><br><span class="line">Output:</span><br><span class="line"><span class="code">    [0, 1]</span></span><br></pre></td></tr></table></figure><h3 id="题解-7"><a href="#题解-7" class="headerlink" title="题解"></a>题解</h3><p>这道题也是硬解的一道题，因为数据量不大，dfs后做了些剪枝过的，应该也不是正确解法。</p><ol><li>首先用dp找到从i到j消费最少的路径</li><li>然后从start处开始dfs遍历所有可能的走法，以下为两个停止dfs的情况：<ol><li>注意到这里会重复到bulkhead，最短路径原则至多到bulkhead n次</li><li>由于最终必须到达bulkhead，因此当前节点必须能走到bulkhead</li></ol></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">solution</span>(<span class="params">times, times_limit</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(times)</span><br><span class="line">    m = n-<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    dp = [[x <span class="keyword">for</span> x <span class="keyword">in</span> t] <span class="keyword">for</span> t <span class="keyword">in</span> times] <span class="comment"># copy</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                dp[j][k] = <span class="built_in">min</span>(dp[j][k], dp[j][i] + dp[i][k])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">if</span> dp[i][i] &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># pick up all bunnies</span></span><br><span class="line">            <span class="keyword">return</span> [x-<span class="number">1</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m)]</span><br><span class="line">    </span><br><span class="line">    visited = [<span class="number">0</span>] * n</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">x, limit</span>):</span><br><span class="line">        <span class="comment"># x: current buddy, limit: left limit</span></span><br><span class="line">        <span class="keyword">if</span> limit &lt; dp[x][m] <span class="keyword">or</span> visited[x] &gt; n:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> x == m:</span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> <span class="keyword">not</span> <span class="keyword">in</span> visited:</span><br><span class="line">                <span class="keyword">return</span> [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">            do_dfs = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m):</span><br><span class="line">                <span class="keyword">if</span> visited[i] == <span class="number">0</span> <span class="keyword">and</span> dp[x][i]+dp[i][x] &lt;= limit:</span><br><span class="line">                    do_dfs = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> do_dfs:</span><br><span class="line">                <span class="keyword">return</span> [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n) <span class="keyword">if</span> visited[i] &gt; <span class="number">0</span> <span class="keyword">or</span> i == m]</span><br><span class="line">        </span><br><span class="line">        res = []</span><br><span class="line">        visited[x] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> i == x:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            r = dfs(i, limit - times[x][i])</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(r) == n:</span><br><span class="line">                res = r</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(r) &gt; <span class="built_in">len</span>(res):</span><br><span class="line">                res = r</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">len</span>(r) == <span class="built_in">len</span>(res):</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(r)):</span><br><span class="line">                    <span class="keyword">if</span> r[i] &lt; res[i]:</span><br><span class="line">                        res = r</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">        visited[x] -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    </span><br><span class="line">    result = dfs(<span class="number">0</span>, times_limit)</span><br><span class="line">    result = [r-<span class="number">1</span> <span class="keyword">for</span> r <span class="keyword">in</span> result <span class="keyword">if</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, m)]</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h1 id="Level-5"><a href="#Level-5" class="headerlink" title="Level 5"></a>Level 5</h1><h2 id="Level-5-1"><a href="#Level-5-1" class="headerlink" title="Level 5-1"></a>Level 5-1</h2><p>这道题没做出来，感觉是dp，但没完全想出来</p><h3 id="题目-8"><a href="#题目-8" class="headerlink" title="题目"></a>题目</h3><blockquote><p>Expanding Nebula</p><p>You’ve escaped Commander Lambda’s exploding space station along with numerous escape pods full of bunnies. But – oh no! – one of the escape pods has flown into a nearby nebula, causing you to lose track of it. You start monitoring the nebula, but unfortunately, just a moment too late to find where the pod went. However, you do find that the gas of the steadily expanding nebula follows a simple pattern, meaning that you should be able to determine the previous state of the gas and narrow down where you might find the pod.</p><p>From the scans of the nebula, you have found that it is very flat and distributed in distinct patches, so you can model it as a 2D grid. You find that the current existence of gas in a cell of the grid is determined exactly by its 4 nearby cells, specifically, (1) that cell, (2) the cell below it, (3) the cell to the right of it, and (4) the cell below and to the right of it. If, in the current state, exactly 1 of those 4 cells in the 2x2 block has gas, then it will also have gas in the next state. Otherwise, the cell will be empty in the next state.</p><p>For example, let’s say the previous state of the grid (p) was:<br>.O..<br>..O.<br>…O<br>O…</p><p>To see how this grid will change to become the current grid (c) over the next time step, consider the 2x2 blocks of cells around each cell.  Of the 2x2 block of [p[0][0], p[0][1], p[1][0], p[1][1]], only p[0][1] has gas in it, which means this 2x2 block would become cell c[0][0] with gas in the next time step:<br>.O -&gt; O<br>..</p><p>Likewise, in the next 2x2 block to the right consisting of [p[0][1], p[0][2], p[1][1], p[1][2]], two of the containing cells have gas, so in the next state of the grid, c[0][1] will NOT have gas:<br>O. -&gt; .<br>.O</p><p>Following this pattern to its conclusion, from the previous state p, the current state of the grid c will be:<br>O.O<br>.O.<br>O.O</p><p>Note that the resulting output will have 1 fewer row and column, since the bottom and rightmost cells do not have a cell below and to the right of them, respectively.</p><p>Write a function solution(g) where g is an array of array of bools saying whether there is gas in each cell (the current scan of the nebula), and return an int with the number of possible previous states that could have resulted in that grid after 1 time step.  For instance, if the function were given the current state c above, it would deduce that the possible previous states were p (given above) as well as its horizontal and vertical reflections, and would return 4. The width of the grid will be between 3 and 50 inclusive, and the height of the grid will be between 3 and 9 inclusive.  The solution will always be less than one billion (10^9).</p></blockquote><h3 id="测试样例-7"><a href="#测试样例-7" class="headerlink" title="测试样例"></a>测试样例</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">solution.solution([[True, True, False, True, False, True, False, True, True, False], [True, True, False, False, False, False, True, True, True, False], [True, True, False, False, False, False, False, False, False, True], [False, True, False, False, False, False, True, True, False, False]])</span><br><span class="line">Output:</span><br><span class="line"><span class="code">    11567</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">Input:</span><br><span class="line">solution.solution([[True, False, True], [False, True, False], [True, False, True]])</span><br><span class="line">Output:</span><br><span class="line"><span class="code">    4</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">Input:</span><br><span class="line">solution.solution([[True, False, True, False, False, True, True, True], [True, False, True, False, False, False, True, False], [True, True, True, False, False, False, True, False], [True, False, True, False, False, False, True, False], [True, False, True, False, False, True, True, True]])</span><br><span class="line">Output:</span><br><span class="line"><span class="code">    254</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;非常意外得在一次技术搜索中跳出了foo bar参赛的页面，曾听闻过这是Google的一个特殊招聘渠道，不过感觉近几年这个挑战被宣传后更多得只是一个有趣的挑战，近几年也没见到有人通过这个参与面试了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://yueyue200830.github.io/categories/Algorithm/"/>
    
    
      <category term="Algorithm" scheme="https://yueyue200830.github.io/tags/Algorithm/"/>
    
      <category term="Python" scheme="https://yueyue200830.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>前端图画绘制——Canvas</title>
    <link href="https://yueyue200830.github.io/2021/04/18/%E5%89%8D%E7%AB%AF%E5%9B%BE%E7%94%BB%E7%BB%98%E5%88%B6%E2%80%94%E2%80%94Canvas/"/>
    <id>https://yueyue200830.github.io/2021/04/18/%E5%89%8D%E7%AB%AF%E5%9B%BE%E7%94%BB%E7%BB%98%E5%88%B6%E2%80%94%E2%80%94Canvas/</id>
    <published>2021-04-18T14:18:41.000Z</published>
    <updated>2021-04-18T14:18:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个假全栈开发者，遇到一个需求要在页面上显示地图，然后根据房间点击跳转，原生HTML有两种解决方法：SVG和Canvas，这两种都是在前端画图，但原理和实现完全不一样。</p><span id="more"></span><h1 id="SVG和Canvas的区别"><a href="#SVG和Canvas的区别" class="headerlink" title="SVG和Canvas的区别"></a>SVG和Canvas的区别</h1><p>SVG和Canvas最大的区别是SVG是矢量图而Canvas是非矢量图，Canvas是HTML5内自带的标签，而SVG则其实并非必须基于HTML，它类似JPG、GIF，是一种定义的格式，甚至可以采用Adobe AI来画SVG。</p><p>在页面绘制方面，Canvas逻辑上是一块画布，我们在画布上通过js画我们想要的图案，因此若要做到动态效果，Canvas必须进行重绘，也就是Canvas是通过代码把每一帧写出来的方式做到的动画效果，而这样的开发也更多的依赖于前端工程师，因此Canvas更多的会用在复杂的场景上，如3D等。</p><p>而SVG则是仅采用HTML标签绘制，它也可以类似JPG一样采用image标签导入显示，SVG的动画效果采用标签animate实现，支持触发各种listener的事件，个人理解为通过HTML标签读取并执行相应js。SVG作为矢量图更多的用于一些动画渲染，比如loading图标，因为矢量且轻量，可以减少传输的数据量，又不会失真，而个人感觉SVG应该更多的是UX画的（？）。实际上我感觉SVG更像一个轻量级的Flash，因为AI里制作动画十分像Flash的模式。</p><h1 id="Canvas基本入门"><a href="#Canvas基本入门" class="headerlink" title="Canvas基本入门"></a>Canvas基本入门</h1><h2 id="Canvas标签"><a href="#Canvas标签" class="headerlink" title="Canvas标签"></a>Canvas标签</h2><p>Canvas在HTML部分只需要写一个标签，绘制部分全部交给js，所以必须要填id，而在标签内部，可以写一些文字，当canvas标签不支持时会显示。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;canvasLearning&quot;</span>&gt;</span></span><br><span class="line">  抱歉，您的浏览器不支持canvas元素</span><br><span class="line">  （这些内容将会在不支持<span class="tag">&lt;<span class="name">canvas</span>&gt;</span>元素的浏览器或是禁用了JavaScript的浏览器内渲染并展现）</span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Canvas坐标"><a href="#Canvas坐标" class="headerlink" title="Canvas坐标"></a>Canvas坐标</h2><p>Canvas坐标和大部分CS坐标一样，左上角是0，0。图片来源：<a href="https://www.cnblogs.com/fly_dragon/p/10416034.html">Canvas入门到高级详解(上)</a></p><img src="/2021/04/18/%E5%89%8D%E7%AB%AF%E5%9B%BE%E7%94%BB%E7%BB%98%E5%88%B6%E2%80%94%E2%80%94Canvas/1.png" class="" title="canvas坐标"><h2 id="Canvas绘制——Context"><a href="#Canvas绘制——Context" class="headerlink" title="Canvas绘制——Context"></a>Canvas绘制——Context</h2><p>Canvas绘制需要通过js获取canvas的上下文（context），用context来画的，2d是二维画图，也就是我们一般用的，如果用3d则是WebGL。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;canvasLearning&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>)</span><br></pre></td></tr></table></figure><p>一个小例子，画一个红色的正方形。<br>canvas画图和古老的MFC很像，首先定义画笔的颜色、粗细、样式等，也就是这里的<code>fillStyle</code>，然后通过函数画图，这里是画一个实心的长方形。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;canvasLearning&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&#x27;rgb(200,0,0)&#x27;</span></span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">50</span>)</span><br></pre></td></tr></table></figure><h2 id="绘制基本图形"><a href="#绘制基本图形" class="headerlink" title="绘制基本图形"></a>绘制基本图形</h2><h3 id="矩形"><a href="#矩形" class="headerlink" title="矩形"></a>矩形</h3><p>矩形有三种画法，全填充的<code>fillRect(x, y, width, height)</code>，描边的<code>strokeRect(x, y, width, height)</code>和清空矩形内的画布<code>clearRect(x, y, width, height)</code>。<br>这里的x和y是矩形左上角的点，也是在坐标轴内坐标最小的点。</p><p>一个例子，来自MDN</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;canvasLearning&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ctx.<span class="title function_">fillRect</span>(<span class="number">25</span>, <span class="number">25</span>, <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line">ctx.<span class="title function_">clearRect</span>(<span class="number">45</span>, <span class="number">45</span>, <span class="number">60</span>, <span class="number">60</span>)</span><br><span class="line">ctx.<span class="title function_">strokeRect</span>(<span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>)</span><br></pre></td></tr></table></figure><p>结果如下：</p><img src="/2021/04/18/%E5%89%8D%E7%AB%AF%E5%9B%BE%E7%94%BB%E7%BB%98%E5%88%B6%E2%80%94%E2%80%94Canvas/rect.png" class="" title="矩形"><h3 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h3><p>这里的路径是指由很多个点或线组成的图案，可以绘制空心也可绘制实心。于矩形不同的是这里会需要<code>beginPath()</code>作为开始绘制路径的命令，并且当使用<code>stroke()</code>（空心）或<code>fill()</code>（实心）时才会执行绘制。</p><p>移动画笔位置命令为<code>moveTo(x, y)</code></p><p>下面的绘制是基于路径的绘制方法。</p><h3 id="直线"><a href="#直线" class="headerlink" title="直线"></a>直线</h3><p><code>lineTo(x, y)</code>会从当前位置绘制一条线到坐标（x，y）</p><p>例子，绘制三角形，来自MDN</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;canvas&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 填充三角形</span></span><br><span class="line">ctx.<span class="title function_">beginPath</span>()</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">25</span>, <span class="number">25</span>)</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">105</span>, <span class="number">25</span>)</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">25</span>, <span class="number">105</span>)</span><br><span class="line">ctx.<span class="title function_">fill</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 描边三角形</span></span><br><span class="line">ctx.<span class="title function_">beginPath</span>()</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">125</span>, <span class="number">125</span>)</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">125</span>, <span class="number">45</span>)</span><br><span class="line">ctx.<span class="title function_">lineTo</span>(<span class="number">45</span>, <span class="number">125</span>)</span><br><span class="line">ctx.<span class="title function_">closePath</span>()</span><br><span class="line">ctx.<span class="title function_">stroke</span>()</span><br></pre></td></tr></table></figure><img src="/2021/04/18/%E5%89%8D%E7%AB%AF%E5%9B%BE%E7%94%BB%E7%BB%98%E5%88%B6%E2%80%94%E2%80%94Canvas/lineTo.png" class="" title="直线"><h3 id="圆弧"><a href="#圆弧" class="headerlink" title="圆弧"></a>圆弧</h3><p><code>arc(x, y, radius, startAngle, endAngle, anticlockwise)</code>绘制一个以<code>(x, y)</code>为圆心，半径为radius的圆弧，圆弧的角度采用弧度制，x轴正方向为0，anticlockwise为<code>true</code>或<code>false</code>表示顺时针或逆时针。</p><p>例子，来自MDN</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ctx.<span class="title function_">beginPath</span>()</span><br><span class="line">ctx.<span class="title function_">arc</span>(<span class="number">75</span>, <span class="number">75</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">2</span>, <span class="literal">true</span>)</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">110</span>, <span class="number">75</span>)</span><br><span class="line">ctx.<span class="title function_">arc</span>(<span class="number">75</span>, <span class="number">75</span>, <span class="number">35</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span>, <span class="literal">false</span>)</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">65</span>, <span class="number">65</span>)</span><br><span class="line">ctx.<span class="title function_">arc</span>(<span class="number">60</span>, <span class="number">65</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">2</span>, <span class="literal">true</span>)</span><br><span class="line">ctx.<span class="title function_">moveTo</span>(<span class="number">95</span>, <span class="number">65</span>)</span><br><span class="line">ctx.<span class="title function_">arc</span>(<span class="number">90</span>, <span class="number">65</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">2</span>, <span class="literal">true</span>)</span><br><span class="line">ctx.<span class="title function_">stroke</span>()</span><br></pre></td></tr></table></figure><img src="/2021/04/18/%E5%89%8D%E7%AB%AF%E5%9B%BE%E7%94%BB%E7%BB%98%E5%88%B6%E2%80%94%E2%80%94Canvas/arc.png" class="" title="圆弧"><h2 id="Style样式"><a href="#Style样式" class="headerlink" title="Style样式"></a>Style样式</h2><p>最基本的就是设置绘制颜色，支持CSS中的颜色表达，命令为<code>ctx.style = &#39;...&#39;</code></p><p>如果绘制线条，那么牵扯到线条的粗细，可以通过<code>ctx.lineWidth</code>设置</p><p>此外还有很多可以设置的参数，而比较特殊的我认为是渐变效果，有线性渐变<code>createLinearGradient(x1, y1, x2, y2)</code>和径向渐变<code>createRadialGradient(x1, y1, r1, x2, y2, r2)</code></p><h2 id="绘制文字"><a href="#绘制文字" class="headerlink" title="绘制文字"></a>绘制文字</h2><p>首先通过<code>ctx.font</code>设置字体，然后通过<code>fillText(text, x, y)</code>就可以绘制文字。</p><p>但是！这个文字很模糊，据说是绘制优化问题，它的绘制和HTML显示的绘制方法不一样，如果想要做到清晰，就需要设置一个高清画布，也就是一个实际画布大小很大，然后被缩小显示的方法。</p><p>我修改了别人的一个代码，但是找不到网址了。。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setHiDPICanvas</span> (w, h, ratio) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">PIXEL_RATIO</span> = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> c = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;canvas&quot;</span>)</span><br><span class="line">    <span class="keyword">let</span> ctx = c.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>)</span><br><span class="line">    <span class="keyword">let</span> dpr = <span class="variable language_">window</span>.<span class="property">devicePixelRatio</span> || <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> bsr = ctx[<span class="string">&#x27;webkitBackingStorePixelRatio&#x27;</span>] ||</span><br><span class="line">      ctx[<span class="string">&#x27;mozBackingStorePixelRatio&#x27;</span>] ||</span><br><span class="line">      ctx[<span class="string">&#x27;msBackingStorePixelRatio&#x27;</span>] ||</span><br><span class="line">      ctx[<span class="string">&#x27;oBackingStorePixelRatio&#x27;</span>] ||</span><br><span class="line">      ctx[<span class="string">&#x27;backingStorePixelRatio&#x27;</span>] || <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dpr / bsr</span><br><span class="line">  &#125;)()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!ratio) &#123;</span><br><span class="line">    ratio = <span class="variable constant_">PIXEL_RATIO</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;canvasLearning&#x27;</span>)</span><br><span class="line">  canvas.<span class="property">width</span> = w * ratio</span><br><span class="line">  canvas.<span class="property">height</span> = h * ratio</span><br><span class="line">  canvas.<span class="property">style</span>.<span class="property">width</span> = w + <span class="string">&quot;px&quot;</span></span><br><span class="line">  canvas.<span class="property">style</span>.<span class="property">height</span> = h + <span class="string">&quot;px&quot;</span></span><br><span class="line">  canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>).<span class="title function_">setTransform</span>(ratio, <span class="number">0</span>, <span class="number">0</span>, ratio, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一个假全栈开发者，遇到一个需求要在页面上显示地图，然后根据房间点击跳转，原生HTML有两种解决方法：SVG和Canvas，这两种都是在前端画图，但原理和实现完全不一样。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Frontend" scheme="https://yueyue200830.github.io/categories/Frontend/"/>
    
    
      <category term="HTML" scheme="https://yueyue200830.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>go-micro 入门（一）——安装运行HelloWorld</title>
    <link href="https://yueyue200830.github.io/2021/01/23/go-micro%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85%E8%B7%91%E9%80%9AHelloWorld/"/>
    <id>https://yueyue200830.github.io/2021/01/23/go-micro%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%AE%89%E8%A3%85%E8%B7%91%E9%80%9AHelloWorld/</id>
    <published>2021-01-23T14:59:49.000Z</published>
    <updated>2021-01-23T14:59:49.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Update</strong><br>go-micro作者表示不再维护go-micro而仅专心开发micro（原因之一应该是micro v3变成商业版可以赚钱吧。。）</p><p>本文是v3的教程，但兼容v2。不过我跑通v3后发现用不了gin退回v2了。</p><p>———-update分割线———-</p><p>go-micro是Go的常见微服务之一，不过它的官方文档和别人的教程甚至代码的repo都十分混乱，初入门的我直接下载最新的版本被教程搞得一头雾水，这里记录一下以及希望有朋友不要一起踩坑啦（如果作者又搞事情我也无话可说）</p><span id="more"></span><p>题外话：悲催的我刚跑通<code>v2.9</code>第二天打开GitHub发现更新到了<code>v3.01</code>😓</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li><strong>OS</strong>: Win10</li><li><strong>Go</strong>: 1.15.6（1.14以上应该都可以，v2建议用1.14不要1.15）</li><li><strong>go-micro</strong>: 3.0.1（本文含v2.9的基础安装）</li><li><strong>protoc</strong>: 3.14.0</li><li><strong>consul</strong>: 1.9.1（Docker）</li><li><strong>GoLand</strong>: 2020.3.1</li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="go-micro"><a href="#go-micro" class="headerlink" title="go-micro"></a>go-micro</h2><p><a href="https://github.com/asim/go-micro">官方Github</a></p><p>go-micro的repo其实有些混乱，以及除了go-micro之外，还有一个micro的repo，两者之间的关系我暂时还没搞懂（似乎micro可安装后对go-micro进行查看）</p><p>安装go-micro的v3版本，其实之前有段时间好像叫nitro来着，但最后正式版还是回归了go-micro</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/asim/go-micro/v3</span><br></pre></td></tr></table></figure><p>如果出问题记得设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go <span class="built_in">env</span> -w GO111MODULE=on</span><br></pre></td></tr></table></figure><p>go-micro的v1和v2都是<code>github.com/micro/go-micro/[v2]</code>，不知道为什么反而v3变回了个人的repo路径</p><h2 id="go-micro-plugins"><a href="#go-micro-plugins" class="headerlink" title="go-micro plugins"></a>go-micro plugins</h2><p>go-micro在v1和v2采用<code>go-plugins</code>的一个单独repo <a href="https://github.com/microhq/go-plugins">Github</a>，但在v3的时候又重新回到了<code>go-micro/plugins</code>下面<a href="https://github.com/asim/go-micro/tree/master/plugins">Github</a></p><p>没有成功获得插件正确安装方法，只会傻傻得一个个安装。。</p><p>v2的安装命令，注意替换需要的插件的路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/micro/go-plugins/registry/consul/v2</span><br></pre></td></tr></table></figure><p>v3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/asim/go-micro/plugins/registry/consul/v3</span><br></pre></td></tr></table></figure><h2 id="protobuf"><a href="#protobuf" class="headerlink" title="protobuf"></a>protobuf</h2><h3 id="安装protobuf"><a href="#安装protobuf" class="headerlink" title="安装protobuf"></a>安装protobuf</h3><p>protobuf介绍自行搜索，类似json但占用更小的空间<br>在<a href="https://github.com/protocolbuffers/protobuf">官方Github</a>里的release下载最新的包，选择对应的os，比如我下载的是<code>protoc-3.14.0-win64.zip</code>（不懂为什么一群人教程下32位）</p><p>放到想要的安装目录下，比如我的<code>C:\Program Files\Protobuf</code>，把bin目录加入环境变量</p><p>命令行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;protoc --version</span><br><span class="line">libprotoc 3.14.0</span><br></pre></td></tr></table></figure><h3 id="安装protoc-gen-go"><a href="#安装protoc-gen-go" class="headerlink" title="安装protoc-gen-go"></a>安装protoc-gen-go</h3><p>protobuf默认是不支持go的编译的，因此需要安装<code>protoc-gen-go</code>来支持编译为go文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/golang/protobuf/protoc-gen-go</span><br></pre></td></tr></table></figure><h3 id="安装protoc-gen-micro"><a href="#安装protoc-gen-micro" class="headerlink" title="安装protoc-gen-micro"></a>安装protoc-gen-micro</h3><p>protoc-gen-micro是用于生成针对micro可用的文件 <a href="https://github.com/asim/go-micro/tree/master/cmd/protoc-gen-micro">Github</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/asim/go-micro/cmd/protoc-gen-micro/v3</span><br></pre></td></tr></table></figure><h3 id="测试安装成功"><a href="#测试安装成功" class="headerlink" title="测试安装成功"></a>测试安装成功</h3><p>首先创建一个文件<code>greeter.proto</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">service Greeter &#123;</span><br><span class="line">rpc Hello(Request) returns (Response) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message Request &#123;</span><br><span class="line">string name = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message Response &#123;</span><br><span class="line">string msg = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc --micro_out=. --go_out=. greeter.proto</span><br></pre></td></tr></table></figure><p>如果能生成<code>greeter.pb.go</code>和<code>greeter.pb.micro.go</code>那就证明安装成功了。<br>上面的文件会出现一些提示要求specify go package的路径，但暂时不影响</p><h2 id="consul"><a href="#consul" class="headerlink" title="consul"></a>consul</h2><p>这里我偷懒了以下，下了一个docker镜像包，因为本身也准备用docker，安装在电脑上似乎没那么必要</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull consul</span><br><span class="line">docker run --name consul1 -d -p 8500:8500 -p 8300:8300 -p 8301:8301 -p 8302:8302 -p 8600:8600 consul agent -server -bootstrap-expect=1 -ui -<span class="built_in">bind</span>=0.0.0.0 -client=0.0.0.0</span><br></pre></td></tr></table></figure><p>浏览器<code>localhost:8500</code>，可以看到当前已注册的服务</p><h1 id="创建第一个micro服务"><a href="#创建第一个micro服务" class="headerlink" title="创建第一个micro服务"></a>创建第一个micro服务</h1><p>这里只是简单的运行micro这个服务</p><p><code>main.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/asim/go-micro/v3&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">service := micro.NewService(</span><br><span class="line">micro.Name(<span class="string">&quot;helloworld&quot;</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">service.Init()</span><br><span class="line"></span><br><span class="line">service.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="采用consul作为注册中心"><a href="#采用consul作为注册中心" class="headerlink" title="采用consul作为注册中心"></a>采用consul作为注册中心</h1><p>go-micro v2和v3都是采用mdns作为注册中心的，但是consul有更多的功能以及UI（另外常用的还有etcd和zookeeper）</p><p>而更加坑的是不知道什么问题，我电脑明明可运行mdns，采用mdns的时候micro的服务无被发现（可能win10的锅，也有说法防火墙的锅，我ubuntu运行正常，有人win10也运行正常）</p><p>首先需要运行consul，走默认端口8500</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/asim/go-micro/plugins/registry/consul/v3&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/asim/go-micro/v3&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/asim/go-micro/v3/registry&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> consulReg registry.Registry</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">consulReg = consul.NewRegistry(registry.Addrs(<span class="string">&quot;:8500&quot;</span>)) <span class="comment">// 告知consul的端口号，如果走默认可以不填写</span></span><br><span class="line">                                                              <span class="comment">// 冒号前面可填ip地址，默认localhost</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">service := micro.NewService(</span><br><span class="line">micro.Name(<span class="string">&quot;helloworld&quot;</span>),</span><br><span class="line">micro.Address(<span class="string">&quot;:18001&quot;</span>),     <span class="comment">// 设置端口18001</span></span><br><span class="line">micro.Registry(consulReg),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">service.Init()</span><br><span class="line"></span><br><span class="line">service.Run()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在consul的ui中可以看到有一个叫做<code>helloworld</code>的服务</p><h1 id="HelloWorld微服务"><a href="#HelloWorld微服务" class="headerlink" title="HelloWorld微服务"></a>HelloWorld微服务</h1><p>这里我们创建一个service和一个client，模拟最简单的微服务的交互场景（代码改编于go-micro/example/service)</p><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p>文件夹<code>go-micro-test</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">│  client.go</span><br><span class="line">│  go.mod</span><br><span class="line">│  go.sum</span><br><span class="line">│  greeter.go</span><br><span class="line">│</span><br><span class="line">└─proto</span><br><span class="line">        greeter.pb.go</span><br><span class="line">        greeter.pb.micro.go</span><br><span class="line">        greeter.proto</span><br></pre></td></tr></table></figure><h2 id="定义proto"><a href="#定义proto" class="headerlink" title="定义proto"></a>定义proto</h2><p><em>如果采用GoLand开发的话推荐安装插件<code>Protocol Buffer Editor</code>，网上看到推荐<code>Protobuf Support</code>已经被deprecated了</em></p><p><code>greeter.proto</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">syntax = &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">package proto;</span><br><span class="line">option go_package = &quot;/proto&quot;;</span><br><span class="line"></span><br><span class="line">service Greeter &#123;</span><br><span class="line">  rpc Hello(Request) returns (Response) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message Request &#123;</span><br><span class="line">  string name = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message Response &#123;</span><br><span class="line">  string greeting = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里定义了一个叫做<code>Greeter</code>的调用方法（client对service的rpc），其中<code>Request</code>就是请求的数据内容，<code>Response</code>就是service返回的内容<br><code>package</code>是生成的文件的包名，<code>go_package</code>是总的包路径</p><p>生成对应go文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc --micro_out=. --go_out=. proto/greeter.proto</span><br></pre></td></tr></table></figure><p>获得<code>greeter.pb.go</code>和<code>greeter.pb.micro.go</code></p><h2 id="编写service"><a href="#编写service" class="headerlink" title="编写service"></a>编写service</h2><p>这里叫做<code>greeter.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/asim/go-micro/plugins/registry/consul/v3&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/asim/go-micro/v3&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/asim/go-micro/v3/registry&quot;</span></span><br><span class="line">proto <span class="string">&quot;go-micro-test/proto&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Greeter <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(g *Greeter)</span></span> Hello(ctx context.Context, req *proto.Request, rsp *proto.Response) <span class="type">error</span> &#123;</span><br><span class="line">rsp.Greeting = <span class="string">&quot;Hello &quot;</span> + req.Name</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">consulReg := consul.NewRegistry(registry.Addrs(<span class="string">&quot;:8500&quot;</span>))</span><br><span class="line"></span><br><span class="line">service := micro.NewService(</span><br><span class="line">micro.Name(<span class="string">&quot;greeter&quot;</span>),</span><br><span class="line">micro.Registry(consulReg),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">service.Init()</span><br><span class="line"></span><br><span class="line">proto.RegisterGreeterHandler(service.Server(), <span class="built_in">new</span>(Greeter))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err := service.Run(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<code>Greeter</code>和它的方法<code>Hello</code>是用来实现我们在proto中定义的调用</p><h2 id="编写client"><a href="#编写client" class="headerlink" title="编写client"></a>编写client</h2><p>文件<code>client.go</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/asim/go-micro/plugins/registry/consul/v3&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/asim/go-micro/v3&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/asim/go-micro/v3/registry&quot;</span></span><br><span class="line">proto <span class="string">&quot;go-micro-test/proto&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">consulReg := consul.NewRegistry(registry.Addrs(<span class="string">&quot;:8500&quot;</span>))</span><br><span class="line"></span><br><span class="line">service := micro.NewService(</span><br><span class="line">micro.Name(<span class="string">&quot;greeter.client&quot;</span>),</span><br><span class="line">micro.Registry(consulReg),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">service.Init()</span><br><span class="line"></span><br><span class="line">greeter := proto.NewGreeterService(<span class="string">&quot;greeter&quot;</span>, service.Client())</span><br><span class="line"></span><br><span class="line">rsp, err := greeter.Hello(context.TODO(), &amp;proto.Request&#123;Name: <span class="string">&quot;World&quot;</span>&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(rsp.Greeting)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>首先启动ervice</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run greeter.go</span><br></pre></td></tr></table></figure><p>其次启动client</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run client.go</span><br></pre></td></tr></table></figure><p>如无意外可以看到client这边显示<code>Hello World</code></p><h2 id="采用mdns注册中心"><a href="#采用mdns注册中心" class="headerlink" title="采用mdns注册中心"></a>采用mdns注册中心</h2><p>直接把注册consul的删掉就好，但是我在win10下运行会返回500，ubuntu下正常<br>搜到的<a href="https://github.com/asim/go-micro/issues/692">相关issue</a>，开发者说windows不支持，但的确看到有人win10可以跑</p><p>而且mdns也的确不适合作为大型服务的注册中心，还是推荐consul或者etcd</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;&lt;br&gt;go-micro作者表示不再维护go-micro而仅专心开发micro（原因之一应该是micro v3变成商业版可以赚钱吧。。）&lt;/p&gt;
&lt;p&gt;本文是v3的教程，但兼容v2。不过我跑通v3后发现用不了gin退回v2了。&lt;/p&gt;
&lt;p&gt;———-update分割线———-&lt;/p&gt;
&lt;p&gt;go-micro是Go的常见微服务之一，不过它的官方文档和别人的教程甚至代码的repo都十分混乱，初入门的我直接下载最新的版本被教程搞得一头雾水，这里记录一下以及希望有朋友不要一起踩坑啦（如果作者又搞事情我也无话可说）&lt;/p&gt;
    
    </summary>
    
    
      <category term="Go" scheme="https://yueyue200830.github.io/categories/Go/"/>
    
    
      <category term="Go" scheme="https://yueyue200830.github.io/tags/Go/"/>
    
      <category term="go-micro" scheme="https://yueyue200830.github.io/tags/go-micro/"/>
    
      <category term="微服务" scheme="https://yueyue200830.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>C++溢出的坑</title>
    <link href="https://yueyue200830.github.io/2020/11/10/C-%E6%BA%A2%E5%87%BA%E7%9A%84%E5%9D%91/"/>
    <id>https://yueyue200830.github.io/2020/11/10/C-%E6%BA%A2%E5%87%BA%E7%9A%84%E5%9D%91/</id>
    <published>2020-11-09T16:11:33.000Z</published>
    <updated>2020-11-09T16:11:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>C++的int只有32位，计算溢出也是十分普遍的事情，但我作死得尝试采用溢出的计算方法，结果发现千万不要代码中做溢出计算，编译器分分钟把你搞死。。</p><span id="more"></span><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> x = <span class="number">0x7fffffff</span>;</span><br><span class="line">cout &lt;&lt; !(x + x + <span class="number">2</span>) &lt;&lt; endl;</span><br></pre></td></tr></table></figure><p>根据常理，输出答案应该是1，<code>2 * (0x7fffffff + 1) = 2 * 0x80000000 = 0</code>，想想挺完美的吧，结果得出是0，百思不得其解，甚至尝试用了多个编译器，结果在我windows下的codeblocks中得到了1！</p><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>查看了codeblocks的编译器，发现是32位的，其它编译器都是64位的，还以为是32位和64位的锅呢，然而并不是，实际是2014年编译器和2019年编译器的锅。。。</p><p>不死心的我把代码进行了汇编，终于发现了问题所在：</p><img src="/2020/11/10/C-%E6%BA%A2%E5%87%BA%E7%9A%84%E5%9D%91/1.png" class="" title="screenshot"><p>这是main函数的汇编截图，主要看赋值的那行开始的三行，首先第一句是赋值<code>0x7fffffff</code>给<code>-4(%rbp)</code>，然后把它和<code>-1</code>比较一下，就完事了？？？<br>Excuse me？？<br>仔细思考一下的确也没错，<code>!</code>遇到0是1，也就是比较是否为0，也就是<code>x + x + 2 == 0</code>，优化一下就是<code>x + 1 == 0</code>。。</p><p>完全没想到是编译器太优秀了，帮我自行简化了，然而因为溢出的原因，<code>x + x + 2 == 0</code>其实有两个解。。</p><p>至于为什么我的codeblocks得到了1，是因为14年的编译器还比较傻，算的是<code>2x == -2</code>。</p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>溢出的坑真的不能踩啊，还是得乖乖得写正确的代码，谁知道谁知道编译器哪天又太优秀了把代码优化了呢。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C++的int只有32位，计算溢出也是十分普遍的事情，但我作死得尝试采用溢出的计算方法，结果发现千万不要代码中做溢出计算，编译器分分钟把你搞死。。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>黑苹果安装记录</title>
    <link href="https://yueyue200830.github.io/2020/10/17/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/"/>
    <id>https://yueyue200830.github.io/2020/10/17/%E9%BB%91%E8%8B%B9%E6%9E%9C%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</id>
    <published>2020-10-17T13:08:21.000Z</published>
    <updated>2020-10-17T13:08:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个小白的黑苹果安装记录，大概花了3天时间搞定了最基本的，作为小白还是选择了clover而不是oc，我的<a href="https://github.com/yueyue200830/ASUS-B360M-8700-EFI">EFI文件</a></p><p>其实到今天要独自装一个黑苹果已经不难了，网上有无数到教程，跟着做就可以了，甚至很多笔记本都有公开到EFI文件，十分方便</p><p>此文章没什么干货，仅安装记录，无任何截图，建议点击下面参考教程</p><span id="more"></span><p>主要参考教程：</p><ol><li><a href="https://www.sqlsec.com/2020/08/xps15.html#toc-heading-6">国光大佬xps安装黑苹果</a>，入坑装黑苹果起因也是这篇文章，有黑苹果系统的下载链接（黑果小兵的博客链接找不到正确打开方式。。）</li><li><a href="https://www.bilibili.com/video/av28790265">国光大佬b站黑苹果安装视频</a></li><li><a href="https://blog.daliansky.net/MacOS-installation-tutorial-XiaoMi-Pro-installation-process-records.html">黑果小兵macOS安装教程兼小米Pro安装过程记录</a></li><li><a href="https://www.bilibili.com/video/BV1x54y1X7tS/?spm_id_from=333.788.videocard.9">2020最新macOS Catalina10.15黑苹果安装教程</a> ，安装工具从这里下载的</li></ol><h1 id="电脑配置"><a href="#电脑配置" class="headerlink" title="电脑配置"></a>电脑配置</h1><ul><li>主板：ASUS B360M-Plus GS</li><li>CPU：i7 8700</li><li>GPU：uhd 630</li><li>SSD：三星830</li><li>显示器：dell 2k</li><li>系统：Catalina 10.15.7</li><li>无蓝牙/wifi</li></ul><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>硬件：</p><ul><li>一块硬盘</li><li>一个启动u盘</li></ul><p>作为从来没试过分区的小白，我选择用一块硬盘作为启动盘，以免影响windows系统，反正台式机有得是地方放硬盘hhh</p><p>根据参考教程，<a href="https://mirrors.dtops.cc/iso/MacOS/daliansky_macos/">下载系统</a>，选择最新的文件<code>macOS Catalina 10.15.7(19H2) Installer for Clover 5122 and WEPE.dmg</code></p><p>下载相关软件，上面视频教程有评论链接，我用到了<code>balenaEtcher</code>和<code>DiskGenius</code></p><p>在<code>Github</code>上搜索搜索和自己系统对应的EFI文件（比如我的<code>8700 EFI</code>），或者去远景论坛找（但需要买注册码），如果没完全匹配的，可以先用一个相似的配置的EFI</p><h1 id="正式流程"><a href="#正式流程" class="headerlink" title="正式流程"></a>正式流程</h1><h2 id="制作启动盘"><a href="#制作启动盘" class="headerlink" title="制作启动盘"></a>制作启动盘</h2><p>用<code>balenaEtcher</code>把下载好的镜像装入U盘中，详见参考教程1或4</p><p>用<code>DiskGenius</code>将符合自己的EFI文件替换原EFI文件（注意：EFI文件的分区在Windows下无法直接显示，必须用软件），详见教程4</p><h2 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h2><p>重启电脑，选择U盘作为启动盘，首先选择<code>磁盘工具</code>格式化准备安装的硬盘，然后选择<code>安装Mac OS</code>这个硬盘进行安装，如果安装卡住尝试更换EFI</p><p>安装完毕后会自动重启，同样采用U盘作为启动盘，然后会看到启动界面选择<code>boot form &lt;DISK NAME&gt;</code>，如果EFI正常的话就可以进去了</p><p>一般来说成功安装系统没那么难，但做到功能完全可以用就相对麻烦</p><h2 id="将启动Clover设置为mac所在的盘"><a href="#将启动Clover设置为mac所在的盘" class="headerlink" title="将启动Clover设置为mac所在的盘"></a>将启动Clover设置为mac所在的盘</h2><p>采用<code>DiskGenius</code>或者直接在mac下面用<code>clover</code>挂载u盘和mac所在硬盘的EFI分区，将u盘下面的clover文件夹复制到mac下，在bios下重设启动盘即可</p><h2 id="修改为自己电脑的EFI文件"><a href="#修改为自己电脑的EFI文件" class="headerlink" title="修改为自己电脑的EFI文件"></a>修改为自己电脑的EFI文件</h2><p>我找到的EFI文件其实是主板不一致的，也导致了没有正确识别GPU，动画效果明显卡顿，其实clover文件并没有那么复杂，每一块硬件都有自己对应的配置，只要找到满足自己的硬件的EFI，拿过来替换那部分就可以了。<br>比如我主板是<code>ASUS B360M-Plus GS</code>，那么可以搜索一个满足我主板的EFI文件，然后根据网上说的对应部分，修改就好。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一个小白的黑苹果安装记录，大概花了3天时间搞定了最基本的，作为小白还是选择了clover而不是oc，我的&lt;a href=&quot;https://github.com/yueyue200830/ASUS-B360M-8700-EFI&quot;&gt;EFI文件&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其实到今天要独自装一个黑苹果已经不难了，网上有无数到教程，跟着做就可以了，甚至很多笔记本都有公开到EFI文件，十分方便&lt;/p&gt;
&lt;p&gt;此文章没什么干货，仅安装记录，无任何截图，建议点击下面参考教程&lt;/p&gt;
    
    </summary>
    
    
      <category term="Others" scheme="https://yueyue200830.github.io/categories/Others/"/>
    
    
      <category term="黑苹果" scheme="https://yueyue200830.github.io/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
    
  </entry>
  
  <entry>
    <title>2020秋招总结</title>
    <link href="https://yueyue200830.github.io/2020/09/18/2020%E7%A7%8B%E6%8B%9B%E6%80%BB%E7%BB%93/"/>
    <id>https://yueyue200830.github.io/2020/09/18/2020%E7%A7%8B%E6%8B%9B%E6%80%BB%E7%BB%93/</id>
    <published>2020-09-18T14:04:46.000Z</published>
    <updated>2020-09-18T14:04:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>漫长的秋招从往年的金八银九变成了金七银八，从七月的焦虑到八月初的痛苦到最后的收获，总体我算是幸运的，能拿到几个大厂的意向书。<br>然而反观总体面试情况，其实有点可笑，大厂面的都offer，剩下都不要我。</p><span id="more"></span><h1 id="个人情况"><a href="#个人情况" class="headerlink" title="个人情况"></a>个人情况</h1><p>投的后端岗位，略懂前端，各种不精通但Java、Go、C++都有接触，相关项目经验完全不足。<br>有两段外企实习经历，算法在普通人中算不错的。<br>投递基本全为上海的岗位</p><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>意向书：字节、美团、蚂蚁<br>感谢信：大疆（深圳，笔试挂），京东（二面挂），Akuna（电面挂），商汤（一面挂），Shopee（新加坡，一面挂）<br>无消息：腾讯（只要上海，似乎没hc），亚马逊（学校邮箱没收到笔试邮件）</p><p>其实秋招这样的结果也挺无语的，最难进的几个公司给了意向书，剩下一堆都不要我。可能是经验不足吧，大厂不是很在意培养人才，但其它厂比较在意经验（京东二面面试官明确表示我经验不足。。）</p><h1 id="字节"><a href="#字节" class="headerlink" title="字节"></a>字节</h1><p>字节应该是我最幸运的一个公司，也是第一个意向书的公司，收到意向书以后总体就轻松了不少。</p><p>因为拿到了字节的实习offer，所以可以直通车，但其实中间过程有点曲折，被打电话后莫名被投到网络工程师然后挂了，去argue后深圳的部门又打电话，之后又变成了上海的视频部门，我选择了放弃面试，再秋招正式批重新申请了。<br>十分意外得是那个部门竟然也给了我直通车的机会，就加了一轮面试，最后给了意向书。</p><h2 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h2><ul><li>问项目，讲了Go的项目，然后被深入问Go的特点，表示概念只会Java</li><li>Java的JVM</li><li>段页式存储一次数据查询几次</li><li>看我写过vue问js特性</li><li>js的promise</li><li>计网：如果浏览器页面无法加载怎么排查</li><li>算法题：最短包含某个字符串的子串</li></ul><h1 id="美团"><a href="#美团" class="headerlink" title="美团"></a>美团</h1><p>第一场笔试，编程题AK，本场题目水准不如实习。</p><h2 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h2><p>某天晚上的视频面，内容忘得差不多了，没面好</p><ul><li>hashtable和hashmap区别</li><li>第一题算法题应该是dp</li><li>后面面试官看我算法不错加了一题：最大回文子串，继续只会dp，O(n)的做法没想出来</li></ul><h2 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h2><p>一二面联系间隔了一整周，差点以为挂了。</p><p>本轮面试官思路特别跳跃，一段技术问题，一段闲聊。。。</p><ul><li>最近看什么书（被我说不看书看博客）</li><li>一般看什么博客（遇到问题再看，作死的解答，然后扯到一些和理论不相关但好玩的博客和概念）</li><li>java8特性</li></ul><h2 id="HR面"><a href="#HR面" class="headerlink" title="HR面"></a>HR面</h2><p>二面后2小时被hr面了，其实整体感觉有点push。</p><p>hr面时说要一个月出结果，然而最终大概一周多就突然收到了意向书</p><h1 id="蚂蚁金服"><a href="#蚂蚁金服" class="headerlink" title="蚂蚁金服"></a>蚂蚁金服</h1><p>能拿到蚂蚁的意向书感觉是真的很幸运的，可能所有的坏运气都用在了阿里的笔试上吧，偏偏遇到一场错排+AC自动机的笔试，最后只有0.3，是所有公司笔试中唯一没有AK编程题的笔试。</p><p>整体面试效率是很高的，基本间隔两天会有消息。因为当时在实习，每次打电话都约了其它时间，面试官都很nice的同意了。</p><h2 id="简历面（一面）"><a href="#简历面（一面）" class="headerlink" title="简历面（一面）"></a>简历面（一面）</h2><p>简历面问的十分基础，因此回答得还不错</p><ul><li>二叉树，平衡二叉树，红黑树，B+树简单说一下</li><li>mysql分页查询</li><li>left join， right join</li><li>mysql 投影（被坑到了，我只知道英文projection）</li><li>数据库锁（乐观锁，悲观锁）</li><li>java反射机制，可以干什么</li><li>设计模式</li><li>IOC</li><li>Jvm</li><li>文件读取，如果一个比如100G的文件，要做一些处理，怎么设计</li><li>排序算法：快排、归并（用法）、桶排</li><li>进程和线程</li><li>缓存不命中的替换策略</li><li>http协议</li></ul><h2 id="二面-1"><a href="#二面-1" class="headerlink" title="二面"></a>二面</h2><p>二面就比较深入了，我比较菜，但面试官人也超级好，挑我会的问</p><p>主要就问了项目，中间件，还有分布式，然而我并不会分布式，面试官很耐心得引导我怎么设计某个分布式的东西，于是我瞎猜了一通，没想到过了。</p><h2 id="三面"><a href="#三面" class="headerlink" title="三面"></a>三面</h2><p>说实话三面面得很不好，疯狂问我实习项目相关的，但我不太能讲清楚（自己觉得讲得还听清楚的呀）</p><h2 id="四面（交叉面）"><a href="#四面（交叉面）" class="headerlink" title="四面（交叉面）"></a>四面（交叉面）</h2><p>没想到会有交叉面，但又面得十分糟糕，没有把我项目遇到的问题讲清楚，最后还为了挽回一下我的评级多问了点问题。</p><h2 id="HR面-1"><a href="#HR面-1" class="headerlink" title="HR面"></a>HR面</h2><p>阿里的这个hr是我面过最厉害的hr，可以一阵见血得指出我的问题，太太太厉害了。</p><h1 id="腾讯"><a href="#腾讯" class="headerlink" title="腾讯"></a>腾讯</h1><p>被广东地区部门捞过，表示只要上海的就没后续了</p><p>第一轮笔试70分钟AK都没人捞也是很心塞的。</p><h1 id="大疆"><a href="#大疆" class="headerlink" title="大疆"></a>大疆</h1><p>随手投了一个没想到C++的岗位，笔试算法AK，概念乱猜，直接感谢信，不过大疆据说今年招的人很少</p><h1 id="京东"><a href="#京东" class="headerlink" title="京东"></a>京东</h1><p>笔试算法AK，一面体验很好，二面不行</p><h2 id="一面-1"><a href="#一面-1" class="headerlink" title="一面"></a>一面</h2><p>算是基础面吧，京东的面试还挺固定的，面试前看了面经，Java spring必考，不会就挂，然后疯狂补了一下。</p><p>一些小插曲：面试期间腾讯来电话，和面试官说了面试官很nice的说过会儿打回来。</p><h2 id="二面-2"><a href="#二面-2" class="headerlink" title="二面"></a>二面</h2><p>上来看到我的项目就怼我项目经验不足，就表明不想要我呗，就差没被我怼回去了。。</p><p>金融相关部门</p><h1 id="Akuna"><a href="#Akuna" class="headerlink" title="Akuna"></a>Akuna</h1><p>唯一一家明知C++还投递的公司，不了解公司业务看着是个外企就投了</p><p>笔试是网上做题，有概念和算法，算法题感觉不错，测试点全过了。</p><h2 id="电面"><a href="#电面" class="headerlink" title="电面"></a>电面</h2><p>这轮面试说实话是我准备不充分，甚至不太记得C++怎么写。。</p><ol><li>十六进制的与/或操作</li><li>改正一棵树找最大值的函数</li><li>实现一个account类，使得可以实想两个帐户之间的转账功能（涉及到锁）</li><li>实现STL中的vector（脑子不清晰这题没写出来）</li></ol><h1 id="商汤"><a href="#商汤" class="headerlink" title="商汤"></a>商汤</h1><p>也是一家随手投，没看清岗位的公司，要求没写清楚要会容器分布式等知识啊。。。</p><p>面试时我Java面试官Go，没有什么知识交集。</p><h1 id="Shopee"><a href="#Shopee" class="headerlink" title="Shopee"></a>Shopee</h1><p>投的是新加坡的岗，对于中国人开的外国公司体验就一个国内企业的感觉，没有任何外企的感觉。</p><p>笔试概念占据超高的比例，算法题超级简单。。</p><h2 id="一面-2"><a href="#一面-2" class="headerlink" title="一面"></a>一面</h2><p>hr晚上11点给我发面试邀请我就被吓到了。。。</p><p>概念部分中规中矩没什么太难的点，算法写hashmap又没认真思考过然后写崩了，还有一题两个栈实现一个队列。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;漫长的秋招从往年的金八银九变成了金七银八，从七月的焦虑到八月初的痛苦到最后的收获，总体我算是幸运的，能拿到几个大厂的意向书。&lt;br&gt;然而反观总体面试情况，其实有点可笑，大厂面的都offer，剩下都不要我。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Others" scheme="https://yueyue200830.github.io/categories/Others/"/>
    
    
      <category term="Interview" scheme="https://yueyue200830.github.io/tags/Interview/"/>
    
      <category term="校招" scheme="https://yueyue200830.github.io/tags/%E6%A0%A1%E6%8B%9B/"/>
    
  </entry>
  
  <entry>
    <title>Vue+Element搭建桌面应用</title>
    <link href="https://yueyue200830.github.io/2020/07/24/Vue-Element%E6%90%AD%E5%BB%BA%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8/"/>
    <id>https://yueyue200830.github.io/2020/07/24/Vue-Element%E6%90%AD%E5%BB%BA%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8/</id>
    <published>2020-07-24T14:39:32.000Z</published>
    <updated>2020-07-24T14:39:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>写这篇文章是因为在开发时发现好多文章都过时了（目测我的很快也要过时了）</p><p>现在网上大部分以前的文章都是推荐用<code>electron-vue</code>搭建的，但经过我的实验，<code>vue-cli 4.0</code>完全不能用啊，这里推荐一个新的插件<code>Vue CLI Plugin Electron Builder</code>，<a href="https://github.com/nklayman/vue-cli-plugin-electron-builder">Github</a>，<a href="https://nklayman.github.io/vue-cli-plugin-electron-builder/guide/">官方文档</a>。</p><span id="more"></span><p>这个插件使用也十分方便，首先用<code>vue-cli</code>搭建一个<code>Vue</code>的项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局安装vue-cli</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用vue-cli搭建一个新的项目，其中会需要一些选项，这里不多介绍，可自行查询</span></span><br><span class="line">vue create &lt;project-name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入项目</span></span><br><span class="line"><span class="built_in">cd</span> &lt;project-name&gt;</span><br></pre></td></tr></table></figure><p>之后用添加<code>electron-builder</code>依赖，这里会自动引入<code>Electron</code>，并搭建整个开发环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 添加electron-builder依赖</span><br><span class="line">vue add electron-builder</span><br><span class="line"></span><br><span class="line"># 安装相关依赖</span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"># 运行项目</span><br><span class="line">npm run electron:serve</span><br></pre></td></tr></table></figure><p>这里主要是推销一下这个插件，并且帮助大家避雷，就不多介绍其它用法了（本人也是新手）</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;写这篇文章是因为在开发时发现好多文章都过时了（目测我的很快也要过时了）&lt;/p&gt;
&lt;p&gt;现在网上大部分以前的文章都是推荐用&lt;code&gt;electron-vue&lt;/code&gt;搭建的，但经过我的实验，&lt;code&gt;vue-cli 4.0&lt;/code&gt;完全不能用啊，这里推荐一个新的插件&lt;code&gt;Vue CLI Plugin Electron Builder&lt;/code&gt;，&lt;a href=&quot;https://github.com/nklayman/vue-cli-plugin-electron-builder&quot;&gt;Github&lt;/a&gt;，&lt;a href=&quot;https://nklayman.github.io/vue-cli-plugin-electron-builder/guide/&quot;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Frontend" scheme="https://yueyue200830.github.io/categories/Frontend/"/>
    
    
      <category term="Vue" scheme="https://yueyue200830.github.io/tags/Vue/"/>
    
      <category term="Element" scheme="https://yueyue200830.github.io/tags/Element/"/>
    
  </entry>
  
  <entry>
    <title>服务器部署Nginx的坑</title>
    <link href="https://yueyue200830.github.io/2020/07/19/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2Nginx%E7%9A%84%E5%9D%91/"/>
    <id>https://yueyue200830.github.io/2020/07/19/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2Nginx%E7%9A%84%E5%9D%91/</id>
    <published>2020-07-19T13:03:42.000Z</published>
    <updated>2020-07-19T13:03:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>好久不发博文了，debug了一天的Nginx部署，必须得记录一下踩过的坑。</p><span id="more"></span><h1 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h1><p>前端有两个页面、后端有一个服务，需要把前端访问转发到后端去读数据库。<br>服务器用的<code>Centos 8</code>。</p><h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><h2 id="问题一：无法转发"><a href="#问题一：无法转发" class="headerlink" title="问题一：无法转发"></a>问题一：无法转发</h2><p>采用<code>proxy_pass</code>转发到local，始终没反应，返回<code>502</code>，log显示<code>(13: Permission denied)</code>，服务器curl localhost有反应。</p><p>结果是linux的http设置问题</p><p><strong>解决方法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setsebool -P httpd_can_network_connect 1</span><br></pre></td></tr></table></figure><h2 id="问题二：部分图片加载一半就结束"><a href="#问题二：部分图片加载一半就结束" class="headerlink" title="问题二：部分图片加载一半就结束"></a>问题二：部分图片加载一半就结束</h2><p>有的图片莫名不能加载出来，浏览器的console报错<code>net::ERR_CONTENT_LENGTH_MISMATCH</code>，log显示<code>(13: Permission denied)</code>。</p><p>这是真的没权限，因为访问速度较慢，nginx创建了temp文件夹做缓存，结果用户权限不够。</p><p><strong>解决方法</strong></p><p>在nginx的配置下把user改成root（或者其它有权限访问temp文件夹的用户）</p><h2 id="问题三：转发到另一nginx端口无效"><a href="#问题三：转发到另一nginx端口无效" class="headerlink" title="问题三：转发到另一nginx端口无效"></a>问题三：转发到另一nginx端口无效</h2><p>因为有两个前端，设了不同的端口，结果转发失败（后端转发成功），log显示<code>bind() to 0.0.0.0:**** failed</code>。</p><p>端口没有注册，需要在系统中加入这个端口。</p><p><strong>解决方法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo semanage port -a -t http_port_t  -p tcp xxxx <span class="comment"># xxxx is port number</span></span><br></pre></td></tr></table></figure><h2 id="问题四：修改文件后无法加载"><a href="#问题四：修改文件后无法加载" class="headerlink" title="问题四：修改文件后无法加载"></a>问题四：修改文件后无法加载</h2><p>把前端的静态文件重新编译部署了以下，就出现了这个问题，返回<code>403</code>，log显示<code>(13: Permission denied)</code>，一直以为是没权限，但用户是root，并且给了777。</p><p>结果是nginx的问题，盲猜缓存的锅？</p><p><strong>解决方法</strong></p><p>手动重新启动，不能用reload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx -s stop</span><br><span class="line">nginx -c nginx.conf</span><br></pre></td></tr></table></figure><h1 id="崩溃的总结"><a href="#崩溃的总结" class="headerlink" title="崩溃的总结"></a>崩溃的总结</h1><p>linux系统也各种坑呀，一半都是系统设置的问题，一开始还没找到error的log完全不知道发生了什么。</p><p>今天以后我也是用过nginx的人了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久不发博文了，debug了一天的Nginx部署，必须得记录一下踩过的坑。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://yueyue200830.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://yueyue200830.github.io/tags/Linux/"/>
    
      <category term="Deployment" scheme="https://yueyue200830.github.io/tags/Deployment/"/>
    
      <category term="Nginx" scheme="https://yueyue200830.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Chrome浏览器阻止特定URL发送请求</title>
    <link href="https://yueyue200830.github.io/2020/05/26/Chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E9%98%BB%E6%AD%A2%E7%89%B9%E5%AE%9AURL%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/"/>
    <id>https://yueyue200830.github.io/2020/05/26/Chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E9%98%BB%E6%AD%A2%E7%89%B9%E5%AE%9AURL%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/</id>
    <published>2020-05-25T16:56:58.000Z</published>
    <updated>2020-05-25T16:56:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>在开发网页又或者做一些其它测试的过程中，有的时候需要block个别URL的请求，网上搜索了一堆，结果发现是超级简单的。。。。</p><span id="more"></span><p>因为这个操作早在<code>Chrome 59</code>的时候就已经被实现了，只需要在<code>network</code>右键想到block的URL，然后选择<code>Block Request URL</code>即可</p><img src="/2020/05/26/Chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E9%98%BB%E6%AD%A2%E7%89%B9%E5%AE%9AURL%E5%8F%91%E9%80%81%E8%AF%B7%E6%B1%82/block-request-url.png" class="" width="700" title="Block-Request"><p>之后会跳出一个页面<code>Request blocking</code>，可以设置和查看需要block的网址，并且支持正则表达式</p><p>是不是超级方便&amp;简单！！我找了两个小时啊啊啊啊</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发网页又或者做一些其它测试的过程中，有的时候需要block个别URL的请求，网上搜索了一堆，结果发现是超级简单的。。。。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Others" scheme="https://yueyue200830.github.io/categories/Others/"/>
    
    
      <category term="Chrome" scheme="https://yueyue200830.github.io/tags/Chrome/"/>
    
      <category term="URL" scheme="https://yueyue200830.github.io/tags/URL/"/>
    
  </entry>
  
  <entry>
    <title>关于VS Code运行C++中文乱码问题</title>
    <link href="https://yueyue200830.github.io/2020/05/26/%E5%85%B3%E4%BA%8EVS-Code%E8%BF%90%E8%A1%8CC-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <id>https://yueyue200830.github.io/2020/05/26/%E5%85%B3%E4%BA%8EVS-Code%E8%BF%90%E8%A1%8CC-%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</id>
    <published>2020-05-25T16:36:53.000Z</published>
    <updated>2020-05-25T16:36:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>在几个编辑器里面，VS Code已经算是比较优秀，有插件可以很方便编译和运行<code>c++</code>的，但是因为特殊需要要输出中文，结果发现乱码。。搜索了一通选择了我个人觉得比较方便的方法</p><p>这里我编译运行是采用<code>code runner</code>的，但应该对task配置的方法也适用，不过这里强烈推荐<code>code runner</code>！</p><span id="more"></span><p>首先说说乱码的原因，其实就是<code>cmd</code>和<code>powershell</code>在中文的Windows下默认编码是<code>GBK</code>，而编译输出的文件是<code>UTF-8</code>，于是导致了乱码</p><p>其实在<code>git bash</code>里直接运行把编译好的exe是没有编码问题的，不过在VS Code中也似乎变成了<code>GBK</code>的编码</p><p>既然是编码问题，那么可以直接把terminal的编码改成<code>UTF-8</code>，这样就可以了。<br>但是搜索了以下， 直接修改会导致一些程序的错误。<br>实际上，我们只是需要运行的环境是<code>UTF-8</code>编码而已，因此只需要命令修改编译运行时的terminal的编码即可。</p><p>修改编码的命令是：<code>chcp 65001</code></p><p>我们需要将这个命令集成到编译运行的命令里<br>打开用户的<code>setting.json</code>，也可以通过<code>code runner</code>的<code>extention setting</code>中<code>executorMap</code>进入<br>添加以下内容，这里后面的命令是插件自己的命令，没有修改</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;code-runner.executorMap&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;cpp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;chcp 65001 &amp;&amp; cd $dir &amp;&amp; g++ $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><p>保存后就会运行这条命令了，可以解决中文乱码的问题</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在几个编辑器里面，VS Code已经算是比较优秀，有插件可以很方便编译和运行&lt;code&gt;c++&lt;/code&gt;的，但是因为特殊需要要输出中文，结果发现乱码。。搜索了一通选择了我个人觉得比较方便的方法&lt;/p&gt;
&lt;p&gt;这里我编译运行是采用&lt;code&gt;code runner&lt;/code&gt;的，但应该对task配置的方法也适用，不过这里强烈推荐&lt;code&gt;code runner&lt;/code&gt;！&lt;/p&gt;
    
    </summary>
    
    
      <category term="Others" scheme="https://yueyue200830.github.io/categories/Others/"/>
    
    
      <category term="Windows" scheme="https://yueyue200830.github.io/tags/Windows/"/>
    
      <category term="VS Code" scheme="https://yueyue200830.github.io/tags/VS-Code/"/>
    
  </entry>
  
  <entry>
    <title>通过密钥对服务器进行SSH连接</title>
    <link href="https://yueyue200830.github.io/2020/05/24/%E9%80%9A%E8%BF%87%E5%AF%86%E9%92%A5%E5%AF%B9%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%9B%E8%A1%8CSSH%E8%BF%9E%E6%8E%A5/"/>
    <id>https://yueyue200830.github.io/2020/05/24/%E9%80%9A%E8%BF%87%E5%AF%86%E9%92%A5%E5%AF%B9%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%9B%E8%A1%8CSSH%E8%BF%9E%E6%8E%A5/</id>
    <published>2020-05-23T17:19:09.000Z</published>
    <updated>2020-05-23T17:19:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>常见的ssh连接服务器有两种，一是通过用户名和密码登录，这也是我们最常用的，而另一种是通过密钥来登录，这种不仅可以省去密码，而且更加安全可靠。</p><span id="more"></span><h1 id="服务器端生成密钥"><a href="#服务器端生成密钥" class="headerlink" title="服务器端生成密钥"></a>服务器端生成密钥</h1><p>首先连接服务器，输入<code>ssh-keygen</code>建立密钥， 会跳出以下内容：（中文备注的地方需要输入处理）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ ssh-keygen</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/root/.ssh/id_rsa): // 直接按Enter，用默认文件位置</span><br><span class="line">Enter passphrase (empty for no passphrase): // 直接Enter，不用密码</span><br><span class="line">Enter same passphrase again: // 重复密码</span><br><span class="line">Your identification has been saved in /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br><span class="line">The key&#x27;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|                 |</span><br><span class="line">|                 |</span><br><span class="line">|                 |</span><br><span class="line">|     o +         |</span><br><span class="line">|    o O S .      |</span><br><span class="line">|     X O = o     |</span><br><span class="line">|    @ O.* X      |</span><br><span class="line">|   ..XoX.* +     |</span><br><span class="line">|   xxxxxxxx      |</span><br><span class="line">+----[SHA256]-----+</span><br></pre></td></tr></table></figure><p>这样密钥就生成好了，其中<code>id_rsa</code>是密钥，也是我们本地需要的钥匙，<code>id_rsa.pub</code>是公钥，服务器自己持有</p><h1 id="服务器配置密钥"><a href="#服务器配置密钥" class="headerlink" title="服务器配置密钥"></a>服务器配置密钥</h1><p>在<code>~/.ssh</code>文件夹下面可以找到刚才生成的钥匙（我这里是root用户，所以上面显示的是<code>/root</code>）</p><p>首先需要把<code>id_rsa.pub</code>这个公钥内容复制到<code>authorized_keys</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> id_rsa.pub &gt;&gt; authorized_keys</span><br></pre></td></tr></table></figure><p>然后需要修改文件的读写权限，保证只有此用户有写权限，一般就设置为以下的权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 600 authorized_keys</span><br><span class="line"><span class="built_in">chmod</span> 700 ~/.ssh</span><br></pre></td></tr></table></figure><p>到这里如果之前没有对服务器ssh进行修改的话，服务器端配置就完成了</p><h1 id="客户端配置密钥"><a href="#客户端配置密钥" class="headerlink" title="客户端配置密钥"></a>客户端配置密钥</h1><p>其实客户端这里没什么配置的，只要把私钥复制到本地就可以</p><p>通过<code>scp</code>命令复制id_rsa文件到本地用户的<code>.ssh</code>文件夹下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp root@xxxx:~/.ssh/id_rsa ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p>之后就可以通过密钥登录了，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@xxx -i ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常见的ssh连接服务器有两种，一是通过用户名和密码登录，这也是我们最常用的，而另一种是通过密钥来登录，这种不仅可以省去密码，而且更加安全可靠。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://yueyue200830.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://yueyue200830.github.io/tags/Linux/"/>
    
      <category term="SSH" scheme="https://yueyue200830.github.io/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>Windows下用Python模拟鼠标点击</title>
    <link href="https://yueyue200830.github.io/2020/05/19/Windows%E4%B8%8B%E7%94%A8Python%E6%A8%A1%E6%8B%9F%E9%BC%A0%E6%A0%87%E7%82%B9%E5%87%BB/"/>
    <id>https://yueyue200830.github.io/2020/05/19/Windows%E4%B8%8B%E7%94%A8Python%E6%A8%A1%E6%8B%9F%E9%BC%A0%E6%A0%87%E7%82%B9%E5%87%BB/</id>
    <published>2020-05-19T02:47:51.000Z</published>
    <updated>2020-05-19T02:47:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于某些需求，本人被安排了一个实现模拟按键的功能，虽然听说似乎按键精灵也有类似实现，但我的需求可能它无法满足，值得自己写。</p><p>对于Windows下的模拟，python一般是采用<code>win32api</code>，此外C++等也可以实现类似的功能，但是python简洁很多，适合不太熟悉Windows变成的人。</p><span id="more"></span><p>其实一开始是找到一个别人写的项目想直接用的，可惜运行失败，而且有部分需求不满足，有兴趣的可以直接试试<a href="https://github.com/PyUserInput/PyUserInput">PyUserInput</a></p><h1 id="鼠标模拟"><a href="#鼠标模拟" class="headerlink" title="鼠标模拟"></a>鼠标模拟</h1><p>这一块基本和<code>PyUserInput</code>一样，因为我的需求没有那么复杂，所以只用了部分，有兴趣的可以看源码<a href="https://github.com/PyUserInput/PyUserInput/blob/master/pymouse/windows.py">PyUserInput/pymouse</a></p><p>鼠标的基本操作可以分为：press（按下），release（释放），scroll（滚动，这里没写），move（移动）<br>在基本操作的基础上又有：click（按下+释放），drag（按下+移动+释放）</p><h2 id="Press-按下"><a href="#Press-按下" class="headerlink" title="Press 按下"></a>Press 按下</h2><p>模拟在屏幕(x, y)的位置下按下鼠标，button=1是左键，button=2是右键</p><p>注意这里只模拟了点击操作，并没有修改鼠标的位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> win32api</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">press</span>(<span class="params">x, y, button=<span class="number">1</span></span>):</span><br><span class="line">    buttonAction = <span class="number">2</span> ** ((<span class="number">2</span> * button) - <span class="number">1</span>)</span><br><span class="line">    win32api.mouse_event(buttonAction, x, y)</span><br></pre></td></tr></table></figure><h2 id="Release-释放"><a href="#Release-释放" class="headerlink" title="Release 释放"></a>Release 释放</h2><p>操作同上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> win32api</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">release</span>(<span class="params">x, y, button=<span class="number">1</span></span>):</span><br><span class="line">    buttonAction = <span class="number">2</span> ** ((<span class="number">2</span> * button))</span><br><span class="line">    win32api.mouse_event(buttonAction, x, y)</span><br></pre></td></tr></table></figure><h2 id="Move-移动"><a href="#Move-移动" class="headerlink" title="Move 移动"></a>Move 移动</h2><p>这里其实只是将鼠标设定到(x, y)的位置，并没有动画过程（写这个代码想想也没需要吧）</p><p>采用了<code>ctypes</code>这个库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">move</span>(<span class="params">x, y</span>):</span><br><span class="line">    ctypes.windll.user32.SetCursorPos(x, y)</span><br></pre></td></tr></table></figure><h2 id="Click-点击"><a href="#Click-点击" class="headerlink" title="Click 点击"></a>Click 点击</h2><p>点击 = 按下 + 释放</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">click</span>(<span class="params">x, y, button=<span class="number">1</span></span>):</span><br><span class="line">    press(x, y, button)</span><br><span class="line">    release(x, y, button)</span><br></pre></td></tr></table></figure><h2 id="Drag-拖动"><a href="#Drag-拖动" class="headerlink" title="Drag 拖动"></a>Drag 拖动</h2><p>拖动 = 位置1按下 + 位置2释放</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">drag</span>(<span class="params">x1, y1, x2, y2</span>):</span><br><span class="line">    self.press(x1, y1)</span><br><span class="line">    self.release(x2, y2)</span><br></pre></td></tr></table></figure><h2 id="获取当前鼠标位置"><a href="#获取当前鼠标位置" class="headerlink" title="获取当前鼠标位置"></a>获取当前鼠标位置</h2><p>这里其实困扰了我一下，虽然<code>ctypes</code>中有函数可以实现这个功能，但传入的参数有点奇怪，应该是传入的一个指定类型的实例，并且直接将坐标点返回给这个实例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span>(ctypes.Structure):</span><br><span class="line">    _fields_ = [(<span class="string">&quot;x&quot;</span>, ctypes.c_ulong),</span><br><span class="line">                (<span class="string">&quot;y&quot;</span>, ctypes.c_ulong)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_pos</span>():</span><br><span class="line">    point = Point()</span><br><span class="line">    ctypes.windll.user32.GetCursorPos(ctypes.byref(point))</span><br><span class="line">    <span class="keyword">return</span> point.x, point.y</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><a href="https://github.com/PyUserInput/PyUserInput">PyUserInput</a></li><li><a href="https://github.com/qiueer/autoops_for_win">autoops_for_win</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于某些需求，本人被安排了一个实现模拟按键的功能，虽然听说似乎按键精灵也有类似实现，但我的需求可能它无法满足，值得自己写。&lt;/p&gt;
&lt;p&gt;对于Windows下的模拟，python一般是采用&lt;code&gt;win32api&lt;/code&gt;，此外C++等也可以实现类似的功能，但是python简洁很多，适合不太熟悉Windows变成的人。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://yueyue200830.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://yueyue200830.github.io/tags/Python/"/>
    
      <category term="Windows" scheme="https://yueyue200830.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Markdown反引号中输入反引号</title>
    <link href="https://yueyue200830.github.io/2020/05/18/Markdown%E5%8F%8D%E5%BC%95%E5%8F%B7%E4%B8%AD%E8%BE%93%E5%85%A5%E5%8F%8D%E5%BC%95%E5%8F%B7/"/>
    <id>https://yueyue200830.github.io/2020/05/18/Markdown%E5%8F%8D%E5%BC%95%E5%8F%B7%E4%B8%AD%E8%BE%93%E5%85%A5%E5%8F%8D%E5%BC%95%E5%8F%B7/</id>
    <published>2020-05-18T09:58:14.000Z</published>
    <updated>2020-05-18T09:58:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>被上篇文章的代码块中显示反引号坑了好久，不写一下对不起自己啊</p><span id="more"></span><p>其实超级简单，单行的代码块最外层用两个 <strong>``</strong> 而不是一个 <strong>`</strong></p><p><strong>Example</strong></p><p>Input:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">输入`` ` ``</span><br></pre></td></tr></table></figure><p>Output:</p><p>输入<code>`</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;被上篇文章的代码块中显示反引号坑了好久，不写一下对不起自己啊&lt;/p&gt;
    
    </summary>
    
    
      <category term="Markdown" scheme="https://yueyue200830.github.io/categories/Markdown/"/>
    
    
      <category term="Markdown" scheme="https://yueyue200830.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Atom安装命令行插件</title>
    <link href="https://yueyue200830.github.io/2020/05/18/Atom%E5%AE%89%E8%A3%85%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%8F%92%E4%BB%B6/"/>
    <id>https://yueyue200830.github.io/2020/05/18/Atom%E5%AE%89%E8%A3%85%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%8F%92%E4%BB%B6/</id>
    <published>2020-05-18T09:14:51.000Z</published>
    <updated>2020-05-18T09:14:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>Atom默认是不带终端的，需要安装插件，常见可以在搜索引擎搜索到的有两个：<code>Terminal-Plus</code>和<code>platformio-ide-terminal</code>。<br>而事实上前者是已经放弃更新的插件，后者是基于前者开发的，因此需要安装的是<code>platformio-ide-terminal</code></p><span id="more"></span><p><strong>注：</strong>Windows系统的我前者安装是直接出错的，完全跳不出，因此必须安装后者！</p><h1 id="platformio-ide-terminal安装"><a href="#platformio-ide-terminal安装" class="headerlink" title="platformio-ide-terminal安装"></a>platformio-ide-terminal安装</h1><p>只需要在package中搜索<code>platformio-ide-terminal</code>，点击install就好</p><h1 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h1><p>安装好后有三种方法可以打开</p><img src="/2020/05/18/Atom%E5%AE%89%E8%A3%85%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%8F%92%E4%BB%B6/3.png" class="" title="terminal-powershell"><h2 id="通过菜单打开terminal"><a href="#通过菜单打开terminal" class="headerlink" title="通过菜单打开terminal"></a>通过菜单打开terminal</h2><p>菜单<code>package</code> → <code>platformio-ide-terminal</code> → <code>Toggle</code></p><img src="/2020/05/18/Atom%E5%AE%89%E8%A3%85%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%8F%92%E4%BB%B6/1.png" class="" title="menu"><h2 id="通过小图标打开terminal"><a href="#通过小图标打开terminal" class="headerlink" title="通过小图标打开terminal"></a>通过小图标打开terminal</h2><p>找到左下角中➕的小图标，点击即可</p><img src="/2020/05/18/Atom%E5%AE%89%E8%A3%85%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%8F%92%E4%BB%B6/2.png" class="" title="icon"><h2 id="通过快捷键打开terminal"><a href="#通过快捷键打开terminal" class="headerlink" title="通过快捷键打开terminal"></a>通过快捷键打开terminal</h2><p>通过<code>ctrl + `</code>可以toggle terminal</p><p>具体其它快捷键可以参考使用文档，不过我这里似乎new terminal的快捷键被覆盖了</p><h1 id="修改默认终端"><a href="#修改默认终端" class="headerlink" title="修改默认终端"></a>修改默认终端</h1><p>Windows下安装好后默认是<code>Powershell</code>，为方便使用，我改成了<code>Git bash</code></p><p>在setting中找到platformio-ide-terminal，将其中<code>shell override</code>改为gitbash的路径，我这里是<code>C:\Program Files\Git\bin\bash.exe</code></p><img src="/2020/05/18/Atom%E5%AE%89%E8%A3%85%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%8F%92%E4%BB%B6/4.png" class="" title="terminal-gitbash"><p>重新新开一个terminal就可以看到效果了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Atom默认是不带终端的，需要安装插件，常见可以在搜索引擎搜索到的有两个：&lt;code&gt;Terminal-Plus&lt;/code&gt;和&lt;code&gt;platformio-ide-terminal&lt;/code&gt;。&lt;br&gt;而事实上前者是已经放弃更新的插件，后者是基于前者开发的，因此需要安装的是&lt;code&gt;platformio-ide-terminal&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Others" scheme="https://yueyue200830.github.io/categories/Others/"/>
    
    
      <category term="Atom" scheme="https://yueyue200830.github.io/tags/Atom/"/>
    
      <category term="Terminal" scheme="https://yueyue200830.github.io/tags/Terminal/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Next添加Valine评论系统</title>
    <link href="https://yueyue200830.github.io/2020/05/17/Hexo-Next%E6%B7%BB%E5%8A%A0Valine%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
    <id>https://yueyue200830.github.io/2020/05/17/Hexo-Next%E6%B7%BB%E5%8A%A0Valine%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/</id>
    <published>2020-05-17T12:47:36.000Z</published>
    <updated>2020-05-17T12:47:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>博客搭建好一段时间了，也终于有空添加上评论，搜了一下常用的评论系统，自己比较喜欢的是<code>Valine</code>和<code>utterances</code>。</p><p>而最终选择先搭建Valine完全是因为Valine比较和主题融合（当然后来发现也有些问题），utterances太Github式了，和next不配。</p><span id="more"></span><p>首先上<code>Valine</code>的<a href="https://valine.js.org">官方文档页面</a></p><h1 id="注册LeanCloud"><a href="#注册LeanCloud" class="headerlink" title="注册LeanCloud"></a>注册LeanCloud</h1><p>Valine的运行是基于<code>LeanCloud</code>的</p><p>首先在<a href="https://www.leancloud.cn/">LeanCloud</a>注册帐户（表示一开始以为这是外国的，结果发现这个国人的网站，international还没做好)<br>需要验证手机号和邮箱</p><p>然后创建应用，其中权限设置可以不用管。</p><img src="/2020/05/17/Hexo-Next%E6%B7%BB%E5%8A%A0Valine%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/1.png" class="" width="600" title="Create-Application"><p>在<code>存储 → 结构化数据</code>中选择<code>创建class</code>，将class名字设为<code>Comment</code>，同样不用管权限。<br>这个<code>Comment</code>就是评论的数据库啦，另外还有一个数据库<code>Counter</code>是用于页面访问统计的<br>ps.似乎不手动创建的话，只要有评论会被自动创建这个class的。</p><p>然后在<code>设置 → 应用Keys</code>中找到<code>AppID</code>和<code>AppKey</code></p><img src="/2020/05/17/Hexo-Next%E6%B7%BB%E5%8A%A0Valine%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/2.png" class="" title="App-Info"><h1 id="配置Next"><a href="#配置Next" class="headerlink" title="配置Next"></a>配置Next</h1><blockquote><p><strong>注意：</strong>我这里用的是<code>next 7.x</code>，可以直接用valine，较早期版本可能需要安装</p></blockquote><p>在<code>./themes/next/_config.yml</code>下面搜索<code>valine</code></p><p>首先可以找到<code>comments</code>，设置<code>active: valine</code></p><p>然后找到<code>valine</code>，把<code>appid</code>和<code>appkey</code>填入，设置<code>enable</code>为<code>true</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Valine</span></span><br><span class="line"><span class="comment"># For more information: https://valine.js.org, https://github.com/xCss/Valine</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appid:</span>  <span class="comment"># 前面获取的AppID</span></span><br><span class="line">  <span class="attr">appkey:</span> <span class="comment"># 前面获取的AppKey</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="literal">false</span> <span class="comment"># 邮件提醒</span></span><br><span class="line">  <span class="attr">verify:</span> <span class="literal">false</span> <span class="comment"># 是否需要验证</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">Add</span> <span class="string">your</span> <span class="string">comment</span> <span class="comment"># 输入框默认提示</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">mm</span> <span class="comment"># Gravatar style</span></span><br><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,</span> <span class="string">mail,</span> <span class="string">link</span> <span class="comment"># 用户输入的个人信息</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># Pagination size</span></span><br><span class="line">  <span class="attr">language:</span> <span class="comment"># Language, available values: en, zh-cn</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">false</span> <span class="comment"># 文章访问量统计</span></span><br><span class="line">  <span class="attr">comment_count:</span> <span class="literal">false</span> <span class="comment"># 是否在首页显示统计页面</span></span><br><span class="line">  <span class="attr">recordIP:</span> <span class="literal">false</span> <span class="comment"># 是否记录留言IP，只会出现在数据库中</span></span><br><span class="line">  <span class="attr">serverURLs:</span> <span class="comment"># When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span></span><br></pre></td></tr></table></figure><p>这样就可以正常使用valine了。</p><h1 id="部分页面关闭评论功能"><a href="#部分页面关闭评论功能" class="headerlink" title="部分页面关闭评论功能"></a>部分页面关闭评论功能</h1><p>打开评论以后是全局都会显示评论的，因此包括<code>tags</code>这种页面也会显示，当然需要关闭评论啦，只需要在头部加上以下内容即可</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h1 id="评价"><a href="#评价" class="headerlink" title="评价"></a>评价</h1><p>虽然说整体用起来是很方便的，但是估计之后会换成其它评论，主要一个原因是这个<code>LeanCould</code>其实说不定哪天就收费了，而自己的博客一时半会儿估计也没多少人看，付费是个很不划算的选择。<br>相比之下utterances在Github上集成的，应该会好不少。</p><p>第二个原因，也是各种评论系统的一个通病：似乎无法diy界面，这个评论系统的图标和微博一模一样看着不爽啊！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;博客搭建好一段时间了，也终于有空添加上评论，搜了一下常用的评论系统，自己比较喜欢的是&lt;code&gt;Valine&lt;/code&gt;和&lt;code&gt;utterances&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;而最终选择先搭建Valine完全是因为Valine比较和主题融合（当然后来发现也有些问题），utterances太Github式了，和next不配。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="https://yueyue200830.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://yueyue200830.github.io/tags/Hexo/"/>
    
      <category term="Valine" scheme="https://yueyue200830.github.io/tags/Valine/"/>
    
  </entry>
  
  <entry>
    <title>Liunx系统journal日志清理</title>
    <link href="https://yueyue200830.github.io/2020/05/15/Liunx%E7%B3%BB%E7%BB%9Fjournal%E6%97%A5%E5%BF%97%E6%B8%85%E7%90%86/"/>
    <id>https://yueyue200830.github.io/2020/05/15/Liunx%E7%B3%BB%E7%BB%9Fjournal%E6%97%A5%E5%BF%97%E6%B8%85%E7%90%86/</id>
    <published>2020-05-15T08:51:33.000Z</published>
    <updated>2020-05-15T08:51:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>Linux系统下<code>var/log/journal</code>常常霸占着大量空间，但又一般情况毫无用处，因此需要进行一些设定来控制日志大小。</p><span id="more"></span><p><strong>题外话</strong></p><p>作为一个linux小白，也就电脑上装了个虚拟机，20G内存，如果不是写作业把电脑内存用爆了，大概也不会注意到它吧。</p><p>我的系统是<code>Ubuntu 18</code>，应该所有linux都适用。</p><h1 id="查看占用内存"><a href="#查看占用内存" class="headerlink" title="查看占用内存"></a>查看占用内存</h1><p>处理到<code>var/log/journal</code>下查看内存占用，还可以直接输入以下命令查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">journalctl --disk-usage</span><br></pre></td></tr></table></figure><h1 id="删除日志"><a href="#删除日志" class="headerlink" title="删除日志"></a>删除日志</h1><h2 id="方法一：通过日志可存在的时间"><a href="#方法一：通过日志可存在的时间" class="headerlink" title="方法一：通过日志可存在的时间"></a>方法一：通过日志可存在的时间</h2><p>通过设置日志可存在的时间长度来删除日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo journalctl --rotate</span><br><span class="line">sudo journalctl --vacuum-time=1s</span><br></pre></td></tr></table></figure><p><strong>第二行：</strong></p><p>这里可选的参数：s是秒，m是分，h是小时，d是日，w是星期，months是月。</p><p>因此一般不太可能出现前一秒生成的日志，因此设置时长为1秒可以删除所有日志。<br>但如果之后想保存一段时间的日志，需要重新设置一下，比如我设置为1个月。</p><p><strong>第一行：</strong></p><p>这里rotate的作用是将一个active的日志变为archived，也就是可能现在在录入日志，把在此之前的日志封装为一个，并换下一个文件进行日志记录。<br>这样可以把在此之前的日志全部清理，当然，不用这个命令也是可以的。</p><h2 id="方法二：通过日志可存在的最大内存"><a href="#方法二：通过日志可存在的最大内存" class="headerlink" title="方法二：通过日志可存在的最大内存"></a>方法二：通过日志可存在的最大内存</h2><p>除了用时间，当然也可以用空间来删除</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo journalctl --rotate --vacuum-size=50M</span><br></pre></td></tr></table></figure><p>这里是指删除到小于50M，rotate在一些新版本种可以写在一行种。</p><p>空间常见的就是KMGT四个单位</p><h2 id="方法三：直接删除文件"><a href="#方法三：直接删除文件" class="headerlink" title="方法三：直接删除文件"></a>方法三：直接删除文件</h2><p>把整个文件夹全部删除也是没有问题的，不过我个人觉得有上面的方法为什么还要硬核删除呢。</p><h1 id="设置日志参数"><a href="#设置日志参数" class="headerlink" title="设置日志参数"></a>设置日志参数</h1><p>日志文件过大无非是因为没有针对日期和内存大小的自动清理机制，可以通过一些设置来实现。</p><p>修改的文件是<code>/etc/systemd/journald.conf</code></p><h2 id="设置最大占用空间"><a href="#设置最大占用空间" class="headerlink" title="设置最大占用空间"></a>设置最大占用空间</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SystemMaxUse=100M</span><br></pre></td></tr></table></figure><h2 id="设置最长保存时间"><a href="#设置最长保存时间" class="headerlink" title="设置最长保存时间"></a>设置最长保存时间</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MaxFileSec=5day</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://www.linuxuprising.com/2019/10/how-to-clean-up-systemd-journal-logs.html">How To Clear The systemd journal Logs</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux系统下&lt;code&gt;var/log/journal&lt;/code&gt;常常霸占着大量空间，但又一般情况毫无用处，因此需要进行一些设定来控制日志大小。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://yueyue200830.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://yueyue200830.github.io/tags/Linux/"/>
    
      <category term="Ubuntu" scheme="https://yueyue200830.github.io/tags/Ubuntu/"/>
    
      <category term="Journal" scheme="https://yueyue200830.github.io/tags/Journal/"/>
    
  </entry>
  
  <entry>
    <title>2020实习申请季</title>
    <link href="https://yueyue200830.github.io/2020/04/21/2020%E5%AE%9E%E4%B9%A0%E7%94%B3%E8%AF%B7%E5%AD%A3/"/>
    <id>https://yueyue200830.github.io/2020/04/21/2020%E5%AE%9E%E4%B9%A0%E7%94%B3%E8%AF%B7%E5%AD%A3/</id>
    <published>2020-04-21T10:12:44.000Z</published>
    <updated>2020-04-21T10:12:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>实习季总算基本告一段落啦，零零碎碎的还有个别面试可能考虑面掉吧，但是已经决定去哪家了。</p><p>和其它人相比之下，我算是非大众类型的一类面试者，开始准备已经很晚，基础可以算是烂得一塌糊度，但是算法比较好（高于普通水平，低于acmer）</p><span id="more"></span><h1 id="个人情况"><a href="#个人情况" class="headerlink" title="个人情况"></a>个人情况</h1><p>本来去年有在Google实习，基本打算今年继续的，所以其实在三月前是觉得自己很稳的。没有任何复习，还在搞其它的东西。最后也是因为怕万一team match挂可以有个备选吧，结果万万没想到真的备选变成了正选。上周被正式通知取消实习。</p><p>正式开始准备（学习）是在三月之后，曾经在3月初还在和同学讨论我是不是该加入复习大军，现在庆幸的是即使线上学习，身边还有一群同学鞭策着自己学习吧。</p><p>所有公司除微众银行以外全部投的上海的岗位，投的岗位为SWE/后台开发/Java开发。</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>说实话算法我基本没刷过题，除了面微软前补了一周的一年前刷的leetcode，基本就剩下看面经里的算法题了。<br>不过算法不太需要刷也多亏了大一的时候学校自己的oj一共刷了400多道吧，leetcode在大二面试前大概刷了60题，剩下就零零碎碎各个网站了。</p><p>因为算是ACM的底子，所以算法题基本是c++，偶尔遇到情况会python，完全不写Java。</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>其实算是0基础开始准备的，计网、操作系统特别烂，Java学了几乎等于没学，数据库还在上课。</p><p>其实即使到今天，我的基础依旧特别烂，一旦深入就完蛋的那种。<br>如果有能力看源码的确很重要。</p><h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><p>所有可见的项目都在Github上了，总体就是：没有能被面试的项目。。。</p><h2 id="最后成果"><a href="#最后成果" class="headerlink" title="最后成果"></a>最后成果</h2><p>Offer: 微软、字节跳动、摩根士丹利<br>挂过：腾讯腾讯云、阿里CFO、美团、微众银行(没消息)<br>放弃：腾讯正式批、阿里蚂蚁、携程、美团、亚马逊<br>无消息：SAP、Paypal（明确招满了）</p><h1 id="微软"><a href="#微软" class="headerlink" title="微软"></a>微软</h1><p>微软是我需要面的公司里最合我的一家吧，算是除Google以外最看重算法最少基础的一家公司。</p><p>感觉也算是运气好，我全程算法题，所以还是比较快乐的面试经历。</p><h2 id="笔试"><a href="#笔试" class="headerlink" title="笔试"></a>笔试</h2><p>我没有参加内推（想到的时候过期的），所以做了笔试，最后的话是0+1+(1-2个测试点)。</p><p>第一题花费了很久没看清题意，并且熟悉编译器也花了很久，最后放弃了。<br>第二题虽然听说是去年原题，但我是没有见过啦，不过因为很熟DP，20分钟AC了。<br>第三题忘记是什么题了，最后有两个case没过。</p><h2 id="LC1"><a href="#LC1" class="headerlink" title="LC1"></a>LC1</h2><p>我的一面是个女面试官，其实自己表现不算满意，但也其实是觉得面试官没有深究每题？</p><p><strong>第一题</strong></p><blockquote><p>给定一群人，他们可能有些人相互认识，定义只要其中有认识的人就算是一个朋友圈，找到一共有多少个朋友圈。</p></blockquote><p>我给的解答是DFS，不过面试官问我会不会查并集，实话实说知道但不了解，于是写了DFS的解法。<br>由于写了C++，其实corner case和需要考虑的是比其它语言多的，比如本题我用了引用，但只有部分的引用，被面试官揪出来了。<br>之后写了一些测试用例，并且在面试官的提示下加入了NULL的判断。</p><p><strong>第二题</strong></p><blockquote><p>给定一个数组，两个人玩游戏，只能取左边或者右边，每次都是以最优的方式取的，求第一个取的人是否会赢。</p></blockquote><p>用的DP解法，面试官理解了很久（我不是很懂这个解法不是一个常见解法之一吗？）<br>继续测试用例，并且用测试用例给面试官解答</p><p><strong>一个小题目</strong></p><p>最后时间也不是很足了，面试官问了我HashMap的设计，我答了一个基本设计，再加上了一些Java的实现。</p><p><strong>提问</strong></p><p>问了一下面试官所在的组，写C++和C#多，瞬间觉得应该用python写算法题的。。</p><h2 id="LC2"><a href="#LC2" class="headerlink" title="LC2"></a>LC2</h2><p>这个面试官就问了一道题，个人觉得做得还行，但逻辑不够清晰</p><p><strong>题目</strong></p><blockquote><p>给定一个四则运算的字符串输入，求出结果</p></blockquote><p>记忆中曾经好像见过类似的，用的是栈？但没想出来，最后很复杂的用了很多变量做的，白板代码又是讲解了半天的逻辑。<br>面试官没让我写判断输入是否合法，但直接讲了不合法的情况，然后就被C++坑了呀，没考虑到输入长度超出int类型的情况（我爱python）</p><h2 id="Leader"><a href="#Leader" class="headerlink" title="Leader"></a>Leader</h2><p>唔，这是一场神奇的面试，主要奇怪在后半部分。</p><p>首先面试官让我讲一下之前的算法题，然后再二面的题目上加上了括号，说一下怎么做，我做了一个懒惰的修改版，直接递归。<br>然后分享屏幕，用IDE做了一题，可以编译（人好啊）。至于面试题，我想不起来了，本地代码被我删除了。。。不过很简单就是了，最多十几分钟写完的</p><p><strong>然后</strong>，30分钟面完了，面试官为了撑时间和我闲聊，甚至推荐我转行投行、PE和咨询赚钱。面完觉得要挂了。。。</p><h1 id="字节跳动"><a href="#字节跳动" class="headerlink" title="字节跳动"></a>字节跳动</h1><p>申请的是AI Lab的后端实习，当初纯粹是想挑个冷门的部门试试，但现在感觉正式员工还是可能其它部门比较好？<br>和大部分部门不太一样的是，AI Lab只有两面，超级快乐！</p><h2 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h2><p>基础基本不记得问了什么，但没什么难点是肯定的。</p><p>由于有前端经历，被面试官问了一个js的闭包，没复习不会，不过用var声明题目看起来有点历史悠久呀。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;The Window&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">　　name : <span class="string">&quot;My Object&quot;</span>,</span><br><span class="line">　　getNameFunc : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">　　　　<span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">　　　　　　<span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">　　　　&#125;;</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>算法题一</strong></p><blockquote><p>给一棵完全二叉树，计算它的节点个数</p></blockquote><p>一开始完全没看倒完全二叉树，所以用了全搜索的解法，后来提醒之下说了一个其实没问题但比较复杂然而面试官并没有懂的解法，时间复杂度和面试官的解法一样。</p><p><strong>算法题二</strong></p><blockquote><p>Leetcode原题：Partition Equal Subset Sum</p></blockquote><p>见过，不记得是否做过，题目看错，最后发现dp，五分钟秒的，但因为写了优化版的面试官没看懂，又两分钟极限写代码证明自己是对的。</p><p><strong>总结</strong>：面试官不是算法好的人，脑子一般般，优化dp这么基础的看不懂，建议多刷点题。</p><h2 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h2><p>周日面试面试官还因为开会迟到，好忙呀。</p><p>此面没问基础，问了项目，但也不深挖。</p><p><strong>算法题一</strong></p><blockquote><p>给n*m的矩阵，正整数，假设为小岛，如果某个点大于它相邻的点，那么就说河水可以流下去，这个矩阵外面是海水，最旁边的点河水可以流到海里，找出不能流到海里的点</p></blockquote><p>基础dfs，挺简单的</p><p><strong>算法题二</strong></p><blockquote><p>给1-n的，输出字典序</p></blockquote><p>据说leetcode原题，没见过，一开始没注意到是1-n，字典树都出来了，后来反应过来很简单，递归。结果写得太快被反问是不是做过？？没见我题目都没看清嘛。</p><h2 id="hr面"><a href="#hr面" class="headerlink" title="hr面"></a>hr面</h2><p>用的zoom，谈了20分钟，主要也就是读不读研，怎么选择offer。个人感觉表现一般，最后联系我给offer的也是这个hr了。</p><h1 id="美团"><a href="#美团" class="headerlink" title="美团"></a>美团</h1><p>美团hr真的是史上最垃圾hr，但是面试官人真的好好！</p><p>当初没了解过部门，投的是基础研发，感觉比较偏？面的部门是搞数据库的</p><h2 id="笔试-1"><a href="#笔试-1" class="headerlink" title="笔试"></a>笔试</h2><p>1+1+0.45+0+0.45<br>算是一个还行但也不太好的成绩吧，不过喜欢美团的题目，最算法的一个。</p><h2 id="一面（电面）"><a href="#一面（电面）" class="headerlink" title="一面（电面）"></a>一面（电面）</h2><p>这个面试官人超级好！不会的就说没关系，还是唯一一个挖我的blog的面试官。</p><ul><li>讲一下项目（挖坑j2ee自己跳下去了）</li><li>你是java比较熟吗（项目java，算法c++，python也还行）</li><li>前端使用js？（不太熟，用过）</li><li>问linux，$0,$1,$?,$$是什么（记忆中回答了$0和$1是第一个和第二个参数）</li><li>然后提到了我的blog，于是问怎么修改ssh端口（我的博文，但是不记得了）</li><li>Linux常用命令</li><li>服务器部署了什么（提到项目and我的乱七八糟的小东西）</li><li>假设项目部署在服务器，并且又访问日志，如果用linux命令获取最常访问的ip（说了map，用linux命令不会）</li><li>硬链接&amp;软链接（不记得）</li><li>数据库存储引擎（innodb，还有一个不记得）</li><li>数据库事务</li><li>隔离级别</li><li>数据库int(11)和int(10)有区别吗？范围一样吗（猜的有，不一样）</li><li>数据库表里的数据被清掉一半，但磁盘没释放，为什么？（不会）</li><li>七层模型and常用协议</li><li>http code</li><li>三次握手四次挥手</li><li>Js的apply和call区别（没听说过，懵逼）</li><li>跨域（没回答好，说一般在java配置）面试官表示jsonp可用解决</li><li>Vue监听属性的变化（不太知道，猜了个onChange，顺便我问投的后端啊）</li><li>Jsp和servlet有什么区别（表示一起用的呀，不知道）面试官说：同一个。。。</li><li>算法题：ip转成int再转回ip</li><li>设计lru（没答好，我说了一个方法，让再想一个，表示感觉没法优化了。。）</li><li>假设有人用脚本访问你的项目，如何限制访问（一开始说java，后来说nginx，然后才知道要数据库。。。主要说法就是map记录次数），升级版是分布式，再说如果访问量更大呢（猜了一个redis）</li><li>介绍团队</li><li>反问怎么了解前端</li><li>又问了我blog打cf，我就趁机表示了一下最近没怎么刷题，后来想拿cf练练手。</li></ul><h2 id="二面（电面）"><a href="#二面（电面）" class="headerlink" title="二面（电面）"></a>二面（电面）</h2><p>优秀的一面面试官，面完10分钟给我约了二面！<br>二面感觉自己面得很糟糕</p><p><em>有空补，可能是个坑</em></p><h2 id="hr面-1"><a href="#hr面-1" class="headerlink" title="hr面"></a>hr面</h2><p>天真以为oc原来这是面试呀，说考虑一下，反手被挂</p><h2 id="加面一"><a href="#加面一" class="headerlink" title="加面一"></a>加面一</h2><p>被同一个事业群不同部门捞起，加面一轮视频面试。结果因为自己的简历的锅来了一个c++面试官，知识交集约为0。。。</p><ul><li>首先讲了一下技术栈，然后表示用java，c++只会写题。</li><li>讲一下hashmap，被我又扯到java</li><li>跳表会吗（不会，讲道理不是学过数据结构会调表，而是学过redis会跳表啊）</li><li>网络和多线程哪块好一些？表示多线程会java，但没写过大的，网络以为是计网，结果是网络编程？不会，然后扯了一些计网和抓包</li></ul><p><strong>算法题</strong></p><blockquote><p>将单链表的每K个节点之间逆序</p></blockquote><p>题目见过没写过，问了面试官同意到自己的本地ide debug，最后不是那么好的做完了。</p><h2 id="加面二"><a href="#加面二" class="headerlink" title="加面二"></a>加面二</h2><p>加面完大概半小时多被打电话约加面，估计是换一个java面试官来吧。<br>由于那几天有点忙，往后约了两天，然后拿到其它offer就放弃面试了。</p><h1 id="摩根士丹利"><a href="#摩根士丹利" class="headerlink" title="摩根士丹利"></a>摩根士丹利</h1><p>摩根的笔试和微软冲突了，于是没在第一批笔试。<br>今年笔试相比往年简单了不少，2道算法题很简单，5道选择卡了一下。</p><h2 id="电面"><a href="#电面" class="headerlink" title="电面"></a>电面</h2><p>这是一个神奇的电面，面试内容都是我没见过的</p><ul><li>讲一下排序算法有哪些，介绍了快排和归并的思想</li><li>api全称叫什么</li><li>uml全称，了解uml吗，项目中有用过uml吗，对uml的感觉是什么（喜欢或不喜欢）</li><li>了解ddos吗</li><li>什么是事务</li><li>一开始说错了，提到ACID，讲一下acid</li><li>如果单线程单服务器，还要事务吗</li><li>你有用过junit，那么知道如果模拟数据库吗（不记得了，说用的mockito）</li></ul><h2 id="算法面"><a href="#算法面" class="headerlink" title="算法面"></a>算法面</h2><p>这一面被气到了，如果不是面试官找不到我的帐户，大概我不用写那个非算法题吧。<br>作为半个acmer，我很能分别算法题和代码题，显然，我运气不好得碰到代码题。</p><p>事情就是面试官找不到我的帐户，第一次面试，于是给我出了一个题目，分享屏幕，用本地ide写代码。</p><p>题目是约瑟夫环，但是条件限制还挺多的。<br>已经不记得算法版怎么做的了，于是做了链表版的，手写无法编译，肉眼debug，写了一堆问题，一般链表默认单链表啊，我写完告诉我可以双链表，行吧。。</p><p>面试体验-10</p><h2 id="技术面"><a href="#技术面" class="headerlink" title="技术面"></a>技术面</h2><p>没问语言相关，问了数据库（join，primary key &amp; foreign key）和网络（三次握手，还有提到对称加密非对称加密）其余不记得，不难。</p><h2 id="半hr面"><a href="#半hr面" class="headerlink" title="半hr面"></a>半hr面</h2><p>我开启了随意聊天模式，感觉没问太多有效信息，反而被我各种反问hhhh</p><h1 id="阿里"><a href="#阿里" class="headerlink" title="阿里"></a>阿里</h1><p>说真的，作为一个内部自信到要死认为别人都不如自己的大厂，为什么还要发那么多广告。好感度-100</p><h2 id="笔试-2"><a href="#笔试-2" class="headerlink" title="笔试"></a>笔试</h2><p>唔，运气好像还行，1+0.65，那个没全过的c++估计被卡精度了，python被卡超时了。。。</p><h2 id="一面-1"><a href="#一面-1" class="headerlink" title="一面"></a>一面</h2><p>投的是一个CFO部门，然而因为阿里一面是我第一个面试的公司，所以各种不会，各种紧张，面得超级烂。<br>基本就是问我什么都说不太清楚，java熟悉哪块我都不熟悉。</p><p>由于面得太糟糕不愿意去听录音。不过没想到还捞我二面。。。</p><h2 id="二面-1"><a href="#二面-1" class="headerlink" title="二面"></a>二面</h2><ul><li>常见网络协议有哪些</li><li>网络协议分几层，各有什么协议</li><li>为什么要分这么多层（最后被我扯到耦合性去了。。。）</li><li>一般防火墙在哪层（一开始猜了，后来说不知道）</li><li>负载均衡在哪一层（网络/应用都可以）</li><li>http和https区别</li><li>https的安全机制大概逻辑（我讲了非对称加密）</li><li>线程vs进程</li><li>Linux命令看进程/线程运行（ps，我说能看进程，线程不知道）</li><li>Top命令中load和cpu使用率的区别（不知道）</li><li>浏览器中网址过程</li><li>（问题有点绕）最后就是关于cookie和session</li><li>不同服务器如何判别同一个cookie/session（感觉这里一开始面试官说cookie，后来说了session，我回答了session）</li><li>二级域名的cookie，三级域名有吗，（猜有）其它网站有吗（没）</li><li>设计模式（讲工厂讲得特别混乱。。）</li><li>对称加密vs非对称加密</li><li>讲一下hashmap，线程安全吗，哪里会线程不安全</li><li>讲一下奖项。。。然后讲题（我说讲一下最近的cf一道题，但是讲得比较混乱。。因为牵涉到数学）</li><li>讲实习，学到了什么</li></ul><p>面完被打电话问是否愿意转测试（不愿意），之后发现没消息，后来牛客上看了一下这个部门应该招满了，而且自己也的确面得不好。</p><h2 id="一面-2"><a href="#一面-2" class="headerlink" title="一面"></a>一面</h2><p>又找了蚂蚁捞的我，大概是一面和简历面混合版吧，主问项目，面得不好。</p><ul><li>设计一个购物系统</li><li>cookie和session</li></ul><h2 id="二面-2"><a href="#二面-2" class="headerlink" title="二面"></a>二面</h2><p>还是被约了二面，拿到其它offer放弃了。</p><h1 id="腾讯"><a href="#腾讯" class="headerlink" title="腾讯"></a>腾讯</h1><p>说说腾讯的情况，因为主Java，不想去c++，所以先投web开发，再换了客户端。</p><h2 id="一面-3"><a href="#一面-3" class="headerlink" title="一面"></a>一面</h2><p>投完第二天早上被微信捞了，晚上面试，然而表示不愿去广东，就聊了一下。<br>前端基本不会，表示想去web后端。</p><h2 id="一面-4"><a href="#一面-4" class="headerlink" title="一面"></a>一面</h2><p>被腾讯云的IOS捞了，表示没基础。</p><p>其实一面的基础面得超级烂，主要是考os相关的了，没太复习。<br>被问了堆和栈的区别，我回答了java版的，和os的不太一样。。。面试官应该没get<br>算法题似乎是反转链表。</p><h2 id="二面-3"><a href="#二面-3" class="headerlink" title="二面"></a>二面</h2><p>就算是压力面也不用这样怼我吧，全程怼项目，后来想想应该怼回去的。<br>我就随口问了一句你们加班吗，被反问你为什么觉得不加班。难道不是传闻有些部门不怎么加班嘛，我问一句还不行吗。</p><p>代码题：写单例</p><p><strong>结果</strong>：当然挂了</p><h1 id="携程"><a href="#携程" class="headerlink" title="携程"></a>携程</h1><p>这家在我心中二线公司也是挺有趣的，估计因为今年国外很多offer被revoke了，很多人回来找实习也投了携程保底，他们竟然自信到把之前说好的不用笔试的同学们拉去笔试，还把一个拿到阿里offer的同学笔试给刷了。</p><h2 id="笔试-3"><a href="#笔试-3" class="headerlink" title="笔试"></a>笔试</h2><p>算法部分：83+75+100，选择部分随便选。<br>不算特别高，但感觉够分数线就交卷了，事实证明还是排在很前面的，基本和提前批的一个时间面试的。</p><h2 id="一面-5"><a href="#一面-5" class="headerlink" title="一面"></a>一面</h2><p>记忆中基础没怎么问，而且问的也很浅。</p><p><strong>代码题一</strong></p><blockquote><p>判断两个二叉树是否相等</p></blockquote><p><strong>代码题二</strong></p><blockquote><p>写个堆的push</p></blockquote><p>基本就没碰过堆，忘记了方法，还好被提醒了一下，就会写了</p><h2 id="二面-4"><a href="#二面-4" class="headerlink" title="二面"></a>二面</h2><p>这个面试官特别迷，各个概念块一个个问下来，包括队列和栈、排序算法、数据库等都挺简单而且非常浅的，最后写了一个工厂模式。</p><h1 id="Amazon"><a href="#Amazon" class="headerlink" title="Amazon"></a>Amazon</h1><p>神奇的亚马逊发邮件投递，一个月后应该是第二批被捞，发我邮件约时间，结果给的时间段过了还没给我面试时间，在过两天又一个面试邮件来，由于拿到offer回复邮件放弃了，然而hr没看到邮件还被面试官打电话了。。不太行。。</p><h1 id="微众银行"><a href="#微众银行" class="headerlink" title="微众银行"></a>微众银行</h1><p>这家算保底的保底了，就做了一个笔试题，30min秒完AK交卷，估计是我选择题太差了没收到面试通知（真的不看一下我编程做了多久吗？？？）<br>不过反正保底的保底不给我面试我也不稀罕</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实习季总算基本告一段落啦，零零碎碎的还有个别面试可能考虑面掉吧，但是已经决定去哪家了。&lt;/p&gt;
&lt;p&gt;和其它人相比之下，我算是非大众类型的一类面试者，开始准备已经很晚，基础可以算是烂得一塌糊度，但是算法比较好（高于普通水平，低于acmer）&lt;/p&gt;
    
    </summary>
    
    
      <category term="Others" scheme="https://yueyue200830.github.io/categories/Others/"/>
    
    
      <category term="Interview" scheme="https://yueyue200830.github.io/tags/Interview/"/>
    
      <category term="Internship" scheme="https://yueyue200830.github.io/tags/Internship/"/>
    
      <category term="面经" scheme="https://yueyue200830.github.io/tags/%E9%9D%A2%E7%BB%8F/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode——142. Linked List Cycle II</title>
    <link href="https://yueyue200830.github.io/2020/04/08/Leetcode%E2%80%94%E2%80%94142-Linked-List-Cycle-II/"/>
    <id>https://yueyue200830.github.io/2020/04/08/Leetcode%E2%80%94%E2%80%94142-Linked-List-Cycle-II/</id>
    <published>2020-04-08T13:53:50.000Z</published>
    <updated>2020-04-08T13:53:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>刷题时看到这道题，看了解答觉得很数学&amp;有趣，就来写个数学证明题吧hhhh</p><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><blockquote><p>Given a linked list, return the node where the cycle begins. If there is no cycle, return <code>null</code>.</p></blockquote><p><a href="https://leetcode.com/problems/linked-list-cycle-ii/">Leetcode链接</a></p><span id="more"></span><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>其实这是<code>Linked List Cycle</code>的升级版，和1一样，首先判断是否成环，采用快慢指针的方法，这里就不多加解释。</p><p>当我们确定是成环时，我们需要去寻找环的头部。</p><h2 id="解法一：map记录"><a href="#解法一：map记录" class="headerlink" title="解法一：map记录"></a>解法一：map记录</h2><p>这是一个最简单的方法就是用map记录环中的点，然后从头开始找第一个在map中的点，这里我也就不放代码了。</p><p>时间复杂度$O(n)$，但空间复杂度有点高。。</p><h2 id="解法二：双指针寻找-数学原理）"><a href="#解法二：双指针寻找-数学原理）" class="headerlink" title="解法二：双指针寻找(数学原理）"></a>解法二：双指针寻找(数学原理）</h2><p>这是我想记录的一个方法，个人认为没见过解答一般没法想出来，倒是可能猜到？</p><p><strong>做法</strong>：假设前面快慢指针分别为a和b，现在a和b应指向同一个节点，只需选择其中一个（如a）与一个新的指向头部head的节点的指针c一起往前走，它们第一次指向的同一个节点就是环的第一个节点。</p><p>简单来说写个伪代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a is a previous pointer</span></span><br><span class="line">c = head;</span><br><span class="line"><span class="keyword">while</span> (a != c) &#123;</span><br><span class="line">  a = a-&gt;next;</span><br><span class="line">  c = c-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是不是很神奇？完全想不到啊</p><p>时间复杂度$O(n)$，空间复杂度$O(1)$。</p><h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><p>首先，定义这里的长度为需要走的步数。</p><p>假设从head到环的头部的长度为$S_{head}$，环的长度为$S_{circle}$。<br>在前面的算法，慢指针a走了$S_a$，快指针b走了$S_b$。<br>则我们有<br>$$S_b = 2 * S_a$$</p><p>又因为现在a和b在同一个点，因此b比a多走$k$圈，即<br>$$S_b - S_a = k * S_{circle}$$<br>$$S_a = k * S_{circle}$$</p><p>那么若a又走了$S_1$的长度的话（即从头走到环头部的长度）<br>$$S_a’ = S_{head} + S_a$$<br>$$S_a’ = S_{head} + k * S_{circle}$$</p><p>这就正好是走了一个头部到环的距离+$k$圈环，也就是a正好在环的头部。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ListNode *<span class="title">detectCycle</span><span class="params">(ListNode *head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    ListNode *a = head;</span><br><span class="line">    ListNode *b = head;</span><br><span class="line">    <span class="keyword">while</span> (a != <span class="literal">NULL</span> &amp;&amp; b != <span class="literal">NULL</span> &amp;&amp; b-&gt;next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        a = a-&gt;next;</span><br><span class="line">        b = b-&gt;next-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (a == b) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (b == <span class="literal">NULL</span> || b-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    b = head;</span><br><span class="line">    <span class="keyword">while</span> (a != b) &#123;</span><br><span class="line">        a = a-&gt;next;</span><br><span class="line">        b = b-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刷题时看到这道题，看了解答觉得很数学&amp;amp;有趣，就来写个数学证明题吧hhhh&lt;/p&gt;
&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Given a linked list, return the node where the cycle begins. If there is no cycle, return &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/linked-list-cycle-ii/&quot;&gt;Leetcode链接&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://yueyue200830.github.io/categories/Algorithm/"/>
    
    
      <category term="C++" scheme="https://yueyue200830.github.io/tags/C/"/>
    
      <category term="Leetcode" scheme="https://yueyue200830.github.io/tags/Leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Python实现Canny算子边缘检测</title>
    <link href="https://yueyue200830.github.io/2020/04/04/Python%E5%AE%9E%E7%8E%B0Canny%E7%AE%97%E5%AD%90%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B/"/>
    <id>https://yueyue200830.github.io/2020/04/04/Python%E5%AE%9E%E7%8E%B0Canny%E7%AE%97%E5%AD%90%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B/</id>
    <published>2020-04-04T13:11:59.000Z</published>
    <updated>2020-04-04T13:11:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>Canny边缘检测算子是John F.Canny于1986年开发出来的一个多级边缘检测算法。Canny的目标是找到一个最优的边缘检测算法。</p><p>这里附上我手写的代码，不保证有bug。这里图像偷懒直接裁剪而没有做padding。以及代码大多没用numpy写，所以运行速度较慢（实际就是不会）</p><span id="more"></span><p>其三个主要评价标准：</p><ol><li>低错误率: 标识出尽可能多的实际边缘，同时尽可能的减少噪声产生的误报。</li><li>高定位性: 标识出的边缘要与图像中的实际边缘尽可能接近。</li><li>最小响应: 图像中的边缘只能标识一次，并且可能存在的图像噪声不应标识为边缘。</li></ol><p>Canny算子求边缘点具体算法步骤如下：</p><h1 id="1-用高斯滤波器平滑图像"><a href="#1-用高斯滤波器平滑图像" class="headerlink" title="1. 用高斯滤波器平滑图像"></a>1. 用高斯滤波器平滑图像</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>高斯滤波器（kernel）是将高斯函数离散化，将滤波器中对应的横纵坐标索引代入高斯函数，即可得到对应的值。</p><p>(2k+1)x(2k+1) 滤波器的计算公式如下：</p><p>$$ H[i, j] = \frac{1}{2 \pi \sigma ^ 2} e ^ {- \frac{(i-k-1)^2 + (j-k-1)^2}{2 \sigma ^ 2}} $$</p><p>常见的高斯滤波器为size=5，其近似值为：</p><p>$$<br>K = \frac{1}{159}<br>\left[<br> \begin{matrix}<br>   2 &amp; 4 &amp; 5 &amp; 4 &amp; 2 \\<br>   4 &amp; 9 &amp; 12 &amp; 9 &amp; 4 \\<br>   5 &amp; 12 &amp; 15 &amp; 12 &amp; 5 \\<br>   4 &amp; 9 &amp; 12 &amp; 9 &amp; 4 \\<br>   2 &amp; 4 &amp; 5 &amp; 4 &amp; 2<br>  \end{matrix}<br>\right]<br>$$</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>代码首先根据length和σ计算出高斯滤波器，然后对图片进行平滑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">smooth</span>(<span class="params">image, sigma = <span class="number">1.4</span>, length = <span class="number">5</span></span>):</span><br><span class="line">    <span class="comment"># Compute gaussian filter</span></span><br><span class="line">    k = length // <span class="number">2</span></span><br><span class="line">    gaussian = np.zeros([length, length])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">            gaussian[i, j] = np.exp(-((i-k) ** <span class="number">2</span> + (j-k) ** <span class="number">2</span>) / (<span class="number">2</span> * sigma ** <span class="number">2</span>))</span><br><span class="line">    gaussian /= <span class="number">2</span> * np.pi * sigma ** <span class="number">2</span></span><br><span class="line">    <span class="comment"># Batch Normalization</span></span><br><span class="line">    gaussian = gaussian / np.<span class="built_in">sum</span>(gaussian)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Use Gaussian Filter</span></span><br><span class="line">    W, H = image.shape</span><br><span class="line">    new_image = np.zeros([W - k * <span class="number">2</span>, H - k * <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(W - <span class="number">2</span> * k):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(H - <span class="number">2</span> * k):</span><br><span class="line">            new_image[i, j] = np.<span class="built_in">sum</span>(image[i:i+length, j:j+length] * gaussian)</span><br><span class="line"></span><br><span class="line">    new_image = np.uint8(new_image)</span><br></pre></td></tr></table></figure><h1 id="2-计算梯度幅值和方向"><a href="#2-计算梯度幅值和方向" class="headerlink" title="2. 计算梯度幅值和方向"></a>2. 计算梯度幅值和方向</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p>常见方法采用Sobel滤波器在计算梯度和方向。</p><p>采用以下卷积阵列计算x和y的差分：</p><p>$$<br>G_x =<br>\left[<br> \begin{matrix}<br>   -1 &amp; 0 &amp; +1  \\<br>   -2 &amp; 0 &amp; +2  \\<br>   -1 &amp; 0 &amp; +1  \\<br>  \end{matrix}<br>\right]<br>$$</p><p>$$<br>G_y =<br>\left[<br> \begin{matrix}<br>   -1 &amp; -2 &amp; -1  \\<br>    0 &amp;  0 &amp;  0  \\<br>   +1 &amp; +2 &amp; +1  \\<br>  \end{matrix}<br>\right]<br>$$</p><p>采用下列公式计算梯度幅值和方向：</p><p>$$<br>G = \sqrt{(G_x^2 + G_y^2)}<br>$$</p><p>$$<br>\theta = \arctan{\frac{G_y}{G_x}}<br>$$</p><p>梯度角度θ范围从弧度-π到π，然后把它近似到四个方向，分别代表水平，垂直和两个对角线方向（0°,45°,90°,135°）。可以以 $±\frac{iπ}{8}$（i=1,3,5,7）分割，落在每个区域的梯度角给一个特定值，代表四个方向之一。</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_gradient_and_direction</span>(<span class="params">image</span>):</span><br><span class="line">    Gx = np.array([[-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>], [-<span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>], [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]])</span><br><span class="line">    Gy = np.array([[-<span class="number">1</span>, -<span class="number">2</span>, -<span class="number">1</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line">    W, H = image.shape</span><br><span class="line">    gradients = np.zeros([W - <span class="number">2</span>, H - <span class="number">2</span>])</span><br><span class="line">    direction = np.zeros([W - <span class="number">2</span>, H - <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(W - <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(H - <span class="number">2</span>):</span><br><span class="line">            dx = np.<span class="built_in">sum</span>(image[i:i+<span class="number">3</span>, j:j+<span class="number">3</span>] * Gx)</span><br><span class="line">            dy = np.<span class="built_in">sum</span>(image[i:i+<span class="number">3</span>, j:j+<span class="number">3</span>] * Gy)</span><br><span class="line">            gradients[i, j] = np.sqrt(dx ** <span class="number">2</span> + dy ** <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">if</span> dx == <span class="number">0</span>:</span><br><span class="line">                direction[i, j] = np.pi / <span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                direction[i, j] = np.arctan(dy / dx)</span><br><span class="line"></span><br><span class="line">    gradients = np.uint8(gradients)</span><br></pre></td></tr></table></figure><h1 id="3-对梯度幅值进行非极大值抑制"><a href="#3-对梯度幅值进行非极大值抑制" class="headerlink" title="3. 对梯度幅值进行非极大值抑制"></a>3. 对梯度幅值进行非极大值抑制</h1><h2 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h2><p>非极大值抑制是进行边缘检测的一个重要步骤，通俗意义上是指寻找像素点局部最大值。沿着梯度方向，比较它前面和后面的梯度值，如果它不是局部最大值，则去除。</p><p>这里借用知乎@戴馨乐的图片，由于图片是之前记录下的，原文地址没有保存</p><img src="/2020/04/04/Python%E5%AE%9E%E7%8E%B0Canny%E7%AE%97%E5%AD%90%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B/1.jpg" class="" title="非极大值抑制"><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">NMS</span>(<span class="params">gradients, direction</span>):</span><br><span class="line">    W, H = gradients.shape</span><br><span class="line">    nms = np.copy(gradients[<span class="number">1</span>:-<span class="number">1</span>, <span class="number">1</span>:-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, W - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, H - <span class="number">1</span>):</span><br><span class="line">            theta = direction[i, j]</span><br><span class="line">            weight = np.tan(theta)</span><br><span class="line">            <span class="keyword">if</span> theta &gt; np.pi / <span class="number">4</span>:</span><br><span class="line">                d1 = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">                d2 = [<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">                weight = <span class="number">1</span> / weight</span><br><span class="line">            <span class="keyword">elif</span> theta &gt;= <span class="number">0</span>:</span><br><span class="line">                d1 = [<span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">                d2 = [<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">elif</span> theta &gt;= - np.pi / <span class="number">4</span>:</span><br><span class="line">                d1 = [<span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">                d2 = [<span class="number">1</span>, -<span class="number">1</span>]</span><br><span class="line">                weight *= -<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                d1 = [<span class="number">0</span>, -<span class="number">1</span>]</span><br><span class="line">                d2 = [<span class="number">1</span>, -<span class="number">1</span>]</span><br><span class="line">                weight = -<span class="number">1</span> / weight</span><br><span class="line"></span><br><span class="line">            g1 = gradients[i + d1[<span class="number">0</span>], j + d1[<span class="number">1</span>]]</span><br><span class="line">            g2 = gradients[i + d2[<span class="number">0</span>], j + d2[<span class="number">1</span>]]</span><br><span class="line">            g3 = gradients[i - d1[<span class="number">0</span>], j - d1[<span class="number">1</span>]]</span><br><span class="line">            g4 = gradients[i - d2[<span class="number">0</span>], j - d2[<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">            grade_count1 = g1 * weight + g2 * (<span class="number">1</span> - weight)</span><br><span class="line">            grade_count2 = g3 * weight + g4 * (<span class="number">1</span> - weight)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> grade_count1 &gt; gradients[i, j] <span class="keyword">or</span> grade_count2 &gt; gradients[i, j]:</span><br><span class="line">                nms[i - <span class="number">1</span>, j - <span class="number">1</span>] = <span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="4-用双阈值算法检测"><a href="#4-用双阈值算法检测" class="headerlink" title="4. 用双阈值算法检测"></a>4. 用双阈值算法检测</h1><h2 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h2><p>设置两个阈值，minVal和maxVal。梯度大于maxVal的任何边缘是真边缘，而minVal以下的边缘是非边缘。位于这两个阈值之间的边缘会基于其连通性而分类为边缘或非边缘，如果它们连接到“可靠边缘”像素，则它们被视为边缘的一部分；否则，不是边缘。</p><p>这里采用dfs搜索的方法，对于所有真边缘开始dfs搜索，直至搜索完成。</p><h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">double_threshold</span>(<span class="params">nms, threshold1, threshold2</span>):</span><br><span class="line">    visited = np.zeros_like(nms)</span><br><span class="line">    output_image = nms.copy()</span><br><span class="line">    W, H = output_image.shape</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i, j</span>):</span><br><span class="line">        <span class="keyword">if</span> i &gt;= W <span class="keyword">or</span> i &lt; <span class="number">0</span> <span class="keyword">or</span> j &gt;= H <span class="keyword">or</span> j &lt; <span class="number">0</span> <span class="keyword">or</span> visited[i, j] == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        visited[i, j] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> output_image[i, j] &gt; threshold1:</span><br><span class="line">            output_image[i, j] = <span class="number">255</span></span><br><span class="line">            dfs(i-<span class="number">1</span>, j-<span class="number">1</span>)</span><br><span class="line">            dfs(i-<span class="number">1</span>, j)</span><br><span class="line">            dfs(i-<span class="number">1</span>, j+<span class="number">1</span>)</span><br><span class="line">            dfs(i, j-<span class="number">1</span>)</span><br><span class="line">            dfs(i, j+<span class="number">1</span>)</span><br><span class="line">            dfs(i+<span class="number">1</span>, j-<span class="number">1</span>)</span><br><span class="line">            dfs(i+<span class="number">1</span>, j)</span><br><span class="line">            dfs(i+<span class="number">1</span>, j+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            output_image[i, j] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">range</span>(W):</span><br><span class="line">        <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">range</span>(H):</span><br><span class="line">            <span class="keyword">if</span> visited[w, h] == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> output_image[w, h] &gt;= threshold2:</span><br><span class="line">                dfs(w, h)</span><br><span class="line">            <span class="keyword">elif</span> output_image[w, h] &lt;= threshold1:</span><br><span class="line">                output_image[w, h] = <span class="number">0</span></span><br><span class="line">                visited[w, h] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">range</span>(W):</span><br><span class="line">        <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">range</span>(H):</span><br><span class="line">            <span class="keyword">if</span> visited[w, h] == <span class="number">0</span>:</span><br><span class="line">                output_image[w, h] = <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="OpenCV自带函数"><a href="#OpenCV自带函数" class="headerlink" title="OpenCV自带函数"></a>OpenCV自带函数</h1><p>OpenCV有自带函数可以进行高斯平滑和canny算子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">image = cv2.GaussianBlur(image, (<span class="number">5</span>,<span class="number">5</span>), <span class="number">0</span>)</span><br><span class="line">canny = cv2.Canny(image, <span class="number">50</span>, <span class="number">160</span>)</span><br></pre></td></tr></table></figure><h1 id="全部手写代码"><a href="#全部手写代码" class="headerlink" title="全部手写代码"></a>全部手写代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">smooth</span>(<span class="params">image, sigma = <span class="number">1.4</span>, length = <span class="number">5</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Smooth the image</span></span><br><span class="line"><span class="string">    Compute a gaussian filter with sigma = sigma and kernal_length = length.</span></span><br><span class="line"><span class="string">    Each element in the kernal can be computed as below:</span></span><br><span class="line"><span class="string">        G[i, j] = (1/(2*pi*sigma**2))*exp(-((i-k-1)**2 + (j-k-1)**2)/2*sigma**2)</span></span><br><span class="line"><span class="string">    Then, use the gaussian filter to smooth the input image.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        image: array of grey image</span></span><br><span class="line"><span class="string">        sigma: the sigma of gaussian filter, default to be 1.4</span></span><br><span class="line"><span class="string">        length: the kernal length, default to be 5</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        the smoothed image</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># Compute gaussian filter</span></span><br><span class="line">    k = length // <span class="number">2</span></span><br><span class="line">    gaussian = np.zeros([length, length])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">            gaussian[i, j] = np.exp(-((i-k) ** <span class="number">2</span> + (j-k) ** <span class="number">2</span>) / (<span class="number">2</span> * sigma ** <span class="number">2</span>))</span><br><span class="line">    gaussian /= <span class="number">2</span> * np.pi * sigma ** <span class="number">2</span></span><br><span class="line">    <span class="comment"># Batch Normalization</span></span><br><span class="line">    gaussian = gaussian / np.<span class="built_in">sum</span>(gaussian)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Use Gaussian Filter</span></span><br><span class="line">    W, H = image.shape</span><br><span class="line">    new_image = np.zeros([W - k * <span class="number">2</span>, H - k * <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(W - <span class="number">2</span> * k):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(H - <span class="number">2</span> * k):</span><br><span class="line">            new_image[i, j] = np.<span class="built_in">sum</span>(image[i:i+length, j:j+length] * gaussian)</span><br><span class="line"></span><br><span class="line">    new_image = np.uint8(new_image)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> new_image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_gradient_and_direction</span>(<span class="params">image</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Compute gradients and its direction</span></span><br><span class="line"><span class="string">    Use Sobel filter to compute gradients and direction.</span></span><br><span class="line"><span class="string">         -1 0 1        -1 -2 -1</span></span><br><span class="line"><span class="string">    Gx = -2 0 2   Gy =  0  0  0</span></span><br><span class="line"><span class="string">         -1 0 1         1  2  1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        image: array of grey image</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        gradients: the gradients of each pixel</span></span><br><span class="line"><span class="string">        direction: the direction of the gradients of each pixel</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    Gx = np.array([[-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>], [-<span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>], [-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>]])</span><br><span class="line">    Gy = np.array([[-<span class="number">1</span>, -<span class="number">2</span>, -<span class="number">1</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line">    W, H = image.shape</span><br><span class="line">    gradients = np.zeros([W - <span class="number">2</span>, H - <span class="number">2</span>])</span><br><span class="line">    direction = np.zeros([W - <span class="number">2</span>, H - <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(W - <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(H - <span class="number">2</span>):</span><br><span class="line">            dx = np.<span class="built_in">sum</span>(image[i:i+<span class="number">3</span>, j:j+<span class="number">3</span>] * Gx)</span><br><span class="line">            dy = np.<span class="built_in">sum</span>(image[i:i+<span class="number">3</span>, j:j+<span class="number">3</span>] * Gy)</span><br><span class="line">            gradients[i, j] = np.sqrt(dx ** <span class="number">2</span> + dy ** <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">if</span> dx == <span class="number">0</span>:</span><br><span class="line">                direction[i, j] = np.pi / <span class="number">2</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                direction[i, j] = np.arctan(dy / dx)</span><br><span class="line"></span><br><span class="line">    gradients = np.uint8(gradients)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> gradients, direction</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">NMS</span>(<span class="params">gradients, direction</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Non-maxima suppression</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        gradients: the gradients of each pixel</span></span><br><span class="line"><span class="string">        direction: the direction of the gradients of each pixel</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        the output image</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    W, H = gradients.shape</span><br><span class="line">    nms = np.copy(gradients[<span class="number">1</span>:-<span class="number">1</span>, <span class="number">1</span>:-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, W - <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, H - <span class="number">1</span>):</span><br><span class="line">            theta = direction[i, j]</span><br><span class="line">            weight = np.tan(theta)</span><br><span class="line">            <span class="keyword">if</span> theta &gt; np.pi / <span class="number">4</span>:</span><br><span class="line">                d1 = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">                d2 = [<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">                weight = <span class="number">1</span> / weight</span><br><span class="line">            <span class="keyword">elif</span> theta &gt;= <span class="number">0</span>:</span><br><span class="line">                d1 = [<span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">                d2 = [<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">            <span class="keyword">elif</span> theta &gt;= - np.pi / <span class="number">4</span>:</span><br><span class="line">                d1 = [<span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line">                d2 = [<span class="number">1</span>, -<span class="number">1</span>]</span><br><span class="line">                weight *= -<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                d1 = [<span class="number">0</span>, -<span class="number">1</span>]</span><br><span class="line">                d2 = [<span class="number">1</span>, -<span class="number">1</span>]</span><br><span class="line">                weight = -<span class="number">1</span> / weight</span><br><span class="line"></span><br><span class="line">            g1 = gradients[i + d1[<span class="number">0</span>], j + d1[<span class="number">1</span>]]</span><br><span class="line">            g2 = gradients[i + d2[<span class="number">0</span>], j + d2[<span class="number">1</span>]]</span><br><span class="line">            g3 = gradients[i - d1[<span class="number">0</span>], j - d1[<span class="number">1</span>]]</span><br><span class="line">            g4 = gradients[i - d2[<span class="number">0</span>], j - d2[<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">            grade_count1 = g1 * weight + g2 * (<span class="number">1</span> - weight)</span><br><span class="line">            grade_count2 = g3 * weight + g4 * (<span class="number">1</span> - weight)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> grade_count1 &gt; gradients[i, j] <span class="keyword">or</span> grade_count2 &gt; gradients[i, j]:</span><br><span class="line">                nms[i - <span class="number">1</span>, j - <span class="number">1</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">double_threshold</span>(<span class="params">nms, threshold1, threshold2</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Double Threshold</span></span><br><span class="line"><span class="string">    Use two thresholds to compute the edge.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        nms: the input image</span></span><br><span class="line"><span class="string">        threshold1: the low threshold</span></span><br><span class="line"><span class="string">        threshold2: the high threshold</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        The binary image.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    visited = np.zeros_like(nms)</span><br><span class="line">    output_image = nms.copy()</span><br><span class="line">    W, H = output_image.shape</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i, j</span>):</span><br><span class="line">        <span class="keyword">if</span> i &gt;= W <span class="keyword">or</span> i &lt; <span class="number">0</span> <span class="keyword">or</span> j &gt;= H <span class="keyword">or</span> j &lt; <span class="number">0</span> <span class="keyword">or</span> visited[i, j] == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        visited[i, j] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> output_image[i, j] &gt; threshold1:</span><br><span class="line">            output_image[i, j] = <span class="number">255</span></span><br><span class="line">            dfs(i-<span class="number">1</span>, j-<span class="number">1</span>)</span><br><span class="line">            dfs(i-<span class="number">1</span>, j)</span><br><span class="line">            dfs(i-<span class="number">1</span>, j+<span class="number">1</span>)</span><br><span class="line">            dfs(i, j-<span class="number">1</span>)</span><br><span class="line">            dfs(i, j+<span class="number">1</span>)</span><br><span class="line">            dfs(i+<span class="number">1</span>, j-<span class="number">1</span>)</span><br><span class="line">            dfs(i+<span class="number">1</span>, j)</span><br><span class="line">            dfs(i+<span class="number">1</span>, j+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            output_image[i, j] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">range</span>(W):</span><br><span class="line">        <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">range</span>(H):</span><br><span class="line">            <span class="keyword">if</span> visited[w, h] == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> output_image[w, h] &gt;= threshold2:</span><br><span class="line">                dfs(w, h)</span><br><span class="line">            <span class="keyword">elif</span> output_image[w, h] &lt;= threshold1:</span><br><span class="line">                output_image[w, h] = <span class="number">0</span></span><br><span class="line">                visited[w, h] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> <span class="built_in">range</span>(W):</span><br><span class="line">        <span class="keyword">for</span> h <span class="keyword">in</span> <span class="built_in">range</span>(H):</span><br><span class="line">            <span class="keyword">if</span> visited[w, h] == <span class="number">0</span>:</span><br><span class="line">                output_image[w, h] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> output_image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># code to read image</span></span><br><span class="line">    smoothed_image = smooth(image)</span><br><span class="line">    gradients, direction = get_gradient_and_direction(smoothed_image)</span><br><span class="line">    nms = NMS(gradients, direction)</span><br><span class="line">    output_image = double_threshold(nms, <span class="number">40</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><img src="/2020/04/04/Python%E5%AE%9E%E7%8E%B0Canny%E7%AE%97%E5%AD%90%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B/2.png" class="" title="输出">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Canny边缘检测算子是John F.Canny于1986年开发出来的一个多级边缘检测算法。Canny的目标是找到一个最优的边缘检测算法。&lt;/p&gt;
&lt;p&gt;这里附上我手写的代码，不保证有bug。这里图像偷懒直接裁剪而没有做padding。以及代码大多没用numpy写，所以运行速度较慢（实际就是不会）&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="https://yueyue200830.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://yueyue200830.github.io/tags/Python/"/>
    
      <category term="OpenCV" scheme="https://yueyue200830.github.io/tags/OpenCV/"/>
    
      <category term="Computer Vision" scheme="https://yueyue200830.github.io/tags/Computer-Vision/"/>
    
  </entry>
  
</feed>
